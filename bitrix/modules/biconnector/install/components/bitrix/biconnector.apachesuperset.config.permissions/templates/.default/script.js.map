{"version":3,"file":"script.js","sources":["src/permissions-app.js","src/store.js","src/permissions.js"],"sourcesContent":["import { Loc, Runtime } from 'main.core';\nimport type { BitrixVueComponentProps } from 'ui.vue3';\nimport { EventEmitter, BaseEvent } from 'main.core.events';\nimport { DashboardGroup, type Group, type Dashboard, GroupType } from 'biconnector.dashboard-group';\n\nexport const PermissionsApp: BitrixVueComponentProps = {\n\tprops: {},\n\tmounted(): void\n\t{\n\t\tEventEmitter.subscribe('BX.UI.AccessRights.V2:onSectionHeaderClick', this.handleOnSectionHeaderClick);\n\t\tEventEmitter.subscribe('BX.UI.AccessRights.V2:onRightClick', this.handleOnRightClick);\n\t\tEventEmitter.subscribe('BX.UI.AccessRights.V2:onRightDelete', this.handleOnRightDelete);\n\t\tEventEmitter.subscribe('BX.UI.AccessRights.V2:additionalRightData', this.getRightDataForSave);\n\t\tEventEmitter.subscribe('BX.UI.AccessRights.V2:afterSave', this.afterSaveRights);\n\t\tEventEmitter.subscribe('BX.UI.AccessRights.V2:onResetState', this.handleResetState);\n\t\tEventEmitter.subscribe('BIConnector.GroupPopup:onGroupUpdated', this.handleGroupChange);\n\t},\n\tbeforeUnmount(): void\n\t{\n\t\tEventEmitter.unsubscribe('BX.UI.AccessRights.V2:onSectionHeaderClick', this.handleOnSectionHeaderClick);\n\t\tEventEmitter.unsubscribe('BX.UI.AccessRights.V2:onRightClick', this.handleOnRightClick);\n\t\tEventEmitter.unsubscribe('BX.UI.AccessRights.V2:onRightDelete', this.handleOnRightDelete);\n\t\tEventEmitter.unsubscribe('BX.UI.AccessRights.V2:additionalRightData', this.getRightDataForSave);\n\t\tEventEmitter.unsubscribe('BX.UI.AccessRights.V2:afterSave', this.afterSaveRights);\n\t\tEventEmitter.unsubscribe('BX.UI.AccessRights.V2:onResetState', this.handleResetState);\n\t\tEventEmitter.unsubscribe('BIConnector.GroupPopup:onGroupUpdated', this.handleGroupChange);\n\t},\n\tcomputed: {},\n\tmethods: {\n\t\thandleOnSectionHeaderClick(event: BaseEvent): void\n\t\t{\n\t\t\tconst eventData = event.getData();\n\t\t\tif (eventData.section.sectionCode === 'SECTION_RIGHTS_GROUP')\n\t\t\t{\n\t\t\t\tconst rightCodes = new Set(eventData.section.rights.keys());\n\t\t\t\tlet groupIndex = 0;\n\t\t\t\twhile (rightCodes.has(`new_G${groupIndex}`))\n\t\t\t\t{\n\t\t\t\t\tgroupIndex++;\n\t\t\t\t}\n\t\t\t\tconst newGroupCode = `new_G${groupIndex}`;\n\t\t\t\tconst right = { ...this.$store.getters.newGroupPermissions };\n\t\t\t\tright.id = newGroupCode;\n\t\t\t\tconst group: Group = {\n\t\t\t\t\tid: right.id,\n\t\t\t\t\tname: this.$Bitrix.Loc.getMessage('BI_GROUP_NEW_TITLE'),\n\t\t\t\t\ttype: GroupType.custom,\n\t\t\t\t\tdashboardIds: [],\n\t\t\t\t\tscopes: [],\n\t\t\t\t};\n\t\t\t\tthis.$store.commit('addGroup', group);\n\t\t\t\tEventEmitter.emit('BX.UI.AccessRights.V2:addRight', {\n\t\t\t\t\tguid: this.$store.getters.appGuid,\n\t\t\t\t\tsectionCode: 'SECTION_RIGHTS_GROUP',\n\t\t\t\t\tright,\n\t\t\t\t});\n\t\t\t\tthis.right = right;\n\t\t\t\tDashboardGroup.open({\n\t\t\t\t\tgroupId: Runtime.clone(right.id),\n\t\t\t\t\tgroups: Runtime.clone(this.$store.getters.groups),\n\t\t\t\t\tdashboards: Runtime.clone(this.$store.getters.dashboards),\n\t\t\t\t\tsaveEnabled: false,\n\t\t\t\t\tisNeedShowDeletionWarningPopup: false,\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\thandleOnRightClick(event: BaseEvent): void\n\t\t{\n\t\t\tconst eventData = event.getData();\n\t\t\tif (eventData.right)\n\t\t\t{\n\t\t\t\t/** @type AccessRightItem */\n\t\t\t\tthis.right = eventData.right;\n\t\t\t\tconst rightId = eventData.right.id;\n\t\t\t\tDashboardGroup.open({\n\t\t\t\t\tgroupId: Runtime.clone(rightId),\n\t\t\t\t\tgroups: Runtime.clone(this.$store.getters.groups),\n\t\t\t\t\tdashboards: Runtime.clone(this.$store.getters.dashboards),\n\t\t\t\t\tsaveEnabled: false,\n\t\t\t\t\tisNeedShowDeletionWarningPopup: false,\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\thandleOnRightDelete(event: BaseEvent): void\n\t\t{\n\t\t\tconst eventData = event.getData();\n\t\t\tif (eventData.right)\n\t\t\t{\n\t\t\t\tthis.$store.commit('deleteGroup', eventData.right.id);\n\t\t\t}\n\t\t},\n\t\thandleGroupChange(event: BaseEvent): void\n\t\t{\n\t\t\tconst group: Group = event.getData()?.group;\n\t\t\tconst dashboards: Map<number, Dashboard> = event.getData()?.dashboards;\n\t\t\tif (!group && !dashboards)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @type AccessRightItem */\n\t\t\tconst right = this.right;\n\t\t\tif (right)\n\t\t\t{\n\t\t\t\tthis.$store.commit('updateGroup', { group, dashboards });\n\t\t\t\tEventEmitter.emit('BX.UI.AccessRights.V2:updateRightTitle', {\n\t\t\t\t\tguid: this.$store.getters.appGuid,\n\t\t\t\t\tsectionCode: 'SECTION_RIGHTS_GROUP',\n\t\t\t\t\trightId: right.id,\n\t\t\t\t\trightTitle: group.name,\n\t\t\t\t});\n\t\t\t\tEventEmitter.emit('BX.UI.AccessRights.V2:updateRightSubtitle', {\n\t\t\t\t\tguid: this.$store.getters.appGuid,\n\t\t\t\t\tsectionCode: 'SECTION_RIGHTS_GROUP',\n\t\t\t\t\trightId: right.id,\n\t\t\t\t\trightSubtitle: Loc.getMessagePlural('BI_GROUP_SUBTITLE', group.dashboardIds.length, {\n\t\t\t\t\t\t'#COUNT#': group.dashboardIds.length,\n\t\t\t\t\t}),\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tgetRightDataForSave(event: BaseEvent): BaseEvent\n\t\t{\n\t\t\tconst eventData = event.getData();\n\t\t\tif (eventData.right)\n\t\t\t{\n\t\t\t\tconst rightId = eventData.right.id;\n\t\t\t\tconst group = this.$store.getters.groupForSave(rightId);\n\t\t\t\tif (group)\n\t\t\t\t{\n\t\t\t\t\teventData.additionalRightData = { group };\n\t\t\t\t\tevent.setCompatData(eventData);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn event;\n\t\t},\n\t\tafterSaveRights(event: BaseEvent): void\n\t\t{\n\t\t\tconst eventData = event.getData();\n\t\t\tif (eventData.accessRights)\n\t\t\t{\n\t\t\t\tconst savedRights: [] = [...eventData.accessRights?.get('SECTION_RIGHTS_GROUP')?.rights?.values() ?? []];\n\t\t\t\tconst savedRightIds = new Set(savedRights.map((item) => item.id));\n\t\t\t\tconst groupIds = new Set();\n\t\t\t\tconst groups = this.$store.getters.groups;\n\t\t\t\tfor (const group: Group of this.$store.getters.groups)\n\t\t\t\t{\n\t\t\t\t\tgroupIds.add(group.id);\n\t\t\t\t}\n\n\t\t\t\tconst newGroupsBeforeSave = groups.filter((group: Group) => !savedRightIds.has(group.id));\n\t\t\t\tconst newGroupsAfterSave = savedRights.filter((right) => !groupIds.has(right.id));\n\n\t\t\t\tif (newGroupsBeforeSave.length > 0 && newGroupsAfterSave.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (const newGroupBeforeSave of newGroupsBeforeSave)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst possibleNewIds = newGroupsAfterSave\n\t\t\t\t\t\t\t.filter((item) => item.title === newGroupBeforeSave.name)\n\t\t\t\t\t\t\t.map((item) => item.id)\n\t\t\t\t\t\t;\n\t\t\t\t\t\tif (possibleNewIds.length === 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.$store.commit('updateGroupId', { oldId: newGroupBeforeSave.id, newId: possibleNewIds[0] });\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.$store.commit('setStateAsInitial');\n\t\t\t}\n\n\t\t\tif (parent?.BX)\n\t\t\t{\n\t\t\t\tparent.BX.Event.EventEmitter.emit('BIConnector.AccessRights:onRightsSaved');\n\t\t\t}\n\t\t},\n\t\thandleResetState(): void\n\t\t{\n\t\t\tthis.$store.commit('resetState');\n\t\t},\n\t},\n\ttemplate: '<template/>',\n};\n","/* eslint-disable no-param-reassign */\nimport { createStore } from 'ui.vue3.vuex';\nimport type { Group, GroupForSave, Dashboard, Scope, PermissionAppState } from './type';\nimport type { Group as PopupGroup } from 'biconnector.dashboard-group';\nimport { EventEmitter } from 'main.core.events';\nimport { Runtime } from 'main.core';\n\nexport class Store\n{\n\tstatic initialGroups: Group[];\n\tstatic initialDashboards: Map<number, Dashboard>;\n\n\t// eslint-disable-next-line max-lines-per-function\n\tstatic buildStore(defaultValues: PermissionAppState)\n\t{\n\t\tStore.initialGroups = Runtime.clone(defaultValues.groups);\n\t\tStore.initialDashboards = Runtime.clone(defaultValues.dashboards);\n\n\t\treturn createStore({\n\t\t\tstate(): PermissionAppState\n\t\t\t{\n\t\t\t\treturn defaultValues;\n\t\t\t},\n\t\t\tmutations: {\n\t\t\t\taddGroup(state: PermissionAppState, group: Group): void\n\t\t\t\t{\n\t\t\t\t\tstate.groups.push(group);\n\t\t\t\t},\n\t\t\t\tupdateGroup(\n\t\t\t\t\tstate: PermissionAppState,\n\t\t\t\t\tdata: { group: PopupGroup, dashboards: Map<number, Dashboard> },\n\t\t\t\t): void\n\t\t\t\t{\n\t\t\t\t\tconst updatedGroup = data.group;\n\t\t\t\t\tconst updatedDashboards = data.dashboards;\n\t\t\t\t\tconst groupIndex = state.groups.findIndex((item: Group) => item.id === updatedGroup.id);\n\t\t\t\t\tif (groupIndex < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst group: Group = state.groups[groupIndex];\n\n\t\t\t\t\tgroup.name = updatedGroup.name;\n\t\t\t\t\tgroup.scopes = updatedGroup.scopes;\n\t\t\t\t\tgroup.dashboardIds = updatedGroup.dashboardIds;\n\t\t\t\t\tstate.dashboards = updatedDashboards;\n\n\t\t\t\t\tStore.checkModifiedGroups(state.groups, state.dashboards, state.appGuid);\n\t\t\t\t},\n\t\t\t\tupdateGroupId(\n\t\t\t\t\tstate: PermissionAppState,\n\t\t\t\t\tdata: { oldId: string, newId: string },\n\t\t\t\t): void\n\t\t\t\t{\n\t\t\t\t\tconst group: Group = state.groups.find((item: Group) => item.id === data.oldId);\n\t\t\t\t\tif (group)\n\t\t\t\t\t{\n\t\t\t\t\t\tgroup.id = data.newId;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdeleteGroup(state: PermissionAppState, groupId: string): void\n\t\t\t\t{\n\t\t\t\t\tstate.groups = state.groups.filter((group: Group) => group.id !== groupId);\n\t\t\t\t},\n\t\t\t\tresetState(state: PermissionAppState): void\n\t\t\t\t{\n\t\t\t\t\tstate.groups = Store.initialGroups;\n\t\t\t\t\tstate.dashboards = Store.initialDashboards;\n\t\t\t\t},\n\t\t\t\tsetStateAsInitial(state: PermissionAppState): void\n\t\t\t\t{\n\t\t\t\t\tStore.initialGroups = state.groups;\n\t\t\t\t\tStore.initialDashboards = state.dashboards;\n\t\t\t\t},\n\t\t\t},\n\t\t\tgetters: {\n\t\t\t\tnewGroupPermissions(state: PermissionAppState): Object\n\t\t\t\t{\n\t\t\t\t\treturn state.newGroupPermissions;\n\t\t\t\t},\n\t\t\t\tgroups(state: PermissionAppState): Group[]\n\t\t\t\t{\n\t\t\t\t\treturn state.groups;\n\t\t\t\t},\n\t\t\t\tgroup(state: PermissionAppState): (number) => ?Group\n\t\t\t\t{\n\t\t\t\t\treturn (groupId) => {\n\t\t\t\t\t\tconst group: Group = Runtime.clone(state.groups.find((item: Group) => item.id === groupId));\n\t\t\t\t\t\tif (!group)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn group;\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tgroupForSave(state: PermissionAppState): (number) => ?GroupForSave\n\t\t\t\t{\n\t\t\t\t\treturn (groupId) => {\n\t\t\t\t\t\tconst group = Runtime.clone(state.groups.find((item: Group) => item.id === groupId));\n\t\t\t\t\t\tif (!group)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgroup.dashboards = [];\n\t\t\t\t\t\tfor (const dashboardId: number of group.dashboardIds)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgroup.dashboards.push(state.dashboards.get(dashboardId));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete group.dashboardIds;\n\n\t\t\t\t\t\treturn group;\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tdashboards(state: PermissionAppState): Map<number, Dashboard>\n\t\t\t\t{\n\t\t\t\t\treturn state.dashboards;\n\t\t\t\t},\n\t\t\t\tdashboardScopes(state: PermissionAppState): (number) => Scope[]\n\t\t\t\t{\n\t\t\t\t\treturn (dashboardId): Scope[] => state.dashboards.get(dashboardId)?.scopes ?? null;\n\t\t\t\t},\n\t\t\t\tappGuid(state: PermissionAppState): string\n\t\t\t\t{\n\t\t\t\t\treturn state.appGuid;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tstatic checkModifiedGroups(currentGroups: Group[], currentDashboards: Dashboard[], appGuid: string)\n\t{\n\t\tconst modifiedGroupIds = new Set();\n\t\tfor (const currentGroup: Group of currentGroups)\n\t\t{\n\t\t\tconst initialGroup = Store.initialGroups.find((item: Group) => item.id === currentGroup.id);\n\t\t\tif (!initialGroup)\n\t\t\t{\n\t\t\t\tmodifiedGroupIds.add(currentGroup.id);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (currentGroup.name !== initialGroup.name)\n\t\t\t{\n\t\t\t\tmodifiedGroupIds.add(currentGroup.id);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (initialGroup.dashboardIds.length !== currentGroup.dashboardIds.length)\n\t\t\t{\n\t\t\t\tmodifiedGroupIds.add(currentGroup.id);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!Store.areSetsEqual(\n\t\t\t\tnew Set(initialGroup.scopes.map((scope: Scope) => scope.code)),\n\t\t\t\tnew Set(currentGroup.scopes.map((scope: Scope) => scope.code)),\n\t\t\t))\n\t\t\t{\n\t\t\t\tmodifiedGroupIds.add(currentGroup.id);\n\t\t\t}\n\t\t}\n\n\t\tconst modifiedDashboardIds = new Set();\n\t\tfor (const currentDashboard: Dashboard of currentDashboards.values())\n\t\t{\n\t\t\tconst initialDashboard = Store.initialDashboards.get(currentDashboard.id);\n\t\t\tif (!initialDashboard)\n\t\t\t{\n\t\t\t\tmodifiedDashboardIds.add(currentDashboard.id);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!Store.areSetsEqual(\n\t\t\t\tnew Set(initialDashboard.scopes.map((scope: Scope) => scope.code)),\n\t\t\t\tnew Set(currentDashboard.scopes.map((scope: Scope) => scope.code)),\n\t\t\t))\n\t\t\t{\n\t\t\t\tmodifiedDashboardIds.add(currentDashboard.id);\n\t\t\t}\n\t\t}\n\n\t\tfor (const group: Group of currentGroups)\n\t\t{\n\t\t\tlet hasModifiedDashboards = false;\n\t\t\tfor (const dashboardId: number of group.dashboardIds)\n\t\t\t{\n\t\t\t\thasModifiedDashboards = hasModifiedDashboards || modifiedDashboardIds.has(dashboardId);\n\t\t\t}\n\n\t\t\tEventEmitter.emit('BX.UI.AccessRights.V2:markRightAsModified', {\n\t\t\t\tguid: appGuid,\n\t\t\t\tsectionCode: 'SECTION_RIGHTS_GROUP',\n\t\t\t\trightId: group.id,\n\t\t\t\tisModified: modifiedGroupIds.has(group.id) || hasModifiedDashboards,\n\t\t\t});\n\t\t}\n\t}\n\n\tstatic areSetsEqual(setA: Set, setB: Set): boolean\n\t{\n\t\tif (setA.size !== setB.size)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const item of setA)\n\t\t{\n\t\t\tif (!setB.has(item))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n","import { BitrixVue } from 'ui.vue3';\nimport type { Dashboard, Group, PermissionAppState } from './type';\nimport { PermissionsApp } from './permissions-app';\nimport { Store } from './store';\n\ntype initPermissionParams = {\n\tnewGroupPermissions: Object,\n\tdashboardGroups: Group[],\n\tdashboards: Map<number, Dashboard>,\n\tappGuid: string,\n}\n\nexport class Permissions\n{\n\tstatic init(params: initPermissionParams)\n\t{\n\t\tconst { newGroupPermissions, dashboardGroups, dashboards, appGuid } = params;\n\t\tconst state: PermissionAppState = {\n\t\t\tgroups: dashboardGroups,\n\t\t\tdashboards: new Map(Object.entries(dashboards).map(([key, value]) => [Number(key), value])),\n\t\t\tnewGroupPermissions,\n\t\t\tappGuid,\n\t\t};\n\n\t\tconst permissionsApp = BitrixVue.createApp({\n\t\t\tname: 'BIConnectorRights',\n\t\t\tdata()\n\t\t\t{\n\t\t\t\treturn {};\n\t\t\t},\n\t\t\tcomponents: {\n\t\t\t\tPermissionsApp,\n\t\t\t},\n\t\t\tcomputed: {\n\t\t\t\tcomponentName()\n\t\t\t\t{\n\t\t\t\t\treturn PermissionsApp;\n\t\t\t\t},\n\t\t\t},\n\t\t\ttemplate: `\n\t\t\t\t<PermissionsApp/>\n\t\t\t`,\n\t\t});\n\n\t\tconst store = Store.buildStore(state);\n\t\tpermissionsApp.use(store);\n\t\tpermissionsApp.mount('#bx-biconnector-role-main2');\n\t}\n}\n"],"names":["PermissionsApp","props","mounted","EventEmitter","subscribe","this","handleOnSectionHeaderClick","handleOnRightClick","handleOnRightDelete","getRightDataForSave","afterSaveRights","handleResetState","handleGroupChange","beforeUnmount","unsubscribe","computed","methods","event","eventData","getData","section","sectionCode","rightCodes","Set","rights","keys","groupIndex","has","newGroupCode","right","$store","getters","newGroupPermissions","id","group","name","$Bitrix","Loc","getMessage","type","GroupType","custom","dashboardIds","scopes","commit","emit","guid","appGuid","DashboardGroup","open","groupId","Runtime","clone","groups","dashboards","saveEnabled","isNeedShowDeletionWarningPopup","rightId","_event$getData","_event$getData2","rightTitle","rightSubtitle","getMessagePlural","length","#COUNT#","groupForSave","additionalRightData","setCompatData","_parent","accessRights","_step","savedRights","_eventData$accessRigh2","get","_eventData$accessRigh3","_eventData$accessRigh4","values","savedRightIds","map","item","groupIds","add","_iterator","newGroupsBeforeSave","filter","newGroupsAfterSave","_step2","newGroupBeforeSave","possibleNewIds","title","_this","oldId","newId","window","location","reload","_loop","_iterator2","parent","BX","Event","template","Store","babelHelpers","key","value","defaultValues","initialGroups","initialDashboards","createStore","state","mutations","addGroup","push","updateGroup","data","updatedGroup","updatedDashboards","findIndex","checkModifiedGroups","updateGroupId","find","deleteGroup","resetState","setStateAsInitial","dashboardId","dashboardScopes","_state$dashboards$get2","currentGroups","currentDashboards","modifiedGroupIds","currentGroup","initialGroup","areSetsEqual","scope","code","_step3","modifiedDashboardIds","currentDashboard","initialDashboard","_iterator3","_step4","_step5","hasModifiedDashboards","_iterator5","isModified","_iterator4","setA","setB","size","_step6","_iterator6","Permissions","params","dashboardGroups","Map","Object","entries","Number","permissionsApp","BitrixVue","createApp","components","componentName","store","buildStore","use","mount"],"mappings":"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"}