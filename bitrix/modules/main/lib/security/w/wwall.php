<? namespace Bitrix\Main\Security\W;$GLOBALS['____808148666']= array(base64_decode('dGltZQ='.'='),base64_decode(''.'dGltZQ=='),base64_decode(''.'anNvbl9k'.'Z'.'WN'.'vZ'.'GU='),base64_decode('YXJy'.'YXlfbWVyZ2U='),base64_decode(''.'a'.'m9'.'p'.'bg'.'=='),base64_decode('am'.'9pbg=='),base64_decode(''.'am'.'9p'.'bg'.'=='),base64_decode('YXJ'.'yYXlfc'.'G9w'),base64_decode('YXJy'.'YXlfc'.'2hpZnQ='),base64_decode('YXJyYXlfc2hp'.'ZnQ='),base64_decode('YXJyYX'.'l'.'fc2hp'.'Zn'.'Q='),base64_decode('Y'.'XJyYXlfc2hpZnQ='),base64_decode('YXJ'.'yYXlfbWVyZ2U'.'='),base64_decode('aXNfY'.'XJyYXk='),base64_decode('YXJyYXlfbWVyZ'.'2U='),base64_decode('aW5fYXJ'.'y'.'YXk='),base64_decode(''.'aW5'.'f'.'YX'.'JyYXk='),base64_decode('aW5fYXJ'.'yYXk='),base64_decode('a'.'W'.'5fYXJyYXk='),base64_decode('aW'.'5fYX'.'JyYXk='),base64_decode(''.'dGlt'.'ZQ=='),base64_decode('d'.'G'.'l'.'tZQ='.'='),base64_decode('YXJ'.'yYXlfbWF'.'w'),base64_decode('Z'.'2V0X2xvYWR'.'l'.'Z'.'F9l'.'eHRlbn'.'N'.'pb2'.'5z'),base64_decode('a'.'nNvbl9lb'.'mNvZGU'.'='),base64_decode('anNvb'.'l9lbmN'.'vZ'.'GU='),base64_decode('c'.'Gh'.'w'.'dm'.'Vyc'.'2lvbg'.'=='),base64_decode(''.'anNvbl'.'9lbmNvZ'.'GU='),base64_decode('am9pbg=='));if(!function_exists(__NAMESPACE__.'\\___791625495')){function ___791625495($_75443599){static $_1641290187= false; if($_1641290187 == false) $_1641290187=array('V1dBTExfTE9DSw==','c2VjdX'.'Jpd'.'Hk=','Y2FjaGU=','dHRs',''.'REFUQQ'.'='.'=','eyI=','V'.'1d'.'BTExfTE9DSw==','c2VjdXJ'.'pdHk'.'=','U'.'0VDVV'.'JJVFlfV'.'1dB'.'TExfRV'.'h'.'DRVBUSU9O','RkFJTF9DSEVD'.'S0lORw'.'==','Q'.'2FuIG5vdC'.'B'.'leGVjdXR'.'lIHd3Y'.'WxsIHJ1bGVzO'.'iA=','I'.'FRy'.'Y'.'WNlOiA=','UkVRVUVTVF9VUkk=',''.'a'.'2'.'V5cw='.'=',''.'dm'.'FsdWVz','U'.'0VDV'.'VJJVFlfV1dB'.'TExfTU9ESUZZ','Lg==','U0V'.'DVV'.'JJVFlf'.'V'.'1'.'d'.'B'.'TExfVU5T'.'RVQ=','Lg==','U0VDVV'.'JJVF'.'lf'.'V1d'.'BTExf'.'RV'.'hJVA==','L'.'g==','Z2xvYmFs','a2V5c'.'w'.'==','dmFsdW'.'Vz','Z2V0','Z2V0','cG9z'.'d'.'A='.'=','cG9zdA'.'==','Y2'.'9va2'.'ll','Y29v'.'a2ll','cmVxdWVz'.'dA==','cm'.'Vx'.'dWV'.'zd'.'A'.'==','Z'.'2xvYmF'.'s','Z2'.'xvYmFs','bWFpbl9zZWM'.'=','V1'.'d'.'BTE'.'xfQU'.'NU'.'V'.'U'.'FMSVpFX'.'1JVTEVT','d'.'g==','dmVyc'.'2lvbg'.'==','aQ==',''.'a'.'XNJbnN0YWxs'.'ZWQ=','d'.'g='.'=','aW5'.'p','c29j'.'a2V0VGlt'.'Z'.'W91'.'dA'.'==',''.'c3RyZ'.'WFtVG'.'l'.'tZ'.'W91d'.'A==','K'.'Cc=','ZGF'.'0Y'.'Q'.'==',''.'Jy'.'wg'.'Jw==','bW9'.'kd'.'W'.'xl','J'.'ywgJw==','bW9kdW'.'xl'.'X3ZlcnNpb'.'24=','Jyk=','LCA=','U0VDVVJJVFlfV1dBTEx'.'f'.'R'.'V'.'hDRV'.'BU'.'SU9O','bWFpbg='.'=','RkFJTF9S'.'RUZ'.'SR'.'VNISU5H','Q'.'2Fu'.'IG'.'5vd'.'CBy'.'Z'.'WZyZXN'.'oIHd3YWxsIHJ1bGVz'.'Oi'.'A=','IF'.'RyYWNl'.'OiA=','ZGF0YQ==','eyI=','LS0tLS1CR'.'U'.'dJTiBQVUJMSUM'.'g'.'S0VZL'.'S'.'0tL'.'S0=','C'.'k1J'.'SUJ'.'JakF'.'OQ'.'md'.'r'.'cWhr'.'aU'.'c5dz'.'BCQVFFRkFBT0NB'.'UThBTUlJ'.'QkNnS0NBUUVBcThRRTBIam1ISl'.'VTdFdWNm'.'4we'.'mEKUlZvTH'.'gw'.'M'.'kt6YmZyYlMv'.'UDZzV2F4V'.'Hp3OFNl'.'R1R0YlRDT3Jw'.'SGk1UUY2T1'.'J5alo'.'v'.'W'.'Hh6L0tMVTFHYm9m'.'OUN'.'aMwo'.'0'.'ejdTa'.'3FVdDY'.'2a'.'WJYd'.'k9GQn'.'g0'.'ZncvQV'.'BQUk'.'dEc'.'X'.'RtMG5EM2ZnR3N1'.'M'.'1JlUGd3MjlpOCt2bTd'.'tdE'.'JLSlV'.'ZbD'.'RyC'.'lZ'.'w'.'YjZ'.'zZlpFVDl'.'LRWI2VDFIRF'.'ltRXZ'.'jMWhxL2lpdXl'.'4T'.'HJaW'.'m'.'k'.'1U'.'TZVZ'.'mY0VUV2VE'.'k'.'rN'.'jhzc0Z'.'Sa1'.'Erb'.'3dUUnkK'.'ZU9JTWJG'.'aE0vVVRtZl'.'ZZ'.'YlRSRn'.'kyb1V'.'ROFdNemEybko'.'1U2Foem'.'kxV'.'UtPMWpBalhUUFJyemM3QWp1Nj'.'M'.'5aj'.'F'.'P'.'MAp'.'w'.'c'.'HFmbTV4Z'.'1dsRk'.'FKa0hR'.'VGdi'.'ZGQ1QVdxREZ'.'Ra3Q5SEtrWStUb'.'mZCT'.'EdWTXZWeV'.'B3VE'.'hOV'.'1F'.'ZQX'.'c0e'.'HBnL'.'3dBClp3'.'SURBUUFCCi0tLS0tRU5EIFBVQkx'.'JQ'.'yBLRV'.'ktLS0t'.'LQ'.'==');return base64_decode($_1641290187[$_75443599]);}}; use Bitrix\Main\Application; use Bitrix\Main\Config\Option; use Bitrix\Main\Data\Cache; use Bitrix\Main\ModuleManager; use Bitrix\Main\Security\PublicKeyCipher; use Bitrix\Main\SystemException; use Bitrix\Main\Web\HttpClient; use Bitrix\Main\Web\Json; use Bitrix\Main\Security\W\Rules\Rule; use Bitrix\Main\Security\W\Rules\Results\RuleAction; use Bitrix\Main\Security\W\Rules\Results\RuleResult; use Bitrix\Main\Security\W\Rules\Results\CheckResult; use Bitrix\Main\Security\W\Rules\Results\ModifyResult; use Bitrix\Main\Type\ArrayHelper; use Bitrix\Main\Security\W\Rules\RuleRecordTable; use ReflectionExtension; class WWall{ const CACHE_RULES_TTL= 10800; private static $_879508437= 'https://wwall.bitrix.info/rules.php'; protected $_1716977180= true; public function handle(){ try{  $_1693224730= Cache::createInstance(); $_1609060161= false; if($_1693224730->initCache(static::CACHE_RULES_TTL, 'WWALL_LOCK', 'security')){ $_485269517= $_1693224730->getVars(); if($GLOBALS['____808148666'][0]()- $_485269517> round(0+6.6666666666667+6.6666666666667+6.6666666666667)){  $_1524231411= Application::getConnection(); $_1691721841= RuleRecordTable::getTableName(); $_1524231411->truncateTable($_1691721841); RuleRecordTable::cleanCache(); $_1693224730->clean(___791625495(0), ___791625495(1));}} elseif($_1693224730->startDataCache()){  $_1693224730->endDataCache($GLOBALS['____808148666'][1]()); $_1609060161= true;}  $_151038156= RuleRecordTable::getList([ ___791625495(2) =>[___791625495(3) => round(0+1200+1200+1200)* round(0+12+12)* round(0+2.3333333333333+2.3333333333333+2.3333333333333)]])->fetchAll(); foreach($_151038156 as $_1717946296){ $_356742413= new PublicKeyCipher; $_73408579= $_356742413->decrypt($_1717946296[___791625495(4)], static::__1861539601()); if(!str_starts_with($_73408579, ___791625495(5))){ continue;} $_877275746= $GLOBALS['____808148666'][2]($_73408579, true); if(!empty($_877275746)){ $_1492428440= Rule::make($_877275746); $_2124857195= $this->handleRule($_1492428440); $this->applyHandlingResults($_2124857195);}}  if($_1609060161){ $_1693224730->clean(___791625495(6), ___791625495(7));}} catch(\Throwable $_501085413){ $this->logEvent( ___791625495(8), ___791625495(9), ___791625495(10). $_501085413->getMessage(). ___791625495(11). $_501085413->getTraceAsString());}}  public function handleRule(Rule $_1492428440): array{ $_2124857195=[]; if($_1492428440->matchPath($_SERVER[___791625495(12)])){  $_1014852498= $this->getContextElements($_1492428440->getContext()); foreach($_1014852498 as $_2100009077 => &$_181469007){ $_2124857195= $GLOBALS['____808148666'][3]($_2124857195, $this->recursiveContextKeyHandle($_2100009077, $_181469007,[], $_1492428440));}} return $_2124857195;}  public function applyHandlingResults(array $_2124857195){ $_1014852498= $this->getContextElements([ 'get', 'post', 'cookie', 'request', 'global']); foreach($_2124857195 as $_1702715765){ $_181469007=& $_1014852498[$_1702715765->getContextName()]; $_659841473= $_1702715765->getRuleResult(); $_1492428440= $_1702715765->getRule(); if($_659841473 instanceof ModifyResult){ if($_1492428440->getProcess() === ___791625495(13)){  static::rewriteContextKey( $_1702715765->getContextName(), $_181469007, $_1702715765->getContextKey(), $_659841473->getCleanValue());} elseif($_1492428440->getProcess() === ___791625495(14)){ static::rewriteContextValue( $_1702715765->getContextName(), $_181469007, $_1702715765->getContextKey(), $_659841473->getCleanValue());} $this->logEvent( ___791625495(15), $_1702715765->getContextName(), $GLOBALS['____808148666'][4](___791625495(16), $_1702715765->getContextKey()));} elseif($_659841473 instanceof CheckResult &&!$_659841473->isSuccess()){ if($_659841473->getAction() === RuleAction::UNSET){ static::unsetContextValue( $_1702715765->getContextName(), $_181469007, $_1702715765->getContextKey(),); $this->logEvent( ___791625495(17), $_1702715765->getContextName(), $GLOBALS['____808148666'][5](___791625495(18), $_1702715765->getContextKey()));} elseif($_659841473->getAction() === RuleAction::EXIT){ $this->logEvent( ___791625495(19), $_1702715765->getContextName(), $GLOBALS['____808148666'][6](___791625495(20), $_1702715765->getContextKey())); exit;}}}} public function disableEventLogging(){ $this->_1716977180= false;} protected function rewriteContextKey($_2100009077, &$_181469007, $_2093272029, $_1936730627){ $_236589707= $_2093272029;  $GLOBALS['____808148666'][7]($_236589707); $_236589707[]= $_1936730627; if($_2100009077 === ___791625495(21)){ $_188356066= $GLOBALS['____808148666'][8]($_2093272029); $GLOBALS['____808148666'][9]($_236589707); if(empty($_2093272029)){ $GLOBALS[$_1936730627]= $GLOBALS[$_188356066]; unset($GLOBALS[$_188356066]);} else{ $_181469007=& $GLOBALS[$_188356066]; $_1390811203= ArrayHelper::getByNestedKey($_181469007, $_2093272029);  ArrayHelper::setByNestedKey($_181469007, $_236589707, $_1390811203);  ArrayHelper::unsetByNestedKey($_181469007, $_2093272029);}} else{ $_1390811203= ArrayHelper::getByNestedKey($_181469007, $_2093272029);  ArrayHelper::setByNestedKey($_181469007, $_236589707, $_1390811203);  ArrayHelper::unsetByNestedKey($_181469007, $_2093272029);}} protected function rewriteContextValue($_2100009077, &$_181469007, $_422561937, $_1390811203){ if($_2100009077 === 'global'){ $_188356066= $GLOBALS['____808148666'][10]($_422561937); if(empty($_422561937)){ $GLOBALS[$_188356066]= $_1390811203;} else{ $_181469007=& $GLOBALS[$_188356066]; ArrayHelper::setByNestedKey($_181469007, $_422561937, $_1390811203);}} else{  ArrayHelper::setByNestedKey($_181469007, $_422561937, $_1390811203);}} protected function unsetContextValue($_2100009077, &$_181469007, $_422561937){ if($_2100009077 === 'global'){ $_188356066= $GLOBALS['____808148666'][11]($_422561937); if(empty($_422561937)){ unset($GLOBALS[$_188356066]);} else{ $_181469007=& $GLOBALS[$_188356066]; ArrayHelper::unsetByNestedKey($_181469007, $_422561937);}} else{ ArrayHelper::unsetByNestedKey($_181469007, $_422561937);}}  protected function recursiveContextKeyHandle(string $_2100009077, array &$_181469007, array $_1128782570, Rule $_1492428440): array{  $_2124857195=[]; foreach($_181469007 as $_1044177046 => $_1390811203){ $_422561937= $GLOBALS['____808148666'][12]($_1128782570,[$_1044177046]); if($_1492428440->matchKey($_422561937)){  if($_1492428440->getProcess() === ___791625495(22)){ $_659841473= $_1492428440->evaluate($_1044177046);} elseif($_1492428440->getProcess() === ___791625495(23)){ $_659841473= $_1492428440->evaluateValue($_1390811203);}  if(!empty($_659841473) && $_659841473 instanceof RuleResult){ $_2124857195[]= new HandlingResult($_2100009077, $_422561937, $_659841473, $_1492428440);}}  if($GLOBALS['____808148666'][13]($_1390811203)){ $_2124857195= $GLOBALS['____808148666'][14]($_2124857195, $this->recursiveContextKeyHandle( $_2100009077, $_181469007[$_1044177046], $_422561937, $_1492428440));}} return $_2124857195;} protected function getContextElements(array $_345009681){ $_1764807727=[]; if($GLOBALS['____808148666'][15](___791625495(24), $_345009681, true)){ $_1764807727[___791625495(25)]= &$_GET;} if($GLOBALS['____808148666'][16](___791625495(26), $_345009681, true)){ $_1764807727[___791625495(27)]= &$_POST;} if($GLOBALS['____808148666'][17](___791625495(28), $_345009681, true)){ $_1764807727[___791625495(29)]= &$_COOKIE;} if($GLOBALS['____808148666'][18](___791625495(30), $_345009681, true)){ $_1764807727[___791625495(31)]= &$_REQUEST;} if($GLOBALS['____808148666'][19](___791625495(32), $_345009681, true)){ $_1764807727[___791625495(33)]= $GLOBALS;} return $_1764807727;} public static function refreshRules(){ try{ $_621940673= Option::get('main_sec', 'WWALL_ACTUALIZE_RULES', 0); if(($GLOBALS['____808148666'][20]()- $_621940673)< static::CACHE_RULES_TTL){ return;} Option::set(___791625495(34), ___791625495(35), $GLOBALS['____808148666'][21]()); $_1749721551= null;  $_1444432457= $GLOBALS['____808148666'][22](function($_60070131){ return[___791625495(36) => $_60070131[___791625495(37)], ___791625495(38) => (int) $_60070131[___791625495(39)]];}, ModuleManager::getModulesFromDisk());  $_1328572312=[]; foreach($GLOBALS['____808148666'][23]() as $_2141314463){ $_1653807476= new ReflectionExtension($_2141314463); $_1328572312[$_2141314463]=[ ___791625495(40) => $_1653807476->getVersion(), ___791625495(41) => $_1653807476->getINIEntries()];}  $_302717437= new HttpClient([ ___791625495(42) => round(0+1+1+1+1+1), ___791625495(43) => round(0+2.5+2.5)]); $_154656111= $_302717437->post( static::$_879508437,[ 'modules' => $GLOBALS['____808148666'][24]($_1444432457), 'license' => Application::getInstance()->getLicense()->getHashLicenseKey(), 'php' => $GLOBALS['____808148666'][25]([ 'v' => $GLOBALS['____808148666'][26](), 'ext' => $_1328572312]),]); if($_302717437->getStatus() == round(0+200) &&!empty($_154656111)){ $_1749721551= Json::decode($_154656111);}  if($_1749721551 !== null){ $_1524231411= Application::getConnection(); $_1691721841= RuleRecordTable::getTableName(); if(!empty($_1749721551)){ foreach($_1749721551 as $_884538723){ if(!static::checkRuleSign($_884538723)){ throw new SystemException('Invalid sign for rule '.$GLOBALS['____808148666'][27]($_884538723));}}}  $_1524231411->truncateTable($_1691721841);  if(!empty($_1749721551)){ $_1540007254=[]; foreach($_1749721551 as $_884538723){ $_1540007254[]= ___791625495(44). $_1524231411->getSqlHelper()->forSql($_884538723[___791625495(45)]). ___791625495(46). $_1524231411->getSqlHelper()->forSql($_884538723[___791625495(47)]). ___791625495(48). $_1524231411->getSqlHelper()->forSql($_884538723[___791625495(49)]). ___791625495(50);} $_596089234= $GLOBALS['____808148666'][28](___791625495(51), $_1540007254);  $_1524231411->query("INSERT INTO {$_1691721841} (DATA, MODULE, MODULE_VERSION) VALUES {$_596089234}");  RuleRecordTable::cleanCache();}}} catch(\Throwable $_501085413){ \CEventLog::log( \CEventLog::SEVERITY_SECURITY, ___791625495(52), ___791625495(53), ___791625495(54), ___791625495(55). $_501085413->getMessage(). ___791625495(56). $_501085413->getTraceAsString());}} protected static function checkRuleSign($_1492428440){ $_356742413= new PublicKeyCipher; $_877275746= $_356742413->decrypt($_1492428440[___791625495(57)], static::__1861539601()); return str_starts_with($_877275746, ___791625495(58));} private static function __1861539601(){ $_1049065964= ''; $_1049065964 .= ___791625495(59); $_1049065964 .= ___791625495(60); return $_1049065964;} protected function logEvent($_565258350, $_1269180921, $_133960047){ if($this->_1716977180){ \CEventLog::log( \CEventLog::SEVERITY_SECURITY, $_565258350, 'main', $_1269180921, $_133960047);}}}?>