this.BX=this.BX||{},this.BX.Main=this.BX.Main||{},this.BX.Main.UF=this.BX.Main.UF||{},this.BX.Main.UF.File=this.BX.Main.UF.File||{},function(e,t,i,l,n,s){"use strict";const a={name:"ViewSelector",components:{UiButton:l.Button},props:{views:{type:Array,required:!0},viewId:{type:String,required:!0},onChange:{type:Function,required:!1,default:()=>{}}},setup:()=>({ButtonSize:l.ButtonSize,AirButtonStyle:l.AirButtonStyle,ButtonTag:l.ButtonTag}),data(){return{currentViewId:this.viewId}},methods:{handleViewClick(e){this.currentViewId!==e.id&&(this.currentViewId=e.id,this.onChange(e))}},template:'\n\t\t<div class="main-file-field-selectable-view__view-selector">\n\t\t\t<div class="main-file-field-selectable-view__view-selector-items">\n\t\t\t\t<UiButton\n\t\t\t\t\tv-for="view in views"\n\t\t\t\t\t@click="handleViewClick(view)"\n\t\t\t\t\t:dataset="{ editorControlType: \'button\' }"\n\t\t\t\t\t:text="view.title"\n\t\t\t\t\t:left-icon="view.icon"\n\t\t\t\t\t:size="ButtonSize.SMALL"\n\t\t\t\t\t:style="currentViewId === view.id ? AirButtonStyle.SELECTION : AirButtonStyle.PLAIN_NO_ACCENT"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t'},r={name:"BaseItem",props:{fileItem:{type:Object,required:!0}},computed:{file(){return this.fileItem}}},o={name:"TileItemAdapter",components:{TileItem:s.TileItem},extends:r,provide:{uploader:{},widgetOptions:{showItemMenuButton:!1},emitter:{},adapter:{}},computed:{tileItem(){return{name:this.file.name,extension:this.file.extension,isImage:this.file.isImage,previewUrl:this.file.isImage?this.file.url:null,status:n.FileStatus.COMPLETE,customData:{}}}},template:'\n\t\t<TileItem :item="tileItem" :readonly="true" />\n\t'},m={name:"ViewerDecorator",props:{fileItem:{type:Object,required:!0}},computed:{file(){return this.fileItem}},template:'\n\t\t<a class="main-file-field-selectable-view__viewer-decorator" v-bind="file.attributes" :href="file.urlForViewer">\n\t\t\t<slot />\n\t\t</a>\n\t'},d={name:"BaseList",props:{fileItems:{type:Array,required:!0}},computed:{files(){return this.fileItems}}},c={name:"TileList",components:{TileItemAdapter:o,ViewerDecorator:m},extends:d,template:'\n\t\t<div class="ui-tile-uploader">\n\t\t\t<div class=\'main-file-field-selectable-view__tile-list ui-tile-uploader-items\'>\n\t\t\t\t<ViewerDecorator v-for="file in files" :file-item="file">\n\t\t\t\t\t<TileItemAdapter :file-item="file" />\n\t\t\t\t</ViewerDecorator>\n\t\t\t</div>\n\t\t</div>\n\t'},f={name:"Item",components:{FileIcon:s.FileIcon},extends:r,computed:{formatFileName(){const e=this.fileNameWithoutExtension;if(e.length<=60)return e;return`${e.slice(0,54)}...${e.slice(-5)}`},fileNameWithoutExtension(){if(!this.file.extension)return this.file.name;const e=this.file.name.length-this.file.extension.length-1;return this.file.name.slice(0,e)},formatExtension(){return this.file.extension?"."+this.file.extension:""}},template:'\n\t\t<div class="main-file-field-selectable-view__list-item">\n\t\t\t<div class="main-file-field-selectable-view__list-item-preview-container">\n\t\t\t\t<div v-if="file.isImage" class="main-file-field-selectable-view__list-item-preview --image">\n\t\t\t\t\t<img class="main-file-field-selectable-view__image" :src="file.url" alt="">\n\t\t\t\t</div>\n\t\t\t\t<FileIcon\n\t\t\t\t\tv-else\n\t\t\t\t\tclass="main-file-field-selectable-view__list-item-preview --icon"\n\t\t\t\t\t:name="file.extension || \'...\'"\n\t\t\t\t\t:size="16"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div class="main-file-field-selectable-view__list-item-filename-container" :title="file.name">\n\t\t\t\t<span class="main-file-field-selectable-view__list-item-filename">{{ formatFileName }}</span>\n\t\t\t\t<span class="main-file-field-selectable-view__list-item-extension">{{ formatExtension }}</span>\n\t\t\t</div>\n\t\t</div>\n\t'},v={name:"List",components:{ViewerDecorator:m,Item:f},extends:d,template:'\n\t\t<div class=\'main-file-field-selectable-view__list\'>\n\t\t\t<ViewerDecorator v-for="file in files" :file-item="file">\n\t\t\t\t<Item :file-item="file"/>\n\t\t\t</ViewerDecorator>\n\t\t</div>\n\t'},u={name:"AdaptiveList",components:{ViewerDecorator:m,AdaptiveItem:{name:"AdaptiveItem",components:{Item:f},extends:r,template:'\n\t\t<div class="main-file-field-selectable-view__adaptive-item">\n\t\t\t<div v-if="file.isImage" class="main-file-field-selectable-view__adaptive-item-image-container">\n\t\t\t\t<img class="main-file-field-selectable-view__image" :src="file.urlForViewer" :alt="file.name" :title="file.name" />\n\t\t\t</div>\n\t\t\t<Item v-else :file-item="file" />\n\t\t</div>\n\t'}},extends:d,computed:{sortedFiles(){return[...this.files].sort((e,t)=>{switch(!0){case e.isImage&&t.isImage:return 0;case e.isImage:return-1;case t.isImage:return 1;default:return 0}})}},template:'\n\t\t<div class="main-file-field-selectable-view__adaptive-list">\n\t\t\t<ViewerDecorator :class="{ \'--image\': file.isImage }" v-for="file in sortedFiles" :file-item="file">\n\t\t\t\t<AdaptiveItem :file-item="file" />\n\t\t\t</ViewerDecorator>\n\t\t</div>\n\t'},p=BX.UI.EntityEditorUserFieldFileView,w={name:"SelectableViewWidget",components:{ViewSelector:a,TileList:c,List:v,AdaptiveList:u},props:{fileItems:{type:Array,required:!0},viewId:{type:[String,null],required:!1,default:null}},data(){var e;return{currentViewId:null!=(e=this.viewId)?e:p.default().id,views:p.getAll()}},computed:{component(){return this.getViewComponentMap().get(this.currentViewId)}},methods:{getViewComponentMap:()=>new Map([[p.TILE.id,c],[p.LIST.id,v],[p.ADAPTIVE.id,u]]),handleViewChange(e){this.currentViewId=e.id}},template:'\n\t\t<div class="main-file-field-selectable-view">\n\t\t\t<div class="main-file-field-selectable-view__view-selector-container">\n\t\t\t\t<ViewSelector :views="views" :view-id="currentViewId" :on-change="handleViewChange" />\n\t\t\t</div>\n\t\t\t<div class="main-file-field-selectable-view__file-list-container">\n\t\t\t\t<component :is="component" :file-items="fileItems" />\n\t\t\t</div>\n\t\t</div>\n\t'};var I=babelHelpers.classPrivateFieldLooseKey("app");e.SelectableViewWidget=class{constructor(e){Object.defineProperty(this,I,{writable:!0,value:void 0}),babelHelpers.classPrivateFieldLooseBase(this,I)[I]=t.BitrixVue.createApp(w,e)}mount(e){return babelHelpers.classPrivateFieldLooseBase(this,I)[I].mount(e)}}}(this.BX.Main.UF.File.Uploader=this.BX.Main.UF.File.Uploader||{},BX.Vue3,BX,BX.Vue3.Components,BX.UI.Uploader,BX.UI.Uploader);
//# sourceMappingURL=selectable-view-widget.bundle.js.map
