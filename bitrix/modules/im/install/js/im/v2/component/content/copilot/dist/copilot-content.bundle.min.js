this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,i,n,o,s,a,r,l,d,c,h,g,u,p,C,v,m,b,_,M,I,T){"use strict";const E="im-add-to-chat-hint-popup";const f={name:"AddToChatHint",components:{MessengerPopup:_.MessengerPopup},props:{bindElement:{type:Object,required:true}},emits:["close","hide"],computed:{POPUP_ID:()=>E,config(){return{darkMode:true,bindElement:this.bindElement,angle:true,width:346,closeIcon:true,offsetLeft:8,className:"bx-im-copilot-add-to-chat-hint__scope",contentBorderRadius:0}}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<MessengerPopup\n\t\t\tv-slot="{enableAutoHide, disableAutoHide}"\n\t\t\t:config="config"\n\t\t\t@close="$emit('close')"\n\t\t\t:id="POPUP_ID"\n\t\t>\n\t\t\t<div class="bx-im-copilot-add-to-chat-hint__title">\n\t\t\t\t{{ loc('IM_CONTENT_COPILOT_ADD_TO_CHAT_HINT_TITLE') }}\n\t\t\t</div>\n\t\t\t<br />\n\t\t\t<div class="bx-im-copilot-add-to-chat-hint__description">\n\t\t\t\t{{ loc('IM_CONTENT_COPILOT_ADD_TO_CHAT_HINT_DESCRIPTION') }}\n\t\t\t</div>\n\t\t\t<br />\n\t\t\t<button class="bx-im-copilot-add-to-chat-hint__hide" @click="$emit('hide')">\n\t\t\t\t{{ loc('IM_CONTENT_COPILOT_ADD_TO_CHAT_HINT_HIDE') }}\n\t\t\t</button>\n\t\t</MessengerPopup>\n\t`};const x={name:"ChatHeader",components:{EditableChatTitle:_.EditableChatTitle,AddToChat:r.AddToChat,ChatAvatar:_.ChatAvatar,AddToChatHint:f},props:{dialogId:{type:String,default:""},currentSidebarPanel:{type:String,default:""}},data(){return{showAddToChatPopup:false,showAddToChatHint:false}},computed:{AvatarSize:()=>_.AvatarSize,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},chatId(){return this.dialog.chatId},userCounter(){return M.Loc.getMessagePlural("IM_CONTENT_COPILOT_HEADER_USER_COUNT",this.dialog.userCounter,{"#COUNT#":this.dialog.userCounter})},isInited(){return this.dialog.inited},isGroupCopilotChat(){return this.dialog.userCounter>2},isSidebarOpened(){return this.currentSidebarPanel.length>0},copilotRole(){const t=this.$store.getters["copilot/chats/getRole"](this.dialogId);if(!t){return""}return t.name},isCopilotRolesAvailable(){const t=M.Extension.getSettings("im.v2.component.content.copilot");return t.copilotRolesAvailable==="Y"}},mounted(){this.showAddToChatHint=a.PromoManager.getInstance().needToShow(c.PromoId.addUsersToCopilotChat)},methods:{onNewTitleSubmit(t){this.getChatService().renameChat(this.dialogId,t).catch((()=>{BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_COPILOT_HEADER_RENAME_ERROR")})}))},getChatService(){if(!this.chatService){this.chatService=new h.ChatService}return this.chatService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)},openAddToChatPopup(){this.showAddToChatPopup=true},onMembersClick(){if(!this.isInited){return}if(this.currentSidebarPanel===c.SidebarDetailBlock.members){C.EventEmitter.emit(c.EventType.sidebar.close,{panel:c.SidebarDetailBlock.members});return}C.EventEmitter.emit(c.EventType.sidebar.open,{panel:c.SidebarDetailBlock.members,dialogId:this.dialogId})},toggleRightPanel(){if(this.currentSidebarPanel){C.EventEmitter.emit(c.EventType.sidebar.close,{panel:""});return}C.EventEmitter.emit(c.EventType.sidebar.open,{panel:c.SidebarDetailBlock.main,dialogId:this.dialogId})},onHintHide(){void a.PromoManager.getInstance().markAsWatched(c.PromoId.addUsersToCopilotChat);this.showAddToChatHint=false}},template:`\n\t\t<div class="bx-im-copilot-header__container">\n\t\t\t<div class="bx-im-copilot-header__left">\n\t\t\t\t<div class="bx-im-copilot-header__avatar">\n\t\t\t\t\t<ChatAvatar\n\t\t\t\t\t\t:avatarDialogId="dialogId"\n\t\t\t\t\t\t:contextDialogId="dialogId"\n\t\t\t\t\t\t:withSpecialTypes="false"\n\t\t\t\t\t\t:size="AvatarSize.L"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-copilot-header__info">\n\t\t\t\t\t<EditableChatTitle :dialogId="dialogId" @newTitleSubmit="onNewTitleSubmit" />\n\t\t\t\t\t<div \n\t\t\t\t\t\tv-if="isGroupCopilotChat"\n\t\t\t\t\t\t:title="loc('IM_CONTENT_COPILOT_HEADER_OPEN_MEMBERS_TITLE')"\n\t\t\t\t\t\t@click="onMembersClick"\n\t\t\t\t\t\tclass="bx-im-copilot-header__subtitle --click"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ userCounter }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-else class="bx-im-copilot-header__subtitle">\n\t\t\t\t\t\t{{ copilotRole }}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div v-if="isCopilotRolesAvailable" class="bx-im-copilot-header__right">\n\t\t\t\t<div\n\t\t\t\t\t:title="loc('IM_CONTENT_COPILOT_HEADER_OPEN_INVITE_POPUP_TITLE')"\n\t\t\t\t\t:class="{'--active': showAddToChatPopup}"\n\t\t\t\t\tclass="bx-im-copilot-header__icon --add-users"\n\t\t\t\t\t@click="openAddToChatPopup"\n\t\t\t\t\tref="add-users"\n\t\t\t\t>\n\t\t\t\t\t<AddToChatHint\n\t\t\t\t\t\tv-if="showAddToChatHint"\n\t\t\t\t\t\t:bindElement="$refs['add-users']"\n\t\t\t\t\t\t@close="showAddToChatHint = false"\n\t\t\t\t\t\t@hide="onHintHide"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclass="bx-im-copilot-header__icon --panel"\n\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_SIDEBAR')"\n\t\t\t\t\t:class="{'--active': isSidebarOpened}"\n\t\t\t\t\t@click="toggleRightPanel"\n\t\t\t\t></div>\n\t\t\t</div>\n\t\t\t<AddToChat\n\t\t\t\t:bindElement="$refs['add-users'] || {}"\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:showPopup="showAddToChatPopup"\n\t\t\t\t:popupConfig="{offsetTop: 15, offsetLeft: -300}"\n\t\t\t\t@close="showAddToChatPopup = false"\n\t\t\t/>\n\t\t</div>\n\t`};const A="#fff";const S="#eee";const y="rgba(82, 92, 105, 0.9)";const R={name:"EmptyState",components:{ChatButton:_.Button,CopilotRolesDialog:_.CopilotRolesDialog},data(){return{isCreatingChat:false,showRolesDialog:false}},computed:{ButtonSize:()=>_.ButtonSize,preparedText(){return this.loc("IM_CONTENT_COPILOT_EMPTY_STATE_MESSAGE_MSGVER_1",{"#BR#":"\n"})},buttonColorScheme(){return{borderColor:c.Color.transparent,backgroundColor:A,iconColor:y,textColor:y,hoverColor:S}},isCopilotRolesAvailable(){const t=M.Extension.getSettings("im.v2.component.content.copilot");return t.copilotRolesAvailable==="Y"},defaultRole(){return this.$store.getters["copilot/roles/getDefault"]}},methods:{onCreateChatClick(){if(!this.isCopilotRolesAvailable){void this.createChat(this.defaultRole);return}this.showRolesDialog=true},async createChat(t){const e=t.code;this.isCreatingChat=true;this.showRolesDialog=false;const i=await this.getCopilotService().createChat({roleCode:e}).catch((()=>{this.isCreatingChat=false;this.showCreateChatError()}));this.isCreatingChat=false;void d.Messenger.openCopilot(i)},showCreateChatError(){BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_COPILOT_EMPTY_STATE_ERROR_CREATING_CHAT")})},getCopilotService(){if(!this.copilotService){this.copilotService=new h.CopilotService}return this.copilotService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-content-copilot-empty-state__container">\n\t\t\t<div class="bx-im-content-copilot-empty-state__content">\n\t\t\t\t<div class="bx-im-content-copilot-empty-state__icon"></div>\n\t\t\t\t<div class="bx-im-content-copilot-empty-state__text">{{ preparedText }}</div>\n\t\t\t\t<ChatButton\n\t\t\t\t\tclass="--black-loader"\n\t\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t\t:customColorScheme="buttonColorScheme"\n\t\t\t\t\t:text="loc('IM_CONTENT_COPILOT_EMPTY_STATE_ASK_QUESTION')"\n\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t:isLoading="isCreatingChat"\n\t\t\t\t\t@click="onCreateChatClick"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<CopilotRolesDialog \n\t\t\t\tv-if="showRolesDialog && isCopilotRolesAvailable"\n\t\t\t\t@selectRole="createChat"\n\t\t\t\t@close="showRolesDialog = false"\n\t\t\t/>\n\t\t</div>\n\t`};const P={audioend:"audioend",audiostart:"audiostart",end:"end",error:"error",nomatch:"nomatch",result:"result",soundend:"soundend",soundstart:"soundstart",speechend:"speechend",speechstart:"speechstart",start:"start"};const w="BX.Messenger.v2.CopilotAudioManager";var O=babelHelpers.classPrivateFieldLooseKey("bindEvents");var B=babelHelpers.classPrivateFieldLooseKey("getRecognizedText");var L=babelHelpers.classPrivateFieldLooseKey("getNewText");var N=babelHelpers.classPrivateFieldLooseKey("initSettings");class D extends C.EventEmitter{static isAvailable(){if(v.DesktopApi.isDesktop()){return v.DesktopApi.getApiVersion()>74}return Boolean(window.SpeechRecognition||window.webkitSpeechRecognition)}constructor(){super();Object.defineProperty(this,N,{value:z});Object.defineProperty(this,L,{value:X});Object.defineProperty(this,B,{value:k});Object.defineProperty(this,O,{value:H});this.recognizer=null;this.setEventNamespace(w);this.recognizer=new(window.SpeechRecognition||window.webkitSpeechRecognition);babelHelpers.classPrivateFieldLooseBase(this,N)[N]();babelHelpers.classPrivateFieldLooseBase(this,O)[O]()}startRecognition(){this.recognizer.start()}stopRecognition(){this.recognizer.stop()}}function H(){M.Event.bind(this.recognizer,P.start,(()=>{this.lastRecognizedText="";this.emit(D.events.recognitionStart)}));M.Event.bind(this.recognizer,P.error,(t=>{this.emit(D.events.recognitionError,t.error);console.error("Copilot: AudioManager: error",t.error)}));M.Event.bind(this.recognizer,P.end,(()=>{this.lastRecognizedText="";this.emit(D.events.recognitionEnd)}));M.Event.bind(this.recognizer,P.result,(t=>{const e=babelHelpers.classPrivateFieldLooseBase(this,B)[B](t);const i=babelHelpers.classPrivateFieldLooseBase(this,L)[L](e);if(i!==""){this.emit(D.events.recognitionResult,i)}this.lastRecognizedText=e}))}function k(t){let e="";Object.values(t.results).forEach((t=>{if(t.isFinal){return}const[i]=t;const{transcript:n}=i;e+=n}));return e}function X(t){let e="";const i=this.lastRecognizedText.length;if(t.length>i){e=t.slice(i)}return e}function z(){this.recognizer.continuous=true;this.recognizer.interimResults=true}D.events={recognitionStart:"recognitionStart",recognitionError:"recognitionError",recognitionEnd:"recognitionEnd",recognitionResult:"recognitionResult"};const $={name:"AudioInput",props:{audioMode:{type:Boolean,required:true}},emits:["start","stop","inputStart","inputResult","error"],data(){return{}},watch:{audioMode(t,e){if(e===false&&t===true){this.startAudio()}if(e===true&&t===false){this.stopAudio()}}},methods:{onClick(){if(this.audioMode){this.$emit("stop");return}this.$emit("start")},startAudio(){this.getAudioManager().startRecognition();this.bindAudioEvents()},stopAudio(){this.getAudioManager().stopRecognition();this.unbindAudioEvents()},bindAudioEvents(){this.getAudioManager().subscribe(D.events.recognitionResult,(t=>{const e=t.getData();this.$emit("inputResult",e)}));this.getAudioManager().subscribe(D.events.recognitionStart,(()=>{this.$emit("inputStart")}));this.getAudioManager().subscribe(D.events.recognitionError,(()=>{this.$emit("error");BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_COPILOT_TEXTAREA_AUDIO_INPUT_ERROR")})}))},unbindAudioEvents(){this.getAudioManager().unsubscribeAll(D.events.recognitionResult);this.getAudioManager().unsubscribeAll(D.events.recognitionStart);this.getAudioManager().unsubscribeAll(D.events.recognitionEnd);this.getAudioManager().unsubscribeAll(D.events.recognitionError)},isAudioModeAvailable(){return D.isAvailable()},getAudioManager(){if(!this.audioManager){this.audioManager=new D}return this.audioManager},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div\n\t\t\tv-if="isAudioModeAvailable()"\n\t\t\t@click="onClick"\n\t\t\tclass="bx-im-copilot-audio-input__container"\n\t\t\t:class="{'--active': audioMode}"\n\t\t></div>\n\t`};const U=m.BitrixVue.cloneComponent(p.ChatTextarea,{name:"CopilotTextarea",components:{AudioInput:$},data(){return{...this.parentData(),audioMode:false,audioUsed:false}},computed:{isEmptyText(){return this.text===""},showMentionForCopilotChat(){return this.showMention&&this.dialog.userCounter>2},excludedChatsFromMentions(){const t=this.$store.getters["users/bots/getCopilotUserId"];if(t&&this.dialog.userCounter>2){return[t.toString()]}return[]}},methods:{onAudioInputStart(){if(this.isEmptyText){return}this.text+=" "},onAudioInputResult(t){if(!this.audioMode){return}this.text+=t;this.audioUsed=true},onAudioError(){this.audioMode=false},openEditPanel(){},getDraftManager(){if(!this.draftManager){this.draftManager=u.CopilotDraftManager.getInstance()}return this.draftManager},sendMessage(){this.parentSendMessage();if(this.audioUsed){g.Analytics.getInstance().useAudioInput();this.audioUsed=false}this.audioMode=false}},template:`\n\t\t<div class="bx-im-send-panel__scope bx-im-send-panel__container bx-im-copilot-send-panel__container">\n\t\t\t<div class="bx-im-textarea__container">\n\t\t\t\t<div @mousedown="onResizeStart" class="bx-im-textarea__drag-handle"></div>\n\t\t\t\t<div class="bx-im-textarea__content" ref="textarea-content">\n\t\t\t\t\t<div class="bx-im-textarea__left">\n\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\tv-model="text"\n\t\t\t\t\t\t\t:style="textareaStyle"\n\t\t\t\t\t\t\t:placeholder="loc('IM_CONTENT_COPILOT_TEXTAREA_PLACEHOLDER')"\n\t\t\t\t\t\t\t:maxlength="textareaMaxLength"\n\t\t\t\t\t\t\t@keydown="onKeyDown"\n\t\t\t\t\t\t\t@paste="onPaste"\n\t\t\t\t\t\t\tclass="bx-im-textarea__element"\n\t\t\t\t\t\t\tref="textarea"\n\t\t\t\t\t\t\trows="1"\n\t\t\t\t\t\t></textarea>\n\t\t\t\t\t\t<AudioInput\n\t\t\t\t\t\t\t:audioMode="audioMode"\n\t\t\t\t\t\t\t@start="audioMode = true"\n\t\t\t\t\t\t\t@stop="audioMode = false"\n\t\t\t\t\t\t\t@inputStart="onAudioInputStart"\n\t\t\t\t\t\t\t@inputResult="onAudioInputResult"\n\t\t\t\t\t\t\t@error="onAudioError"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<SendButton :editMode="editMode" :isDisabled="isDisabled" @click="sendMessage" />\n\t\t\t<MentionPopup\n\t\t\t\tv-if="showMentionForCopilotChat"\n\t\t\t\t:bindElement="$refs['textarea-content']"\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:query="mentionQuery"\n\t\t\t\t:searchChats="false"\n\t\t\t\t@close="closeMentionPopup"\n\t\t\t\t:exclude="excludedChatsFromMentions"\n\t\t\t/>\n\t\t</div>\n\t`});const F=Object.freeze({personal:"chat_copilot_tab_one_by_one",group:"chat_copilot_tab_multi"});class j extends I.MessageMenu{getMenuItems(){return[this.getCopyItem(),this.getFavoriteItem(),this.getForwardItem(),this.getSendFeedbackItem(),this.getDeleteItem()]}getSendFeedbackItem(){const t=new T.CopilotManager;if(!t.isCopilotBot(this.context.authorId)){return null}return{text:M.Loc.getMessage("IM_CONTENT_COPILOT_CONTEXT_MENU_FEEDBACK"),onclick:()=>{void this.openForm();this.menuInstance.close()}}}async openForm(){const t=Math.round(Math.random()*1e3);await M.Runtime.loadExtension(["ui.feedback.form"]);BX.UI.Feedback.Form.open({id:`im.copilot.feedback-${t}`,forms:[{zones:["es"],id:684,lang:"es",sec:"svvq1x"},{zones:["en"],id:686,lang:"en",sec:"tjwodz"},{zones:["de"],id:688,lang:"de",sec:"nrwksg"},{zones:["com.br"],id:690,lang:"com.br",sec:"kpte6m"},{zones:["ru","by","kz"],id:692,lang:"ru",sec:"jbujn0"}],presets:{sender_page:this.getCopilotChatContext(),language:M.Loc.getMessage("LANGUAGE_ID"),cp_answer:this.context.text}})}getCopilotChatContext(){const t=this.store.getters["chats/get"](this.context.dialogId);if(t.userCounter<=2){return F.personal}return F.group}}const G={name:"CopilotMessageList",components:{MessageList:I.MessageList,DialogStatus:_.DialogStatus},props:{dialogId:{type:String,required:true}},computed:{CopilotMessageMenu:()=>j},template:`\n\t\t<MessageList :dialogId="dialogId" :messageMenuClass="CopilotMessageMenu" />\n\t`};const K=m.BitrixVue.cloneComponent(b.ChatDialog,{name:"CopilotDialog",computed:{messageListComponent(){return G}}});const V={name:"CopilotContent",components:{EmptyState:R,ChatHeader:x,CopilotDialog:K,CopilotTextarea:U,ChatSidebar:o.ChatSidebar},directives:{"textarea-observer":{mounted(t,e){e.instance.textareaResizeManager.observeTextarea(t)},beforeUnmount(t,e){e.instance.textareaResizeManager.unobserveTextarea(t)}}},props:{entityId:{type:String,default:""},contextMessageId:{type:Number,default:0}},data(){return{textareaHeight:0,currentSidebarPanel:""}},computed:{layout(){return this.$store.getters["application/getLayout"]},dialog(){return this.$store.getters["chats/get"](this.entityId,true)},containerClasses(){const t=this.$store.getters["application/settings/get"](c.Settings.appearance.alignment);return[`--${t}-align`]},backgroundStyle(){const t=4;return i.ThemeManager.getBackgroundStyleById(t)},dialogContainerStyle(){const t=64;return{height:`calc(100% - ${t}px - ${this.textareaHeight}px)`}}},watch:{entityId(t,i){e.Logger.warn(`CopilotContent: switching from ${i||"empty"} to ${t}`);this.onChatChange()},textareaHeight(t,e){if(!this.dialog.inited||e===0){return}C.EventEmitter.emit(c.EventType.dialog.scrollToBottom,{chatId:this.dialog.chatId,animation:false})}},created(){if(this.entityId){this.onChatChange()}this.initTextareaResizeManager()},methods:{async onChatChange(){if(this.entityId===""){return}if(this.dialog.inited){e.Logger.warn(`CopilotContent: chat ${this.entityId} is already loaded`);g.Analytics.getInstance().openCopilotChat(this.entityId);return}if(this.dialog.loading){e.Logger.warn(`CopilotContent: chat ${this.entityId} is loading`);return}if(this.layout.contextId){await this.loadChatWithContext();return}await this.loadChat()},onTextareaMount(){const t=this.$refs["textarea-container"];this.textareaHeight=t.clientHeight},loadChatWithContext(){e.Logger.warn(`CopilotContent: loading chat ${this.entityId} with context - ${this.layout.contextId}`);return this.getChatService().loadChatWithContext(this.entityId,this.layout.contextId).then((()=>{e.Logger.warn(`CopilotContent: chat ${this.entityId} is loaded with context of ${this.layout.contextId}`)})).catch((t=>{if(t.code==="ACCESS_ERROR"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR"))}e.Logger.error(t);d.Messenger.openCopilot()}))},loadChat(){e.Logger.warn(`CopilotContent: loading chat ${this.entityId}`);return this.getChatService().loadChatWithMessages(this.entityId).then((()=>{e.Logger.warn(`CopilotContent: chat ${this.entityId} is loaded`);g.Analytics.getInstance().openCopilotChat(this.entityId)})).catch((t=>{const[e]=t;if(e.code==="ACCESS_DENIED"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR"))}d.Messenger.openCopilot()}))},initTextareaResizeManager(){this.textareaResizeManager=new n.ResizeManager;this.textareaResizeManager.subscribe(n.ResizeManager.events.onHeightChange,(t=>{const{newHeight:e}=t.getData();this.textareaHeight=e}))},showNotification(t){BX.UI.Notification.Center.notify({content:t})},getChatService(){if(!this.chatService){this.chatService=new h.ChatService}return this.chatService},onChangeSidebarPanel({panel:t}){this.currentSidebarPanel=t},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__container bx-im-content-copilot__container" :class="containerClasses" :style="backgroundStyle">\n\t\t\t<div v-if="entityId" class="bx-im-content-copilot__content">\n\t\t\t\t<ChatHeader :dialogId="entityId" :key="entityId" :currentSidebarPanel="currentSidebarPanel" />\n\t\t\t\t<div :style="dialogContainerStyle" class="bx-im-content-copilot__dialog_container">\n\t\t\t\t\t<div class="bx-im-content-copilot__dialog_content">\n\t\t\t\t\t\t<CopilotDialog :dialogId="entityId" :key="entityId" :textareaHeight="textareaHeight" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div v-textarea-observer class="bx-im-content-copilot__textarea_container" ref="textarea-container">\n\t\t\t\t\t<CopilotTextarea :dialogId="entityId" :key="entityId" @mounted="onTextareaMount" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<EmptyState v-else />\n\t\t\t<ChatSidebar\n\t\t\t\tv-if="entityId.length > 0"\n\t\t\t\t:originDialogId="entityId"\n\t\t\t\t@changePanel="onChangeSidebarPanel"\n\t\t\t/>\n\t\t</div>\n\t`};t.CopilotContent=V})(this.BX.Messenger.v2.Component.Content=this.BX.Messenger.v2.Component.Content||{},BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component,BX,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.EntitySelector,BX.Main,BX.Messenger.v2.Lib,BX.Messenger.v2.Const,BX.Messenger.v2.Provider.Service,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component,BX.Event,BX.Messenger.v2.Lib,BX.Vue3,BX.Messenger.v2.Component.Dialog,BX.Messenger.v2.Component.Elements,BX,BX.Messenger.v2.Component,BX.Messenger.v2.Lib);
//# sourceMappingURL=copilot-content.bundle.map.js