this.BX=this.BX||{};this.BX.Tasks=this.BX.Tasks||{};this.BX.Tasks.V2=this.BX.Tasks.V2||{};this.BX.Tasks.V2.Component=this.BX.Tasks.V2.Component||{};(function(t,e,s,i,n,o,l,a,r,c,d,h,u,m,p,I,f,v,C,k,g,L,S,b,w,T,M,P,A){"use strict";const E={name:"CheckListStub",components:{UiButton:l.Button},emits:["click"],setup(){return{ButtonSize:l.ButtonSize}},template:`\n\t\t<div class="check-list-stub">\n\t\t\t<div class="check-list-stub-title">\n\t\t\t\t{{ loc('TASKS_V2_CHECK_LIST_STUB_TITLE') }}\n\t\t\t</div>\n\t\t\t<div class="check-list-stub-icon"></div>\n\t\t\t<div class="check-list-stub-btn">\n\t\t\t\t<UiButton\n\t\t\t\t\t:text="loc('TASKS_V2_CHECK_LIST_STUB_BTN')"\n\t\t\t\t\t:size="ButtonSize.MEDIUM"\n\t\t\t\t\t@click="$emit('click')"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t`};const B={name:"TaskCheckListPopup",components:{Popup:a.Popup},inheritAttrs:false,props:{taskId:{type:[Number,String],required:true}},emits:["show","close","resize"],setup(){return{resizeObserver:null}},computed:{popupId(){return`tasks-check-list-popup-${this.taskId}`},popupOptions(){return{className:"tasks-check-list-popup",width:580,height:500,borderRadius:"18px",offsetTop:0,padding:0,autoHide:true,closeByEsc:true,animation:{showClassName:"tasks-check-list-popup-show",closeClassName:"tasks-check-list-popup-close",closeAnimationType:"animation"},events:{onClose:this.handleClose.bind(this)}}},...r.mapGetters({titleFieldOffsetHeight:`${A.Model.Interface}/titleFieldOffsetHeight`})},watch:{async titleFieldOffsetHeight(){if(!this.$refs.childComponent){return}await this.$nextTick();this.resize()}},created(){this.resizeObserver=new ResizeObserver((t=>{for(const e of t){if(e.target===this.$refs.wrapper){this.resize()}}}))},mounted(){S.Event.bind(window,"resize",this.resize)},beforeUnmount(){S.Event.unbind(window,"resize",this.resize)},methods:{resize(){var t;const e=(t=this.$refs.childComponent)==null?void 0:t.getPopupInstance();if(e){this.$emit("resize");e.adjustPosition()}},handleShow(){var t;this.$emit("show",{popupInstance:this.$refs.childComponent.getPopupInstance()});(t=this.$refs.childComponent)==null?void 0:t.getPopupInstance().adjustPosition();setTimeout((()=>this.resizeObserver.observe(this.$parent.$refs.wrapper)),300)},handleClose(){this.resizeObserver.disconnect();this.$bitrix.eventEmitter.emit(A.EventName.CloseCheckList);this.$emit("close")}},template:`\n\t\t<Popup :options="popupOptions" ref="childComponent">\n\t\t\t<slot\n\t\t\t\t:handleShow="handleShow"\n\t\t\t\t:handleClose="handleClose"\n\t\t\t></slot>\n\t\t</Popup>\n\t`};const _={name:"TaskCheckListSheet",components:{BottomSheet:c.BottomSheet},props:{isShown:{type:Boolean,required:true}},emits:["show","close","isShown"],data(){return{isExpanded:false}},computed:{...r.mapGetters({titleFieldOffsetHeight:`${A.Model.Interface}/titleFieldOffsetHeight`})},watch:{titleFieldOffsetHeight(){var t;(t=this.$refs.childComponent)==null?void 0:t.adjustPosition()},async isShown(t){await this.$nextTick();this.$emit("isShown",t)}},methods:{handleShow(){this.$emit("show")},handleClose(){this.$emit("close")}},template:`\n\t\t<BottomSheet\n\t\t\t:isShown="isShown"\n\t\t\t:isExpanded="isExpanded"\n\t\t\t:class="'--check-list'"\n\t\t\tref="childComponent"\n\t\t>\n\t\t\t<slot\n\t\t\t\t:handleShow="handleShow"\n\t\t\t\t:handleClose="handleClose"\n\t\t\t></slot>\n\t\t</BottomSheet>\n\t`};var y=babelHelpers.classPrivateFieldLooseKey("params");var O=babelHelpers.classPrivateFieldLooseKey("getRootParent");var F=babelHelpers.classPrivateFieldLooseKey("getCheckLists");class ${constructor(t){Object.defineProperty(this,F,{value:x});Object.defineProperty(this,O,{value:H});Object.defineProperty(this,y,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,y)[y]=t}getItem(t){return babelHelpers.classPrivateFieldLooseBase(this,F)[F]().find((e=>e.id===t))}getItemsOnLevel(t){return babelHelpers.classPrivateFieldLooseBase(this,F)[F]().filter((e=>e.parentId===t)).sort(((t,e)=>t.sortIndex-e.sortIndex))}getItemLevel(t){let e=0;let s=t;const i=new Set;const n=t=>babelHelpers.classPrivateFieldLooseBase(this,F)[F]().find((e=>e.id===t));while(s.parentId!==0){if(i.has(s.id)){break}i.add(s.id);s=n(s.parentId);if(!s){break}e++}return e}isItemDescendant(t,e){if((e==null?void 0:e.parentId)===(t==null?void 0:t.id)){return true}if((e==null?void 0:e.parentId)===0){return false}const s=babelHelpers.classPrivateFieldLooseBase(this,F)[F]().find((t=>t.id===(e==null?void 0:e.parentId)));if(!s){return false}return this.isItemDescendant(t,s)}syncParentCompletionState(t,e,s){const i=babelHelpers.classPrivateFieldLooseBase(this,F)[F]().find((e=>e.id===t));if((!i||!i.parentId)&&!s){return}const n=s||i.parentId;const o=babelHelpers.classPrivateFieldLooseBase(this,F)[F]().find((t=>t.id===n));if(!o){return}const l=babelHelpers.classPrivateFieldLooseBase(this,F)[F]().filter((t=>t.parentId===o.id));const a=l.length===0;const r=l.every((t=>t.isComplete));const c=l.some((t=>!t.isComplete));const d=a||r&&!o.isComplete||c&&o.isComplete;if(!d){return}e(o.id,{isComplete:r&&!a});if(o.parentId){this.syncParentCompletionState(o.id,e)}}getAllGroupModeItems(){return babelHelpers.classPrivateFieldLooseBase(this,F)[F]().filter((t=>{var e;return((e=t.groupMode)==null?void 0:e.active)===true}))}getAllSelectedItems(){return babelHelpers.classPrivateFieldLooseBase(this,F)[F]().filter((t=>{var e;return t.parentId!==0&&((e=t.groupMode)==null?void 0:e.selected)===true}))}getAllSelectedItemsWithChildren(){const t=new Map;const e=this.getAllSelectedItems();const s=babelHelpers.classPrivateFieldLooseBase(this,F)[F]();e.forEach((e=>t.set(e.id,e)));const i=e=>{const n=s.filter((s=>e.includes(s.parentId)&&!t.has(s.id)));n.forEach((e=>t.set(e.id,e)));if(n.length>0){i(n.map((t=>t.id)))}};i(e.map((t=>t.id)));return Array.from(t.values())}getAllChildren(t){const e=new Set;const s=[];const i=t=>{if(e.has(t)){return}e.add(t);const n=babelHelpers.classPrivateFieldLooseBase(this,F)[F]().filter((e=>e.parentId===t)).sort(((t,e)=>t.sortIndex-e.sortIndex));n.forEach((t=>{if(!e.has(t.id)){s.push(t);i(t.id)}}))};i(t);return s}getAllCompletedChildrenChildren(t){return this.getAllChildren(t).filter((t=>t.isComplete===true))}getChildren(t){return babelHelpers.classPrivateFieldLooseBase(this,F)[F]().filter((e=>e.parentId===t))}getSiblings(t,e){return babelHelpers.classPrivateFieldLooseBase(this,F)[F]().filter((s=>s.parentId===e&&s.id!==t)).sort(((t,e)=>t.sortIndex-e.sortIndex))}resortItemsOnLevel(t,e){const s=babelHelpers.classPrivateFieldLooseBase(this,F)[F]().filter((e=>e.parentId===t));const i=[...s].sort(((t,e)=>t.sortIndex-e.sortIndex));const n=i.map(((t,e)=>({...t,sortIndex:e})));if(n.length>0){e(n)}}resortItemsAfterIndex(t,e,s){const i=babelHelpers.classPrivateFieldLooseBase(this,F)[F]().filter((e=>e.parentId===t));const n=i.filter((t=>t.sortIndex>=e)).sort(((t,e)=>t.sortIndex-e.sortIndex));const o=n.map((t=>({...t,sortIndex:t.sortIndex+1})));if(o.length>0){s(o)}}moveRight(t,e){if(t.parentId===0||this.getItemLevel(t)>5){return}const s=this.getItemsOnLevel(t.parentId);const i=s.findIndex((e=>e.id===t.id));if(i<=0){return}let n=null;for(let e=i-1;e>=0;e--){const i=s[e];if(!this.isItemDescendant(i,t)){n=i;break}}if(!n){return}const o=babelHelpers.classPrivateFieldLooseBase(this,F)[F]().filter((t=>t.parentId===n.id)).sort(((t,e)=>t.sortIndex-e.sortIndex));const l=s.filter(((t,e)=>e>i)).map((t=>({...t,sortIndex:t.sortIndex-1})));l.push({...t,parentId:n.id,parentNodeId:n.nodeId,sortIndex:o.length>0?o[o.length-1].sortIndex+1:0});e(l)}moveLeft(t,e){if(t.parentId===0||this.getItemLevel(t)<=1){return}const s=babelHelpers.classPrivateFieldLooseBase(this,F)[F]().find((e=>e.id===t.parentId));if(!s){return}const i=this.getItemsOnLevel(s.parentId);const n=i.findIndex((t=>t.id===s.id));const o=babelHelpers.classPrivateFieldLooseBase(this,F)[F]().filter((e=>e.parentId===t.parentId&&e.sortIndex>t.sortIndex)).map((t=>({...t,sortIndex:t.sortIndex-1})));let l=0;if(n===-1||n===i.length-1){l=i.length>0?i[i.length-1].sortIndex+1:0}else{l=i[n].sortIndex+1;const t=i.filter((t=>t.sortIndex>=l)).map((t=>({...t,sortIndex:t.sortIndex+1})));o.push(...t)}const a={...t,parentId:s.parentId,parentNodeId:s.parentNodeId||null,sortIndex:l};e([...o,a])}findNearestItem(t,e,s=[]){if(!t){return null}const i=babelHelpers.classPrivateFieldLooseBase(this,O)[O](t);if(!i){return null}const n=t.sortIndex;const o=new Set(s.map((t=>t.id)));const l=babelHelpers.classPrivateFieldLooseBase(this,F)[F]().sort(((t,e)=>t.sortIndex-e.sortIndex)).filter((s=>{var n,l;const a=o.has(s.parentId);return s.id!==t.id&&s.parentId!==0&&((n=s.groupMode)==null?void 0:n.selected)===e&&((l=babelHelpers.classPrivateFieldLooseBase(this,O)[O](s))==null?void 0:l.id)===i.id&&!a}));if(l.length===0){return null}return l.reduce(((t,e)=>e.sortIndex>n&&(e.sortIndex<t.sortIndex||t.sortIndex<=n)?e:t))}getFirstChild(t){const e=babelHelpers.classPrivateFieldLooseBase(this,F)[F]().filter((e=>e.parentId===t)).sort(((t,e)=>t.sortIndex-e.sortIndex));return e[0]||null}}function H(t){if(!t||t.parentId===0){return t||null}const e=babelHelpers.classPrivateFieldLooseBase(this,F)[F]().find((e=>e.id===t.parentId));if(!e){return null}return babelHelpers.classPrivateFieldLooseBase(this,O)[O](e)}function x(){var t,e,s;return(t=(e=babelHelpers.classPrivateFieldLooseBase(this,y)[y])==null?void 0:(s=e.computed)==null?void 0:s.checkLists())!=null?t:[]}const R=Object.freeze({id:"checklist",title:S.Loc.getMessage("TASKS_V2_CHECK_LIST_TITLE")});const N={name:"TaskCheckListList",components:{BIcon:C.BIcon},props:{taskId:{type:[Number,String],required:true}},emits:["open","addFastCheckList"],setup(){return{Animated:b.Animated,Outline:b.Outline,checkListMeta:R}},data(){return{checkListManager:null}},computed:{task(){return this.$store.getters[`${A.Model.Tasks}/getById`](this.taskId)},checkLists(){return this.$store.getters[`${A.Model.CheckList}/getByIds`](this.task.checklist)},isLoading(){return this.checkLists.length===0},containsChecklist(){return this.task.containsChecklist}},async created(){this.checkListManager=new $({computed:{checkLists:()=>this.checkLists}});if(this.containsChecklist){void this.loadData()}},methods:{async loadData(){await d.checkListService.load(this.taskId)}},template:`\n\t\t<div\n\t\t\t:data-task-field-id="checkListMeta.id"\n\t\t\tclass="tasks-check-list-list"\n\t\t\t:class="{ '--default': isLoading }"\n\t\t>\n\t\t\t<div\n\t\t\t\tclass="tasks-check-list-list-content"\n\t\t\t\t:class="{ '--default': isLoading }"\n\t\t\t>\n\t\t\t\t<template v-if="isLoading">\n\t\t\t\t\t<div class="tasks-check-list-list-content-row">\n\t\t\t\t\t\t<BIcon :name="Animated.LOADER_WAIT"/>\n\t\t\t\t\t\t<div class="tasks-check-list-list-content-text">\n\t\t\t\t\t\t\t{{ loc('TASKS_V2_CHECK_LIST_LOADING') }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t\t<template v-else>\n\t\t\t\t\t<slot></slot>\n\t\t\t\t\t<div class="tasks-check-list-list-content-row --footer">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass="tasks-check-list-list-content-btn"\n\t\t\t\t\t\t\t@click="$emit('addFastCheckList')"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<BIcon :name="Outline.PLUS_L"/>\n\t\t\t\t\t\t\t<div class="tasks-check-list-list-content-btn-text">\n\t\t\t\t\t\t\t\t{{ loc('TASKS_V2_CHECK_LIST_ADD_LABEL') }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</div>\n\t\t</div>\n\t`};const D={props:{taskId:{type:[Number,String],required:true},id:{type:[Number,String],required:true},isPreview:{type:Boolean,default:false}},emits:["update","addItem","removeItem","focus","blur","emptyBlur","show","hide"],data(){return{isHovered:false,scrollContainer:null}},computed:{task(){return this.$store.getters[`${A.Model.Tasks}/getById`](this.taskId)},checkLists(){return this.$store.getters[`${A.Model.CheckList}/getByIds`](this.task.checklist)},item(){return this.$store.getters[`${A.Model.CheckList}/getById`](this.id)},canModify(){return this.item.actions.modify===true},canRemove(){return this.item.actions.remove===true},canToggle(){return this.item.actions.toggle===true},hasAttachments(){return this.hasUsers},hasUsers(){return this.hasAccomplices||this.hasAuditors},hasAccomplices(){var t;return((t=this.accomplices)==null?void 0:t.length)>0},hasAuditors(){var t;return((t=this.auditors)==null?void 0:t.length)>0},accomplices(){return this.item.accomplices},auditors(){return this.item.auditors},files(){return this.item.attachments},textColor(){return this.item.isComplete?"var(--ui-color-base-4)":"var(--ui-color-base-1)"},groupMode(){var t;return((t=this.item.groupMode)==null?void 0:t.active)===true},groupModeSelected(){var t;return((t=this.item.groupMode)==null?void 0:t.selected)===true}},methods:{handleFocus(){this.$emit("focus",this.id)},handleBlur(){this.$emit("blur",this.id)},handleEmptyBlur(){this.$emit("emptyBlur",this.id)},updateTitle(t=""){this.$store.dispatch(`${A.Model.CheckList}/update`,{id:this.id,fields:{title:t}});this.$emit("update")},addItem(t){this.$emit("addItem",{id:this.id,sort:S.Type.isNumber(t)?t:null})},removeItem(){this.$emit("removeItem",this.id)},getChildren(t){return this.checkLists.filter((e=>e.parentId===t))}}};const K={name:"CheckListParentItem",components:{BIcon:C.BIcon,BMenu:h.BMenu,GrowingTextArea:I.GrowingTextArea,UserAvatarList:f.UserAvatarList,ProgressBar:u.ProgressBar},mixins:[D],inject:["setItemsRef"],emits:["toggleCompleted","startGroupMode","openCheckList"],setup(){return{Actions:b.Actions,Outline:b.Outline}},data(){return{isSticky:false,isMenuShown:false,menuRemoveSectionCode:"removeSection",areCompletedCollapsed:false}},computed:{menuOptions(){return{id:`check-list-parent-item-action-menu-${S.Text.getRandom()}`,bindElement:this.$refs.more.$el,minWidth:250,offsetLeft:-100,sections:[{code:this.menuRemoveSectionCode}],items:this.menuItems,targetContainer:document.body,closeByEsc:true}},menuItems(){const t={title:this.areCompletedCollapsed?this.loc("TASKS_V2_CHECK_LIST_ITEM_MENU_SHOW"):this.loc("TASKS_V2_CHECK_LIST_ITEM_MENU_HIDE"),icon:this.areCompletedCollapsed?b.Outline.OBSERVER:b.Outline.CROSSED_EYE,dataset:{id:`MenuProfileHide-${this.id}`},onClick:()=>{this.isMenuShown=false;this.areCompletedCollapsed=!this.areCompletedCollapsed;this.$emit("toggleCompleted",{itemId:this.id,collapsed:this.areCompletedCollapsed})}};const e={title:this.loc("TASKS_V2_CHECK_LIST_ITEM_MENU_GROUP"),icon:b.Outline.MULTICHOICE_ON,dataset:{id:`MenuProfileGroup-${this.id}`},onClick:()=>{if(this.item.collapsed===true){this.collapseChildrenItems(this.id)}this.$emit("startGroupMode",this.id);this.isMenuShown=false}};const s={sectionCode:this.menuRemoveSectionCode,title:this.loc("TASKS_V2_CHECK_LIST_ITEM_MENU_EDIT"),icon:b.Outline.EDIT_L,dataset:{id:`MenuProfileEdit-${this.id}`},onClick:()=>this.$emit("openCheckList",this.id)};const i={sectionCode:this.menuRemoveSectionCode,design:"alert",title:this.loc("TASKS_V2_CHECK_LIST_ITEM_MENU_REMOVE"),icon:b.Outline.TRASHCAN,dataset:{id:`MenuProfileRemove-${this.id}`},onClick:this.removeItem.bind(this)};if(this.isPreview){return[t,s,i]}else{return[t,e,i]}},itemIcon(){return this.item.isComplete?b.Outline.CHECK_L:b.Outline.CHECK_LIST},checkListStatus(){const t=this.loc("TASKS_V2_CHECK_LIST_STATUS_LABEL_NEW");return t.replace("#completed#",this.completedCount).replace("#total#",this.totalCount)},completedCount(){return this.checkLists.filter((t=>t.parentId===this.id&&t.isComplete)).length},totalCount(){return this.checkLists.filter((t=>t.parentId===this.id)).length}},mounted(){var t;this.scrollContainer=(t=this.$parent.$el)==null?void 0:t.closest("[data-list]");if(this.setItemsRef){this.setItemsRef(this.id,this)}if(this.scrollContainer){S.Event.bind(this.scrollContainer,"scroll",this.handleScroll);void this.$nextTick(this.checkSticky);this.mutationObserver=new MutationObserver((()=>{this.checkSticky()}));this.mutationObserver.observe(this.scrollContainer,{childList:true,subtree:true})}},beforeUnmount(){if(this.scrollContainer){S.Event.unbind(this.scrollContainer,"scroll",this.handleScroll)}if(this.mutationObserver){this.mutationObserver.disconnect()}if(this.setItemsRef){this.setItemsRef(this.id,null)}},methods:{handleScroll(){this.checkSticky();this.isMenuShown=false},checkSticky(){if(!this.scrollContainer||!this.$refs.item){return}const t=this.$refs.item.getBoundingClientRect();const e=this.scrollContainer.getBoundingClientRect();this.isSticky=t.top<=e.top+t.height/2},showMenu(){this.isMenuShown=true},collapseChildrenItems(t){this.$store.dispatch(`${A.Model.CheckList}/update`,{id:t,fields:{collapsed:!this.item.collapsed&&!this.item.previewCollapsed,previewCollapsed:false}})},isCollapsed(t){return t.collapsed===true||this.isPreview&&t.previewCollapsed===true}},template:`\n\t\t<div\n\t\t\tref="item"\n\t\t\tclass="check-list-widget-parent-item"\n\t\t\t:class="{\n\t\t\t\t'--complete': item.isComplete,\n\t\t\t\t'--collapsed': isCollapsed(item),\n\t\t\t\t'--preview': isPreview,\n\t\t\t}"\n\t\t\t:data-id="id"\n\t\t\t:data-parent="id"\n\t\t>\n\t\t\t<div class="check-list-widget-parent-item-label-container">\n\t\t\t\t<BIcon :name="itemIcon"/>\n\t\t\t</div>\n\t\t\t<div class="check-list-widget-parent-item-title-container">\n\t\t\t\t<GrowingTextArea\n\t\t\t\t\tclass="check-list-widget-parent-item-title"\n\t\t\t\t\t:data-check-list-id="'check-list-parent-item-title-' + id"\n\t\t\t\t\t:modelValue="item.title"\n\t\t\t\t\t:placeholder="loc('TASKS_V2_CHECK_LIST_ITEM_PLACEHOLDER')"\n\t\t\t\t\t:readonly="groupMode || isPreview"\n\t\t\t\t\t:fontColor="textColor"\n\t\t\t\t\t:fontSize="17"\n\t\t\t\t\t:lineHeight="20"\n\t\t\t\t\t:fontWeight="500"\n\t\t\t\t\t@update:modelValue="updateTitle"\n\t\t\t\t\t@focus="handleFocus"\n\t\t\t\t\t@blur="handleBlur"\n\t\t\t\t\t@emptyBlur="handleEmptyBlur"\n\t\t\t\t/>\n\t\t\t\t<template v-if="hasAttachments">\n\t\t\t\t\t<div class="check-list-widget-item-attach --parent">\n\t\t\t\t\t\t<div v-if="hasUsers" class="check-list-widget-item-attach-users">\n\t\t\t\t\t\t\t<div v-if="hasAccomplices" class="check-list-widget-item-attach-users-list">\n\t\t\t\t\t\t\t\t<BIcon :name="Outline.GROUP"/>\n\t\t\t\t\t\t\t\t<UserAvatarList :users="accomplices"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div v-if="hasAuditors" class="check-list-widget-item-attach-users-list">\n\t\t\t\t\t\t\t\t<BIcon :name="Outline.OBSERVER"/>\n\t\t\t\t\t\t\t\t<UserAvatarList :users="auditors"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t\t<div class="check-list-widget-parent-item-title-status">\n\t\t\t\t\t<div class="check-list-widget-parent-item-title-status-label">\n\t\t\t\t\t\t{{ checkListStatus }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<ProgressBar\n\t\t\t\t\t\t:totalValue="totalCount"\n\t\t\t\t\t\t:completedValue="completedCount"\n\t\t\t\t\t\t:width="56"\n\t\t\t\t\t\t:height="5"\n\t\t\t\t\t\tcolor="var(--ui-color-accent-main-primary-alt)"\n\t\t\t\t\t\tbgColor="var(--ui-color-base-7)"\n\t\t\t\t\t\t:borderRadius="30"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="check-list-widget-parent-item-action">\n\t\t\t\t<div class="check-list-widget-parent-item-main-action">\n\t\t\t\t\t<BIcon ref="more" :name="Outline.MORE_L" @click="showMenu" />\n\t\t\t\t\t<BIcon\n\t\t\t\t\t\t:name="isCollapsed(item) ? Actions.CHEVRON_DOWN : Actions.CHEVRON_UP"\n\t\t\t\t\t\t@click="collapseChildrenItems(this.id)"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div v-if="isSticky && !isPreview" class="check-list-widget-parent-item-empty"></div>\n\t\t\t</div>\n\t\t\t<BMenu v-if="isMenuShown" :options="menuOptions" @close="isMenuShown = false"/>\n\t\t</div>\n\t`};const V={name:"CheckListChildItem",components:{BIcon:C.BIcon,GrowingTextArea:I.GrowingTextArea,UserAvatarList:f.UserAvatarList,UserFieldWidgetComponent:p.UserFieldWidgetComponent},mixins:[D],inject:["setItemsRef"],props:{itemOffset:{type:String,default:"0"}},emits:["toggleIsComplete","toggleGroupModeSelected"],setup(t){return{Outline:b.Outline,fileService:P.fileService.get(t.id,P.EntityTypes.CheckListItem),uploaderAdapter:P.fileService.get(t.id,P.EntityTypes.CheckListItem).getAdapter()}},data(){return{uploadingFiles:this.fileService.getFiles()}},computed:{widgetOptions(){return{isEmbedded:true,withControlPanel:false,canCreateDocuments:false,tileWidgetOptions:{compact:true,hideDropArea:true,readonly:this.isPreview}}},hasAttachments(){return this.hasUsers||this.hasFilesAttach},hasFilesAttach(){return this.hasFiles||this.isUploading||this.hasUploadingError},hasFiles(){var t;return((t=this.files)==null?void 0:t.length)>0},isUploading(){return this.uploadingFiles.some((({status:t})=>[m.FileStatus.UPLOADING,m.FileStatus.LOADING].includes(t)))},hasUploadingError(){return this.uploadingFiles.some((({status:t})=>[m.FileStatus.UPLOAD_FAILED,m.FileStatus.LOAD_FAILED].includes(t)))},hasTrashcanIcon(){return this.isHovered&&!this.item.panelIsShown&&!this.groupMode&&!this.isPreview}},created(){if(this.hasFilesAttach){void this.loadFiles()}},mounted(){if(this.setItemsRef){this.setItemsRef(this.id,this)}},beforeUnmount(){if(this.setItemsRef){this.setItemsRef(this.id,null)}},methods:{toggleIsComplete(){if(this.canToggle===false){return}this.$store.dispatch(`${A.Model.CheckList}/update`,{id:this.id,fields:{isComplete:!this.item.isComplete}});this.$emit("toggleIsComplete",this.id)},toggleGroupModeSelected(){this.$store.dispatch(`${A.Model.CheckList}/update`,{id:this.id,fields:{groupMode:{active:true,selected:!this.groupModeSelected}}});this.$emit("toggleGroupModeSelected",this.id)},focusToItem(){var t,e;(t=this.scrollContainer)!=null?t:this.scrollContainer=(e=this.$parent.$el)==null?void 0:e.closest("[data-list]");const s=200;this.scrollContainer.scrollTo({top:this.$refs.item.offsetTop-s,behavior:"smooth"})},focusToTextarea(t){const e=new Set([this.$refs.checkbox]);if(!e.has(t.target)){var s;(s=this.$refs.growingTextArea)==null?void 0:s.focusTextarea()}},async loadFiles(){var t;const e=(t=this.files)==null?void 0:t.map((t=>{var e;return(e=t==null?void 0:t.id)!=null?e:t}));await this.fileService.list(e!=null?e:[])},handleEnter(){if(!this.item){return}this.addItem(this.item.sortIndex+1)},handleClick(t){const e=this.$refs["files-widget"];if(this.isClickInsideFilesWidget(e==null?void 0:e.$el,t.target)){return}if(this.groupMode){this.toggleGroupModeSelected()}if(this.isPreview){this.toggleIsComplete()}},isClickInsideFilesWidget(t,e){if(!t||!e){return false}const s=["ui-tile-uploader-items"];const i=t.contains(e);if(!i){return false}const n=s.some((t=>e.closest(`.${t}`)!==null));return!n}},template:`\n\t\t<div\n\t\t\tref="item"\n\t\t\tclass="check-list-widget-child-item"\n\t\t\t:class="{\n\t\t\t\t'--extra-indent': hasUsers && !hasFilesAttach,\n\t\t\t\t'--complete': item.isComplete,\n\t\t\t\t'--group-mode': groupMode,\n\t\t\t\t'--group-mode-selected': groupModeSelected,\n\t\t\t\t'--preview': isPreview,\n\t\t\t}"\n\t\t\t:data-id="id"\n\t\t\t:style="{ marginLeft: itemOffset }"\n\t\t\t@mouseover="isHovered = true"\n\t\t\t@mouseleave="isHovered = false"\n\t\t\t@click="handleClick"\n\t\t>\n\t\t\t<div class="check-list-widget-child-item-base">\n\t\t\t\t<label\n\t\t\t\t\tclass="check-list-widget-child-item-checkbox"\n\t\t\t\t\t:class="{'--important': !item.isImportant}"\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\tref="checkbox"\n\t\t\t\t\t\ttype="checkbox"\n\t\t\t\t\t\t:checked="item.isComplete"\n\t\t\t\t\t\t:disabled="!canToggle || groupMode"\n\t\t\t\t\t\t@click.stop="toggleIsComplete"\n\t\t\t\t\t>\n\t\t\t\t</label>\n\t\t\t\t<div\n\t\t\t\t\tv-if="item.isImportant"\n\t\t\t\t\tclass="check-list-widget-child-item-important"\n\t\t\t\t>\n\t\t\t\t\t<BIcon :name="Outline.FIRE_SOLID" :hoverable="false"/>\n\t\t\t\t</div>\n\t\t\t\t<GrowingTextArea\n\t\t\t\t\tref="growingTextArea"\n\t\t\t\t\tclass="check-list-widget-child-item-title"\n\t\t\t\t\t:data-check-list-id="'check-list-child-item-title-' + item.id"\n\t\t\t\t\t:modelValue="item.title"\n\t\t\t\t\t:placeholder="loc('TASKS_V2_CHECK_LIST_ITEM_PLACEHOLDER')"\n\t\t\t\t\t:readonly="groupMode || isPreview"\n\t\t\t\t\t:fontColor="textColor"\n\t\t\t\t\t:fontSize="15"\n\t\t\t\t\t:lineHeight="20"\n\t\t\t\t\t@update:modelValue="updateTitle"\n\t\t\t\t\t@focus="handleFocus"\n\t\t\t\t\t@blur="handleBlur"\n\t\t\t\t\t@emptyBlur="handleEmptyBlur"\n\t\t\t\t\t@emptyFocus="focusToItem"\n\t\t\t\t\t@enterBlur="handleEnter"\n\t\t\t\t/>\n\t\t\t\t<div\n\t\t\t\t\tv-if="hasTrashcanIcon"\n\t\t\t\t\tclass="check-list-widget-child-item-action"\n\t\t\t\t\t@click="removeItem"\n\t\t\t\t>\n\t\t\t\t\t<BIcon :name="Outline.TRASHCAN"/>\n\t\t\t\t</div>\n\t\t\t\t<div v-else-if="groupMode" class="check-list-widget-child-item-action-checkbox">\n\t\t\t\t\t<input\n\t\t\t\t\t\tref="checkbox"\n\t\t\t\t\t\ttype="checkbox"\n\t\t\t\t\t\t:checked="groupModeSelected"\n\t\t\t\t\t>\n\t\t\t\t</div>\n\t\t\t\t<div v-else class="check-list-widget-child-item-action-stub"></div>\n\t\t\t</div>\n\t\t\t<template v-if="hasAttachments">\n\t\t\t\t<div class="check-list-widget-item-attach">\n\t\t\t\t\t<div v-if="hasUsers" class="check-list-widget-item-attach-users">\n\t\t\t\t\t\t<div v-if="hasAccomplices" class="check-list-widget-item-attach-users-list">\n\t\t\t\t\t\t\t<BIcon :name="Outline.GROUP"/>\n\t\t\t\t\t\t\t<UserAvatarList :users="accomplices"/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div v-if="hasAuditors" class="check-list-widget-item-attach-users-list">\n\t\t\t\t\t\t\t<BIcon :name="Outline.OBSERVER"/>\n\t\t\t\t\t\t\t<UserAvatarList :users="auditors"/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-if="hasFilesAttach" class="check-list-widget-item-attach-files">\n\t\t\t\t\t\t<div class="check-list-widget-item-attach-files-list">\n\t\t\t\t\t\t\t<UserFieldWidgetComponent\n\t\t\t\t\t\t\t\tref="files-widget"\n\t\t\t\t\t\t\t\t:uploaderAdapter="uploaderAdapter"\n\t\t\t\t\t\t\t\t:widgetOptions="widgetOptions"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t</div>\n\t`};const U={name:"CheckListAddItem",components:{BIcon:C.BIcon},props:{isPreview:{type:Boolean,default:false}},emits:["addItem"],setup(){return{Outline:b.Outline}},template:`\n\t\t<div\n\t\t\tclass="check-list-widget-add-item"\n\t\t\t:class="{'--preview': isPreview}"\n\t\t\t@click="$emit('addItem')"\n\t\t>\n\t\t\t<div class="check-list-widget-add-item-icon">\n\t\t\t\t<BIcon :name="Outline.PLUS_L"/>\n\t\t\t</div>\n\t\t\t<div class="check-list-widget-add-item-title">\n\t\t\t\t{{ loc('TASKS_V2_CHECK_LIST_ITEM_ADD_BTN') }}\n\t\t\t</div>\n\t\t</div>\n\t`};const G={name:"CheckListWidget",components:{CheckListParentItem:K,CheckListChildItem:V,CheckListAddItem:U},props:{taskId:{type:[Number,String],required:true},checkListId:{type:[Number,String],default:0},parentId:{type:[Number,String],default:0},isPreview:{type:Boolean,default:false}},emits:["beforeCreated","show","update","addItem","addItemFromBtn","removeItem","toggleIsComplete","focus","blur","emptyBlur","toggleCompleted","startGroupMode","toggleGroupModeSelected","openCheckList"],data(){return{}},computed:{task(){return this.$store.getters[`${A.Model.Tasks}/getById`](this.taskId)},checkLists(){return this.$store.getters[`${A.Model.CheckList}/getByIds`](this.task.checklist)},parentCheckLists(){return this.checkLists.filter((t=>t.parentId===0)).sort(((t,e)=>t.sortIndex-e.sortIndex))},siblings(){return this.checkLists.filter((t=>t.parentId===this.parentId)).sort(((t,e)=>t.sortIndex-e.sortIndex))}},created(){this.$emit("beforeCreated");this.checkListManager=new $({computed:{checkLists:()=>this.checkLists}})},mounted(){if(this.checkListId){var t;this.scrollContainer=(t=this.$root.$el)==null?void 0:t.querySelector(["[data-list]"]);const e=this.scrollContainer.querySelector([`[data-parent="${this.checkListId}"]`]);setTimeout((()=>{this.scrollContainer.scrollTop=e.offsetTop}),0)}this.$emit("show")},methods:{getItemOffset(t){if(t.parentId===0){return"0"}const e=this.checkListManager.getItemLevel(t);if(e===1){return"0"}return`${(e-1)*12}px`},isFirstVisibleItem(t){if(this.isPreview===true){return false}const e=this.siblings;const s=e.findIndex((t=>!t.hidden));return s!==-1&&s===t},getChildren(t){if(this.isCollapsed(t)){return[]}return this.checkListManager.getAllChildren(t.id)},isCollapsed(t){return t.collapsed===true||this.isPreview&&t.previewCollapsed===true}},template:`\n\t\t<div class="check-list-widget-container">\n\t\t\t<ul class="check-list-widget --parent" :class="{'--preview': isPreview}">\n\t\t\t\t<template v-for="(parentItem, parentItemIndex) in parentCheckLists" :key="parentItem.id">\n\t\t\t\t\t<li\n\t\t\t\t\t\tclass="check-list-widget-item --parent"\n\t\t\t\t\t\t:class="{\n\t\t\t\t\t\t\t'--first-visible': parentId === 0 && isFirstVisibleItem(parentItemIndex),\n\t\t\t\t\t\t\t'--hidden': parentItem.hidden,\n\t\t\t\t\t\t\t'--collapsed': isCollapsed(parentItem),\n\t\t\t\t\t\t\t'--preview': isPreview,\n\t\t\t\t\t\t}"\n\t\t\t\t\t>\n\t\t\t\t\t\t<CheckListParentItem\n\t\t\t\t\t\t\t:id="parentItem.id"\n\t\t\t\t\t\t\t:taskId="taskId"\n\t\t\t\t\t\t\t:isPreview="isPreview"\n\t\t\t\t\t\t\t@update="$emit('update')"\n\t\t\t\t\t\t\t@removeItem="(id) => $emit('removeItem', id)"\n\t\t\t\t\t\t\t@focus="(id) => $emit('focus', id)"\n\t\t\t\t\t\t\t@blur="(id) => $emit('blur', id)"\n\t\t\t\t\t\t\t@emptyBlur="(id) => $emit('emptyBlur', id)"\n\t\t\t\t\t\t\t@toggleCompleted="(data) => $emit('toggleCompleted', data)"\n\t\t\t\t\t\t\t@startGroupMode="(id) => $emit('startGroupMode', id)"\n\t\t\t\t\t\t\t@openCheckList="(id) => $emit('openCheckList', id)"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TransitionGroup name="list" tag="ul" class="check-list-widget">\n\t\t\t\t\t\t\t<template\n\t\t\t\t\t\t\t\tv-for="childItem in getChildren(parentItem)"\n\t\t\t\t\t\t\t\t:key="childItem.id\n\t\t\t\t\t\t\t">\n\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\tclass="check-list-widget-item"\n\t\t\t\t\t\t\t\t\t:class="{\n\t\t\t\t\t\t\t\t\t\t'--hidden': childItem.hidden,\n\t\t\t\t\t\t\t\t\t}"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CheckListChildItem\n\t\t\t\t\t\t\t\t\t\t:id="childItem.id"\n\t\t\t\t\t\t\t\t\t\t:taskId="taskId"\n\t\t\t\t\t\t\t\t\t\t:itemOffset="getItemOffset(childItem)"\n\t\t\t\t\t\t\t\t\t\t:isPreview="isPreview"\n\t\t\t\t\t\t\t\t\t\t@update="$emit('update')"\n\t\t\t\t\t\t\t\t\t\t@toggleIsComplete="(id) => $emit('toggleIsComplete', id)"\n\t\t\t\t\t\t\t\t\t\t@addItem="(data) => $emit('addItem', data)"\n\t\t\t\t\t\t\t\t\t\t@removeItem="(id) => $emit('removeItem', id)"\n\t\t\t\t\t\t\t\t\t\t@focus="(id) => $emit('focus', id)"\n\t\t\t\t\t\t\t\t\t\t@blur="(id) => $emit('blur', id)"\n\t\t\t\t\t\t\t\t\t\t@emptyBlur="(id) => $emit('emptyBlur', id)"\n\t\t\t\t\t\t\t\t\t\t@toggleGroupModeSelected="(id) => $emit('toggleGroupModeSelected', id)"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t</TransitionGroup>\n\t\t\t\t\t\t<Transition name="addBtn" tag="div" class="check-list-widget-add-container">\n\t\t\t\t\t\t\t<CheckListAddItem\n\t\t\t\t\t\t\t\tv-if="!isCollapsed(parentItem)"\n\t\t\t\t\t\t\t\t:isPreview="isPreview"\n\t\t\t\t\t\t\t\t@addItem="$emit('addItemFromBtn', parentItem.id)"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Transition>\n\t\t\t\t\t</li>\n\t\t\t\t</template>\n\t\t\t</ul>\n\t\t</div>\n\t`};const z=Object.freeze({Important:"important",Attachments:"attachments",Movement:"movement",Accomplice:"accomplice",Auditor:"auditor",Forward:"forward",Delete:"delete",Cancel:"cancel"});const X=Object.freeze({SetImportant:"setImportant",AttachFile:"attachFile",MoveRight:"moveRight",MoveLeft:"moveLeft",AssignAccomplice:"assignAccomplice",AssignAuditor:"assignAuditor",Forward:"forward",Delete:"delete",Cancel:"cancel"});const W=Object.freeze({defaultSections:[{name:z.Important,items:[{icon:b.Outline.FIRE,activeIcon:b.Outline.FIRE_SOLID,action:X.SetImportant,hint:"TASKS_V2_CHECK_LIST_ITEM_IMPORTANT_HINT",className:"--important",hoverable:false}]},{name:z.Attachments,items:[{icon:b.Outline.ATTACH,action:X.AttachFile,hint:"TASKS_V2_CHECK_LIST_ITEM_ATTACH_HINT"}]},{name:z.Movement,items:[{icon:b.Outline.POINT_RIGHT,action:X.MoveRight,hint:"TASKS_V2_CHECK_LIST_ITEM_MOVE_RIGHT_HINT"},{icon:b.Outline.POINT_LEFT,action:X.MoveLeft,hint:"TASKS_V2_CHECK_LIST_ITEM_MOVE_LEFT_HINT"}]},{name:z.Accomplice,items:[{icon:b.Outline.PERSON,action:X.AssignAccomplice,hint:"TASKS_V2_CHECK_LIST_ITEM_ACCOMPLICE_HINT"}]},{name:z.Auditor,items:[{icon:b.Outline.OBSERVER,action:X.AssignAuditor,hint:"TASKS_V2_CHECK_LIST_ITEM_AUDITOR_HINT"}]},{name:z.Forward,items:[{icon:b.Outline.FORWARD,action:X.Forward,hint:"TASKS_V2_CHECK_LIST_ITEM_FORWARD_HINT"}]},{name:z.Delete,items:[{icon:b.Outline.TRASHCAN,action:X.Delete,hint:"TASKS_V2_CHECK_LIST_ITEM_REMOVE_HINT"}]},{name:z.Cancel,items:[{icon:b.Outline.CROSS_L,action:X.Cancel,hint:"TASKS_V2_CHECK_LIST_ITEM_CANCEL_HINT"}]}]});const j={name:"CheckListItemPanel",components:{BIcon:C.BIcon},directives:{hint:v.hint},props:{visibleSections:{type:Array,default:()=>W.defaultSections.map((t=>t.name))},visibleActions:{type:Array,default:()=>[]},disabledActions:{type:Array,default:()=>[]},activeActions:{type:Array,default:()=>[]}},emits:["action"],data(){return{currentHintElement:null,currentHintText:""}},computed:{sections(){return W.defaultSections.filter((t=>this.visibleSections.includes(t.name))).map((t=>({...t,items:t.items.filter((t=>this.visibleActions.includes(t.action))).map((t=>{var e;return{...t,disabled:this.isItemDisabled(t),active:this.isItemActive(t),hoverable:(e=t.hoverable)!=null?e:true}}))}))).filter((t=>t.items.length>0))},tooltip(){return()=>{var t,e;return{text:this.currentHintText,timeout:500,popupOptions:{className:"tasks-hint",background:"var(--ui-color-bg-content-inapp)",darkMode:false,offsetLeft:-((t=(e=this.currentHintElement)==null?void 0:e.offsetWidth)!=null?t:0),padding:6,bindOptions:{forceBindPosition:true,forceTop:true,position:"top"},targetContainer:document.body}}}}},methods:{isItemDisabled(t){var e;return(e=t.disabled)!=null?e:this.disabledActions.includes(t.action)},isItemActive(t){var e;return(e=t.active)!=null?e:this.activeActions.includes(t.action)},getItemIcon(t){return t.active&&t.activeIcon?t.activeIcon:t.icon},handleItemClick(t,e){if(!e.disabled){this.$emit("action",{action:e.action,node:t.currentTarget})}},handleItemMouseEnter(t,e){this.currentHintElement=t.currentTarget;this.currentHintText=e.hint?this.loc(e.hint):null}},template:`\n\t\t<div v-if="sections.length > 0" class="check-list-widget-item-panel" @mousedown.prevent>\n\t\t\t<template v-for="section in sections" :key="section.name">\n\t\t\t\t<div class="check-list-widget-item-panel-section" :class="'--' + section.name">\n\t\t\t\t\t<template v-for="item in section.items" :key="item.action" >\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tv-hint="tooltip"\n\t\t\t\t\t\t\tclass="check-list-widget-item-panel-section-item"\n\t\t\t\t\t\t\t:class="{\n\t\t\t\t\t\t\t\t'--disabled': item.disabled,\n\t\t\t\t\t\t\t\t'--active': item.active,\n\t\t\t\t\t\t\t\t[item.className]: Boolean(item.className),\n\t\t\t\t\t\t\t}"\n\t\t\t\t\t\t\t@click="handleItemClick($event, item)"\n\t\t\t\t\t\t\t@mouseenter="handleItemMouseEnter($event, item)"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<BIcon :name="getItemIcon(item)" :hoverable="item.hoverable"/>\n\t\t\t\t\t\t\t<span v-if="item.label">{{ loc(item.label) }}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</template>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t</div>\n\t`};var q=babelHelpers.classPrivateFieldLooseKey("interval");var Y=babelHelpers.classPrivateFieldLooseKey("timerValue");var J=babelHelpers.classPrivateFieldLooseKey("counter");var Q=babelHelpers.classPrivateFieldLooseKey("content");var Z=babelHelpers.classPrivateFieldLooseKey("balloonWithTimer");var tt=babelHelpers.classPrivateFieldLooseKey("startTimer");var et=babelHelpers.classPrivateFieldLooseKey("handleCancelClick");var st=babelHelpers.classPrivateFieldLooseKey("handleClosingBalloon");var it=babelHelpers.classPrivateFieldLooseKey("getBalloonContent");class nt extends g.EventEmitter{constructor(t){super();Object.defineProperty(this,it,{value:rt});Object.defineProperty(this,st,{value:at});Object.defineProperty(this,et,{value:lt});Object.defineProperty(this,tt,{value:ot});Object.defineProperty(this,q,{writable:true,value:null});Object.defineProperty(this,Y,{writable:true,value:5});Object.defineProperty(this,J,{writable:true,value:5});Object.defineProperty(this,Q,{writable:true,value:""});Object.defineProperty(this,Z,{writable:true,value:void 0});this.setEventNamespace("Tasks.V2.CheckList.CheckListNotifier");babelHelpers.classPrivateFieldLooseBase(this,Q)[Q]=t.content;babelHelpers.classPrivateFieldLooseBase(this,Y)[Y]=S.Type.isUndefined(t.timerValue)?babelHelpers.classPrivateFieldLooseBase(this,Y)[Y]:t.timerValue}showBalloonWithTimer(){babelHelpers.classPrivateFieldLooseBase(this,J)[J]=babelHelpers.classPrivateFieldLooseBase(this,Y)[Y];babelHelpers.classPrivateFieldLooseBase(this,Z)[Z]=L.UI.Notification.Center.notify({id:`check-list-balloon-${S.Text.getRandom()}`,content:babelHelpers.classPrivateFieldLooseBase(this,it)[it](),actions:[{title:S.Loc.getMessage("TASKS_V2_CHECK_LIST_BALLOON_CANCEL"),events:{mouseup:babelHelpers.classPrivateFieldLooseBase(this,et)[et].bind(this)}}],events:{onClose:babelHelpers.classPrivateFieldLooseBase(this,st)[st].bind(this)}});babelHelpers.classPrivateFieldLooseBase(this,tt)[tt]()}}function ot(){babelHelpers.classPrivateFieldLooseBase(this,q)[q]=setInterval((()=>{babelHelpers.classPrivateFieldLooseBase(this,J)[J]--;babelHelpers.classPrivateFieldLooseBase(this,Z)[Z].update({content:babelHelpers.classPrivateFieldLooseBase(this,it)[it]()});if(babelHelpers.classPrivateFieldLooseBase(this,J)[J]<=0){babelHelpers.classPrivateFieldLooseBase(this,Z)[Z].close();this.emit("complete",true)}}),1e3)}function lt(){babelHelpers.classPrivateFieldLooseBase(this,Z)[Z].close()}function at(){clearInterval(babelHelpers.classPrivateFieldLooseBase(this,q)[q]);this.emit("complete",false)}function rt(){return babelHelpers.classPrivateFieldLooseBase(this,Q)[Q].replace("#countdown#",babelHelpers.classPrivateFieldLooseBase(this,J)[J])}const ct={name:"TaskCheckList",components:{CheckListWidget:G,CheckListItemPanel:j,CheckListStub:E,UiButton:l.Button,BIcon:C.BIcon,BMenu:h.BMenu},provide(){return{setItemsRef:this.setItemsRef,getItemsRef:this.getItemsRef}},props:{taskId:{type:[Number,String],required:true},isAutonomous:{type:Boolean,default:false},isPreview:{type:Boolean,default:false},isComponentShown:{type:Boolean,default:true},checkListId:{type:[Number,String],default:0},isShown:{type:Boolean,default:false}},emits:["show","close","resize","open"],setup(){return{resizeObserver:null,AirButtonStyle:l.AirButtonStyle,ButtonSize:l.ButtonSize,ButtonIcon:l.ButtonIcon,Outline:b.Outline}},data(){return{checkListManager:null,itemPanelIsShown:false,checkListWasUpdated:false,itemId:null,itemPanelStyles:{top:"0",display:"flex"},isItemPanelFreeze:false,itemPanelTopOffset:this.isAutonomous?5:2,itemPanelTopLimit:this.isAutonomous?450:700,itemsRefs:{},isForwardMenuShown:false,forwardMenuSectionCode:"createSection",forwardBindElement:null,itemsToDelete:[],collapsedItems:new Map,shownPopups:new Set}},computed:{componentName(){if(this.isAutonomous){return B}else if(this.isPreview){return N}return _},componentShown(){if(this.isPreview){return this.isComponentShown}return true},isEdit(){return S.Type.isNumber(this.taskId)&&this.taskId>0},task(){return this.$store.getters[`${A.Model.Tasks}/getById`](this.taskId)},checkLists(){return this.$store.getters[`${A.Model.CheckList}/getByIds`](this.task.checklist)},parentCheckLists(){return this.checkLists.filter((t=>t.parentId===0))},hasFewParentCheckLists(){return this.parentCheckLists.length>1},item(){return this.$store.getters[`${A.Model.CheckList}/getById`](this.itemId)},itemGroupModeSelected(){var t;if(!this.item){return false}return((t=this.item.groupMode)==null?void 0:t.selected)===true},visiblePanelActions(){if(!this.item){return[]}let t=[X.SetImportant,X.MoveRight,X.MoveLeft,X.AssignAccomplice,X.AssignAuditor,X.Forward,X.Delete];if(this.itemGroupModeSelected){t.push(X.Cancel)}else{t.push(X.AttachFile)}if(this.item.parentId===0){t=[X.AssignAccomplice,X.AssignAuditor]}const e=n.Core.getParams().limits;const s=new Set([X.AssignAccomplice,X.AssignAuditor]);return t.filter((t=>{const i=s.has(t)&&!e.stakeholders;return!i}))},disabledPanelActions(){if(!this.item){return[]}const t=[];const e=this.checkListManager.getItemLevel(this.item);const s=this.item.actions.modify===true;const i=this.item.actions.remove===true;const n={[X.SetImportant]:()=>s===false,[X.AttachFile]:()=>s===false,[X.MoveLeft]:()=>e===1||s===false,[X.MoveRight]:()=>e===5||this.item.sortIndex===0||s===false,[X.AssignAccomplice]:()=>s===false,[X.AssignAuditor]:()=>s===false,[X.Forward]:()=>s===false||this.item.title==="",[X.Delete]:()=>i===false||this.item.title===""};Object.entries(n).forEach((([e,s])=>{if(s()){t.push(e)}}));return t},activePanelActions(){if(!this.item){return[]}const t=[];if(this.item.isImportant){t.push(X.SetImportant)}return t},forwardMenuOptions(){return{id:`check-list-item-forward-menu-${this.item.id}`,bindElement:this.forwardBindElement,maxWidth:400,maxHeight:300,offsetLeft:-110,sections:[{code:this.forwardMenuSectionCode}],items:this.forwardMenuItems,targetContainer:document.body}},forwardMenuItems(){const t=this.parentCheckLists.filter((t=>t.id!==this.item.parentId)).map((t=>({title:t.title,dataset:{id:`ForwardMenuCheckList-${t.id}`},onClick:()=>{this.hideItemPanel();if(this.itemGroupModeSelected){void this.forwardGroupItemsToChecklist(t.id)}else{this.forwardToChecklist(t.id)}}})));return[...t,{sectionCode:this.forwardMenuSectionCode,title:this.loc("TASKS_V2_CHECK_LIST_ITEM_FORWARD_MENU_CREATE"),dataset:{id:`ForwardMenuCreateNew-${this.item.id}`},onClick:this.forwardToNewChecklist.bind(this)}]},stub(){return this.checkLists.length===0||this.emptyList===true},emptyList(){const t=this.parentCheckLists.filter((t=>!this.itemsToDelete.includes(t.id)));return t.length===0},contextClass(){if(this.isPreview){return"--preview"}return this.isAutonomous?"--popup":"--sheet"}},watch:{async titleFieldOffsetHeight(){if(!this.$refs.popupComponent){return}await this.$nextTick();this.resize()},parentCheckLists(){if(this.isPreview){this.unCollapseFirstParent()}},componentShown(t){if(!this.isPreview){return}if(t){this.subscribeToEvents()}else{this.unsubscribeFromEvents()}}},created(){this.checkListManager=new $({computed:{checkLists:()=>this.checkLists}})},mounted(){if(this.isAutonomous||this.isPreview){this.subscribeToEvents()}},beforeUnmount(){if(this.isAutonomous||this.isPreview){this.unsubscribeFromEvents()}},methods:{subscribeToEvents(){S.Event.bind(this.$refs.list,"scroll",this.handleScroll);g.EventEmitter.subscribe("BX.Main.Popup:onInit",this.handleInitPopup);g.EventEmitter.subscribe("BX.Main.Popup:onShow",this.handleShowPopup);g.EventEmitter.subscribe("BX.Main.Popup:onClose",this.handleClosePopup)},unsubscribeFromEvents(){S.Event.unbind(this.$refs.list,"scroll",this.handleScroll);g.EventEmitter.unsubscribe("BX.Main.Popup:onInit",this.handleInitPopup);g.EventEmitter.unsubscribe("BX.Main.Popup:onShow",this.handleShowPopup);g.EventEmitter.unsubscribe("BX.Main.Popup:onClose",this.handleClosePopup)},handleBeforeCreated(){if(this.isPreview){this.unCollapseFirstParent()}},handleUpdate(){this.checkListWasUpdated=true},handleRemove(t){this.itemId=t;this.freeze();this.itemsToDelete=[...this.itemsToDelete,t];this.hideItem(t);const e=this.item.parentId===0?"TASKS_V2_CHECK_LIST_ITEM_REMOVE_BALLOON_PARENT":"TASKS_V2_CHECK_LIST_ITEM_REMOVE_BALLOON_CHILD";const s=new nt({content:this.loc(e)});s.subscribeOnce("complete",(e=>{const s=e.getData();if(s){this.removeItem(t)}else{this.showItem(t)}this.itemsToDelete=this.itemsToDelete.filter((e=>e!==t));this.unfreeze()}));s.showBalloonWithTimer()},handleScroll(){this.isForwardMenuShown=false;this.updatePanelPosition()},handleShow(t){this.$emit("show",t)},async handleClose(){this.cancelGroupMode();this.$emit("close");await this.saveCheckList()},handleIsShown(t){if(t){this.subscribeToEvents()}else{this.unsubscribeFromEvents()}},handleInitPopup(t){const e=t.getCompatData();const s=e[1];const i=e[2];if(S.Type.isDomNode(s)){var n;if((n=this.$refs.list)!=null&&n.contains(s)){i.targetContainer=this.$refs.list}else{i.targetContainer=document.body}}},handleShowPopup(t){const[e]=t.getCompatData();this.shownPopups.add(e.getId());this.freeze()},handleClosePopup(t){const[e]=t.getCompatData();this.shownPopups.delete(e.getId());this.unfreeze()},async handleGroupRemove(t){this.itemId=t;this.freeze();this.itemsToDelete=[...this.itemsToDelete,t];this.hideItemPanel(t);const e=this.checkListManager.getAllSelectedItems();const s=this.checkListManager.findNearestItem(this.item,false);if(s){await this.updateCheckList(s.id,{groupMode:{active:true,selected:true}});setTimeout((()=>{this.showItemPanel(s.id)}),0)}e.forEach((t=>{this.hideItem(t.id)}));const i=e.length>1?"TASKS_V2_CHECK_LIST_ITEM_REMOVE_BALLOON_CHILDREN":"TASKS_V2_CHECK_LIST_ITEM_REMOVE_BALLOON_CHILD";const n=new nt({content:this.loc(i)});n.subscribeOnce("complete",(t=>{const i=t.getData();e.forEach((t=>{if(i){this.removeItem(t.id)}else{this.showItem(t.id)}this.itemsToDelete=this.itemsToDelete.filter((e=>e!==t.id))}));if(i){if(s&&!this.itemsToDelete.includes(s.id)){this.showItemPanel(s.id)}else{this.cancelGroupMode()}}else{this.showItemPanel(this.item.id)}this.unfreeze()}));n.showBalloonWithTimer()},handleToggleIsComplete(t){this.syncParentCompletionState(t)},handleFocus(t){this.showItemPanel(t)},handleBlur(t){this.itemId=t;if(this.isItemPanelFreeze===false){this.hideItemPanel(t)}},handleEmptyBlur(t){this.itemId=t;if(this.item.parentId===0){this.setDefaultCheckListTitle(t);return}if(this.isItemPanelFreeze===false){this.removeItem(t)}},handleGroupMode(t){this.itemId=t;const e=this.checkListManager.getFirstChild(t);if(!e){return}this.activateGroupMode(t);this.showItemPanel(e.id)},handleGroupModeSelect(t){this.itemId=t;if(this.itemGroupModeSelected){this.showItemPanel(t)}else{this.showItemPanelOnNearestSelectedItem(t)}},handlePanelAction({action:t,node:e}){var s;const i={[X.SetImportant]:t=>this.setImportant(t),[X.AttachFile]:t=>this.attachFile(t),[X.MoveRight]:t=>this.moveGroupToRight(t),[X.MoveLeft]:t=>this.moveGroupToLeft(t),[X.AssignAccomplice]:t=>{if(!this.isItemPanelFreeze){this.showParticipantDialog(t,"accomplices")}},[X.AssignAuditor]:t=>{if(!this.isItemPanelFreeze){this.showParticipantDialog(t,"auditors")}},[X.Forward]:t=>this.forward(t),[X.Delete]:t=>this.delete(t),[X.Cancel]:t=>this.cancelGroupMode(t)};(s=i[t])==null?void 0:s.call(i,e)},handleOpenCheckList(t){void this.updateCheckList(t,{collapsed:false,previewCollapsed:false});this.$emit("open",t)},updateCheckList(t,e){return this.$store.dispatch(`${A.Model.CheckList}/update`,{id:t,fields:e})},updateTask(t){return this.$store.dispatch(`${A.Model.Tasks}/update`,{id:this.taskId,fields:t})},upsertCheckLists(t){return this.$store.dispatch(`${A.Model.CheckList}/upsertMany`,t)},insertCheckList(t){return this.$store.dispatch(`${A.Model.CheckList}/insert`,t)},insertManyCheckLists(t){return this.$store.dispatch(`${A.Model.CheckList}/insertMany`,t)},deleteCheckList(t){return this.$store.dispatch(`${A.Model.CheckList}/delete`,t)},async saveCheckList(){if(this.checkListWasUpdated&&this.isEdit){await d.checkListService.save(this.taskId,this.checkLists)}if(!this.isDemoCheckListModified()){this.removeChecklists()}this.checkListWasUpdated=false},isDemoCheckListModified(){if(this.checkLists.length!==1){return true}const[t]=this.checkLists;const e=this.loc("TASKS_V2_CHECK_LIST_TITLE_NUMBER",{"#number#":1});return t.title!==e||t.accomplices.length>0||t.auditors.length>0},removeChecklists(){this.checkLists.filter((t=>t.parentId===0)).forEach((t=>{this.removeItem(t.id)}))},async addCheckList(t=false){const e=S.Text.getRandom();const s=S.Text.getRandom();const i=[this.getDataForNewCheckList(e)];if(!t){i.push({id:s,nodeId:s,parentId:e,sortIndex:0})}await this.insertManyCheckLists(i);void this.updateTask({checklist:[...this.task.checklist,e,s]});return e},async addFastCheckList(){const t=await this.addCheckList();this.handleOpenCheckList(t)},showForwardMenu(t){this.forwardBindElement=t;this.isForwardMenuShown=true},getCheckListsNumber(){return this.checkLists.filter((t=>t.parentId===0&&!this.itemsToDelete.includes(t.id))).length},getDataForNewCheckList(t){return{id:t,nodeId:t,title:this.loc("TASKS_V2_CHECK_LIST_TITLE_NUMBER",{"#number#":this.getCountForNewCheckList()}),sortIndex:this.getSortForNewCheckList()}},getSortForNewCheckList(){return this.getCheckListsNumber()},getCountForNewCheckList(){return this.getCheckListsNumber()+1},setItemsRef(t,e){this.itemsRefs[t]=e},getItemsRef(t){return this.itemsRefs[t]},focusToItem(t){void this.$nextTick((()=>{var e,s;(e=this.getItemsRef(t))==null?void 0:(s=e.$refs.growingTextArea)==null?void 0:s.focusTextarea()}))},showItem(t){void this.updateCheckList(t,{hidden:false});const e=this.checkListManager.getChildren(t);if(e.length>0){e.forEach((t=>{this.showItem(t.id)}))}},hideItem(t){void this.updateCheckList(t,{hidden:true});const e=this.checkListManager.getChildren(t);if(e.length>0){e.forEach((t=>{this.hideItem(t.id)}))}},addItem({id:t,sort:e}){if(this.hasActiveGroupMode()){return}this.itemId=t;const s=S.Text.getRandom();const i=this.item.parentId;this.resortItemsAfterIndex(i,e);void this.insertCheckList({id:s,nodeId:s,parentId:i,sortIndex:e});void this.updateTask({checklist:[...this.task.checklist,s]});this.syncParentCompletionState(s)},addItemFromBtn(t){if(this.isPreview){this.handleOpenCheckList(t);return}if(this.hasActiveGroupMode()){return}const e=S.Text.getRandom();const s=this.checkListManager.getChildren(t).length;void this.insertCheckList({id:e,nodeId:e,parentId:t,sortIndex:s});void this.updateTask({checklist:[...this.task.checklist,e]});this.syncParentCompletionState(e)},removeItem(t,e=true){var s,i;if(!this.task){return}this.itemId=t;if((s=this.item)!=null&&s.title){this.checkListWasUpdated=true}const n=((i=this.item)==null?void 0:i.parentId)||null;const o=this.checkListManager.getChildren(t);if(o.length>0){o.forEach((t=>{this.removeItem(t.id,false)}))}void this.updateTask({checklist:this.task.checklist.filter((e=>e!==t))});void this.deleteCheckList(t);if(e){this.resortItemsOnLevel(n)}this.syncParentCompletionState(t,n);P.fileService.delete(t,P.EntityTypes.CheckListItem)},resortItemsAfterIndex(t,e){this.checkListManager.resortItemsAfterIndex(t,e,(t=>{void this.upsertCheckLists(t)}))},resortItemsOnLevel(t){this.checkListManager.resortItemsOnLevel(t,(t=>this.upsertCheckLists(t)))},syncParentCompletionState(t,e){this.checkListManager.syncParentCompletionState(t,((t,e)=>this.updateCheckList(t,e)),e)},toggleCompleted({itemId:t,collapsed:e}){this.itemId=t;this.checkListManager.getAllCompletedChildrenChildren(t).forEach((t=>{if(e===false){this.showItem(t.id)}else{this.hideItem(t.id)}}))},showItemPanel(t){if(this.isPreview){return}this.itemId=t;this.itemPanelIsShown=true;void this.updateCheckList(t,{panelIsShown:true});void this.$nextTick((()=>this.updatePanelPosition()))},hideItemPanel(t){if(this.isPreview){return}this.itemPanelIsShown=false;if(this.hasActiveGroupMode()&&this.checkListManager.getAllSelectedItems().length===0){this.deactivateGroupMode()}const e=this.checkListManager.getItem(t);if(e){void this.updateCheckList(t,{panelIsShown:false})}this.isItemPanelFreeze=false},showItemPanelOnNearestSelectedItem(t){const e=this.checkListManager.findNearestItem(this.item,true);if(e){this.showItemPanel(e.id)}else{this.hideItemPanel(t)}},updatePanelPosition(){if(this.itemPanelIsShown===false){return}const t=this.$refs.list.querySelector([`[data-id="${this.item.id}"]`]);const e=S.Dom.getPosition(this.$refs.panel.$el);const s=S.Dom.getPosition(this.$refs.list);const i=S.Dom.getRelativePosition(t,this.$refs.list);const n=this.item.parentId===0;const o=18;const l=e.width===0?304:e.width;const a=i.top-14;if(n){const t=s.width-l-o*2-80;const e=a>-30&&a<this.itemPanelTopLimit?"flex":"none";this.itemPanelStyles={top:`${a}px`,left:`${t}px`,display:e}}else{const t=s.width-l-o;const e=a>40&&a<this.itemPanelTopLimit?"flex":"none";this.itemPanelStyles={top:`${a}px`,left:`${t}px`,display:e}}},setImportant(){if(this.itemGroupModeSelected){const t=this.checkListManager.getAllSelectedItems().map((t=>({...t,isImportant:!t.isImportant})));void this.upsertCheckLists(t)}else{void this.updateCheckList(this.item.id,{isImportant:!this.item.isImportant})}this.checkListWasUpdated=true},attachFile(t){this.isItemPanelFreeze=true;P.fileService.get(this.item.id,P.EntityTypes.CheckListItem).browse({bindElement:t});P.fileService.get(this.item.id,P.EntityTypes.CheckListItem).subscribeOnce("onFileComplete",(()=>{this.isItemPanelFreeze=false;this.focusToItem(this.item.id);this.checkListWasUpdated=true}))},moveGroupToRight(){if(this.itemGroupModeSelected){this.checkListManager.getAllSelectedItems().sort(((t,e)=>t.sortIndex-e.sortIndex)).forEach((t=>{this.moveRight(t)}))}else{this.moveRight(this.item)}},moveRight(t){this.checkListManager.moveRight(t,(e=>{var s;void this.upsertCheckLists(e);this.checkListWasUpdated=true;if(!((s=t.groupMode)!=null&&s.active)){this.focusToItem(t.id)}}))},moveGroupToLeft(){if(this.itemGroupModeSelected){this.checkListManager.getAllSelectedItems().sort(((t,e)=>e.sortIndex-t.sortIndex)).forEach((t=>{this.moveLeft(t)}))}else{this.moveLeft(this.item)}},moveLeft(t){this.checkListManager.moveLeft(t,(e=>{var s;void this.upsertCheckLists(e);this.checkListWasUpdated=true;if(!((s=t.groupMode)!=null&&s.active)){this.focusToItem(t.id)}}))},async forward(t){if(this.hasFewParentCheckLists){this.showForwardMenu(t)}else{this.hideItemPanel();void this.forwardToNewChecklist()}this.checkListWasUpdated=true},async forwardToNewChecklist(){const t=await this.addCheckList(true);if(this.itemGroupModeSelected){void this.forwardGroupItemsToChecklist(t)}else{this.forwardToChecklist(t)}},forwardToChecklist(t){const e=this.checkListManager.getChildren(t).length;void this.updateCheckList(this.item.id,{parentId:t,sortIndex:e});this.resortItemsOnLevel(t);this.resortItemsOnLevel(this.item.parentId)},async forwardGroupItemsToChecklist(t){const e=this.checkListManager.getChildren(t).length;const s=new Set;const i=this.checkListManager.getAllSelectedItems();const n=this.checkListManager.findNearestItem(this.item,false,i);if(n){this.showItemPanel(n.id)}else{this.cancelGroupMode()}const o=this.checkListManager.getAllSelectedItemsWithChildren();const l=new Set(i.map((t=>t.id)));const a=[];i.forEach((i=>{const n=!l.has(i.parentId);s.add(i.parentId);a.push({...i,parentId:n?t:i.parentId,groupMode:{active:false,selected:false},sortIndex:n?e:i.sortIndex})}));o.forEach((t=>{if(!l.has(t.id)){a.push({...t,groupMode:{active:false,selected:false}})}}));await this.upsertCheckLists(a);if(n){void this.updateCheckList(n.id,{groupMode:{active:true,selected:true}})}this.resortItemsOnLevel(t);s.forEach((t=>{this.resortItemsOnLevel(t)}))},delete(){if(this.itemGroupModeSelected){void this.handleGroupRemove(this.item.id)}else{this.hideItemPanel();this.handleRemove(this.item.id)}},cancelGroupMode(){this.deactivateGroupMode();this.hideItemPanel()},showParticipantDialog(t,s){var n;this.isItemPanelFreeze=true;const l=this.item[s].map((t=>["user",t.id]));(n=this.selector)!=null?n:this.selector=new o.EntitySelectorDialog({...i.participantMeta.dialogOptions(this.taskId,"check-list"),preselectedItems:l,popupOptions:{events:{onShow:t=>{const s=t.getTarget();const i=s.getPopupContainer().offsetWidth;const n=10;const o=n-i/2;const l=e.Popup.getOption("angleLeftOffset")-e.Popup.getOption("angleMinTop");s.setAngle({offset:i/2-l});s.setOffset({offsetLeft:o+e.Popup.getOption("angleLeftOffset")})},onClose:()=>{const t=this.selector.getSelectedItems().map((t=>({id:t.getId(),name:t.getTitle(),image:t.getAvatar(),type:t.getEntityType()})));this.saveParticipants(this.selector.params.itemId,this.selector.params.type,t)}}},events:{onHide:()=>{this.isItemPanelFreeze=false;if(!this.itemGroupModeSelected&&this.item.id===this.selector.params.itemId){this.focusToItem(this.selector.params.itemId)}this.updatePanelPosition()}}});this.selector.selectItemsByIds(l);this.selector.params={itemId:this.item.id,type:s};this.selector.showTo(t)},saveParticipants(t,e,s){if(this.itemGroupModeSelected){const t=this.checkListManager.getAllSelectedItems().map((t=>({...t,[e]:s})));void this.upsertCheckLists(t)}else{void this.updateCheckList(t,{[e]:s})}const i=s.map((t=>t.id));const n={[`${e}Ids`]:i};void this.updateTask(n)},activateGroupMode(t){this.itemId=t;const e=this.checkListManager.getAllChildren(t).map(((t,e)=>({...t,groupMode:{active:true,selected:e===0}})));e.push({...this.item,groupMode:{active:true,selected:false}});void this.upsertCheckLists(e)},deactivateGroupMode(){const t=this.checkListManager.getAllGroupModeItems().map((t=>({...t,groupMode:{active:false,selected:false}})));void this.upsertCheckLists(t)},hasActiveGroupMode(){return this.checkListManager.getAllGroupModeItems().length>0},freeze(){var t,e,s;(t=this.$refs.childComponent)==null?void 0:(e=t.$refs)==null?void 0:(s=e.childComponent)==null?void 0:s.freeze()},unfreeze(){if(this.shownPopups.size===0&&this.itemsToDelete.length===0){var t,e,s;(t=this.$refs.childComponent)==null?void 0:(e=t.$refs)==null?void 0:(s=e.childComponent)==null?void 0:s.unfreeze()}},setDefaultCheckListTitle(t){void this.updateCheckList(t,{title:this.loc("TASKS_V2_CHECK_LIST_TITLE_NUMBER",{"#number#":this.getCheckListsNumber()})})},unCollapseFirstParent(){const t=this.parentCheckLists[0];if(t.previewCollapsed===true){void this.updateCheckList(t.id,{previewCollapsed:false})}}},template:`\n\t\t<component\n\t\t\tv-if="componentShown"\n\t\t\tref="childComponent"\n\t\t\t:is="componentName"\n\t\t\t:taskId="taskId"\n\t\t\t:isShown="isShown"\n\t\t\t@show="handleShow"\n\t\t\t@close="handleClose"\n\t\t\t@isShown="handleIsShown"\n\t\t\t@addFastCheckList="addFastCheckList"\n\t\t\t@resize="$emit('resize')"\n\t\t>\n\t\t\t<template v-slot:default="{ handleShow, handleClose }">\n\t\t\t\t<div ref="wrapper" class="tasks-check-list-wrapper" :class="contextClass">\n\t\t\t\t\t<div v-if="!isPreview" class="tasks-check-list-close-icon" :class="contextClass">\n\t\t\t\t\t\t<BIcon :name="Outline.CROSS_L" @click="handleClose"/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div ref="list" data-list class="tasks-check-list-content" :class="contextClass">\n\t\t\t\t\t\t<CheckListWidget\n\t\t\t\t\t\t\tv-show="!stub"\n\t\t\t\t\t\t\t:taskId="taskId"\n\t\t\t\t\t\t\t:checkListId="checkListId"\n\t\t\t\t\t\t\t:isPreview="isPreview"\n\t\t\t\t\t\t\t@beforeCreated="handleBeforeCreated"\n\t\t\t\t\t\t\t@update="handleUpdate"\n\t\t\t\t\t\t\t@toggleIsComplete="handleToggleIsComplete"\n\t\t\t\t\t\t\t@show="handleShow"\n\t\t\t\t\t\t\t@addItem="addItem"\n\t\t\t\t\t\t\t@addItemFromBtn="addItemFromBtn"\n\t\t\t\t\t\t\t@removeItem="handleRemove"\n\t\t\t\t\t\t\t@focus="handleFocus"\n\t\t\t\t\t\t\t@blur="handleBlur"\n\t\t\t\t\t\t\t@emptyBlur="handleEmptyBlur"\n\t\t\t\t\t\t\t@toggleCompleted="toggleCompleted"\n\t\t\t\t\t\t\t@startGroupMode="handleGroupMode"\n\t\t\t\t\t\t\t@toggleGroupModeSelected="handleGroupModeSelect"\n\t\t\t\t\t\t\t@openCheckList="handleOpenCheckList"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<CheckListStub v-if="stub" @click="addCheckList" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-show="!stub && !isPreview" class="tasks-check-list-footer" :class="contextClass">\n\t\t\t\t\t\t<UiButton\n\t\t\t\t\t\t\t:text="loc('TASKS_V2_CHECK_LIST_NEW_BTN')"\n\t\t\t\t\t\t\t:size="ButtonSize.MEDIUM"\n\t\t\t\t\t\t\t:leftIcon="ButtonIcon.ADD"\n\t\t\t\t\t\t\t:style="AirButtonStyle.PLAIN_NO_ACCENT"\n\t\t\t\t\t\t\t@click="addCheckList"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<UiButton\n\t\t\t\t\t\t\t:text="loc('TASKS_V2_CHECK_LIST_READY_BTN')"\n\t\t\t\t\t\t\t:size="ButtonSize.MEDIUM"\n\t\t\t\t\t\t\t@click="handleClose"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CheckListItemPanel\n\t\t\t\t\t\tv-if="itemPanelIsShown && !isPreview"\n\t\t\t\t\t\tref="panel"\n\t\t\t\t\t\t:style="itemPanelStyles"\n\t\t\t\t\t\t:visibleActions="visiblePanelActions"\n\t\t\t\t\t\t:disabledActions="disabledPanelActions"\n\t\t\t\t\t\t:activeActions="activePanelActions"\n\t\t\t\t\t\t@action="handlePanelAction"\n\t\t\t\t\t/>\n\t\t\t\t\t<BMenu\n\t\t\t\t\t\tv-if="isForwardMenuShown"\n\t\t\t\t\t\t:options="forwardMenuOptions"\n\t\t\t\t\t\t@close="isForwardMenuShown = false"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t</component>\n\t`};const dt={components:{Chip:M.Chip},props:{taskId:{type:[Number,String],required:true},isAutonomous:{type:Boolean,default:false}},emits:["showCheckList"],setup(){return{Outline:b.Outline,checkListMeta:R}},computed:{task(){return this.$store.getters[`${A.Model.Tasks}/getById`](this.taskId)},checkLists(){return this.$store.getters[`${A.Model.CheckList}/getByIds`](this.task.checklist)},isUploading(){var t;return(t=this.task.checklist)==null?void 0:t.some((t=>P.fileService.get(t,P.EntityTypes.CheckListItem).isUploading()))},design(){return{[!this.isAutonomous&&!this.isSelected]:M.ChipDesign.Shadow,[!this.isAutonomous&&this.isSelected]:M.ChipDesign.ShadowAccent,[this.isAutonomous&&!this.isSelected]:M.ChipDesign.Outline,[this.isAutonomous&&this.isSelected]:M.ChipDesign.OutlineAccent}.true},isSelected(){return this.checkLists.length>0},checkListItemCount(){return this.checkLists.filter((t=>t.parentId!==0)).length},text(){if(this.isAutonomous&&this.checkListItemCount>0){const t=this.getCompletedCount();return this.loc("TASKS_V2_CHECK_LIST_COUNT_TITLE",{"#count#":t,"#total#":this.checkListItemCount})}return this.loc("TASKS_V2_CHECK_LIST_CHIP_TITLE")},icon(){if(this.isUploading){return b.Animated.LOADER_WAIT}return b.Outline.CHECK_LIST}},mounted(){this.$bitrix.eventEmitter.subscribe(A.EventName.CloseCheckList,this.handleFieldClose)},beforeUnmount(){this.$bitrix.eventEmitter.unsubscribe(A.EventName.CloseCheckList,this.handleFieldClose)},methods:{handleClick(){if(this.isAutonomous){void this.showCheckList()}else{if(this.isSelected){this.highlightField()}else{void this.showCheckList()}}},async showCheckList(){if(!this.isSelected){await this.buildEmptyCheckList()}this.$emit("showCheckList")},async buildEmptyCheckList(){const t=S.Text.getRandom();const e=S.Text.getRandom();await this.$store.dispatch(`${A.Model.CheckList}/insertMany`,[{id:t,nodeId:t,title:this.loc("TASKS_V2_CHECK_LIST_TITLE_NUMBER",{"#number#":1})},{id:e,nodeId:e,parentId:t}]);await this.$store.dispatch(`${A.Model.Tasks}/update`,{id:this.taskId,fields:{checklist:[t,e]}})},highlightField(){void T.fieldHighlighter.setContainer(this.$root.$el).highlight(R.id)},getCompletedCount(){return this.checkLists.filter((t=>t.isComplete&&t.parentId!==0)).length},handleFieldClose(){if(this.isAutonomous){this.$refs.chip.focus()}}},template:`\n\t\t<Chip\n\t\t\t:design="design"\n\t\t\t:icon="icon"\n\t\t\t:text="text"\n\t\t\t:data-task-id="taskId"\n\t\t\t:data-task-chip-id="checkListMeta.id"\n\t\t\tref="chip"\n\t\t\t@click="handleClick"\n\t\t/>\n\t`};t.CheckList=ct;t.CheckListChip=dt;t.CheckListList=N;t.checkListMeta=R})(this.BX.Tasks.V2.Component.Fields=this.BX.Tasks.V2.Component.Fields||{},BX.Main,BX.UI.EntitySelector,BX.Tasks.V2.Component.Elements,BX.Tasks.V2,BX.Tasks.V2.Lib,BX.Vue3.Components,BX.UI.Vue3.Components,BX.Vue3.Vuex,BX.Tasks.V2.Component.Elements,BX.Tasks.V2.Provider.Service,BX.UI.Vue3.Components,BX.Tasks.V2.Component.Elements,BX.UI.Uploader,BX.Disk.Uploader,BX.Tasks.V2.Component.Elements,BX.Tasks.V2.Component.Elements,BX.Vue3.Directives,BX.UI.IconSet,BX.Tasks.V2.Component.Elements,BX.Event,BX,BX,BX.UI.IconSet,BX,BX.Tasks.V2.Lib,BX.Tasks.V2.Component.Elements,BX.Tasks.V2.Provider.Service,BX.Tasks.V2.Const);
//# sourceMappingURL=check-list.bundle.map.js