this.BX=this.BX||{};this.BX.Tasks=this.BX.Tasks||{};this.BX.Tasks.V2=this.BX.Tasks.V2||{};this.BX.Tasks.V2.Provider=this.BX.Tasks.V2.Provider||{};(function(e,t,s,i,a,n,r){"use strict";function o(e){const t=new Map;e.forEach((e=>{t.set(e.id,e.nodeId)}));return e.map((e=>{const s=l(e);const i=e.parentId?t.get(e.parentId):0;return{...e,title:s,parentNodeId:i}}))}function c(e){return Object.fromEntries(e.map((e=>{var s,i,a,n,r;const o=(s=e.accomplices)==null?void 0:s.map((e=>({ID:e.id,TYPE:"A",NAME:e.name,IMAGE:e.image,IS_COLLABER:e.type===t.UserTypes.Collaber?1:""})));const c=(i=e.auditors)==null?void 0:i.map((e=>({ID:e.id,TYPE:"U",NAME:e.name,IMAGE:e.image,IS_COLLABER:e.type===t.UserTypes.Collaber?1:""})));const d=Object.fromEntries((a=e.attachments)==null?void 0:a.map((e=>[e,e])));const p=[...o,...c].reduce(((e,t)=>{e[t.ID]=t;return e}),{});const h=l(e);const u=Object.fromEntries(Object.entries({NODE_ID:e.nodeId,TITLE:h,CREATED_BY:(n=e.creator)==null?void 0:n.id,TOGGLED_BY:(r=e.toggledBy)==null?void 0:r.id,TOGGLED_DATE:e.toggledDate,MEMBERS:p,NEW_FILE_IDS:d,ATTACHMENTS:d,IS_COMPLETE:e.isComplete,IS_IMPORTANT:e.isImportant,PARENT_ID:e.parentId,SORT_INDEX:e.sortIndex,ACTIONS:{MODIFY:e.actions.modify,REMOVE:e.actions.remove,TOGGLE:e.actions.toggle}}).filter((([,e])=>e!==null&&e!==undefined)));return[e.nodeId,u]})))}function l(e){var t,s;const i=[...((t=e.accomplices)!=null?t:[]).map((e=>e.name)),...((s=e.auditors)!=null?s:[]).map((e=>e.name))].join(" ");if(i){return`${e.title} ${i}`}return e.title}var d=babelHelpers.classPrivateFieldLooseKey("getPromises");class p{constructor(){Object.defineProperty(this,d,{writable:true,value:{}})}async load(e){var t,s;(s=(t=babelHelpers.classPrivateFieldLooseBase(this,d)[d])[e])!=null?s:t[e]=new Promise((async(t,s)=>{try{const s=await(new n.ApiClient).post("CheckList.get",{task:{id:e}});const a=new r.CheckList;const o=a.getElementState();const c=s.map((e=>({...o,...Object.fromEntries(Object.entries(e).filter((([e,t])=>t!==null)))})));await Promise.all([this.$store.dispatch(`${i.Model.CheckList}/upsertMany`,c),this.$store.dispatch(`${i.Model.Tasks}/update`,{id:e,fields:{containsChecklist:s.length>0,checklist:s.map((e=>e.id))}})]);t()}catch(e){s(e)}}));return babelHelpers.classPrivateFieldLooseBase(this,d)[d][e]}async save(e,t){return new Promise((async(s,a)=>{try{const a=await(new n.ApiClient).post("CheckList.save",{task:{id:e,checklist:o(t)}});const c=new r.CheckList;const l=c.getElementState();const d=a.map((e=>({...l,...Object.fromEntries(Object.entries(e).filter((([e,t])=>t!==null)))})));const p=t.map((e=>e.id));await Promise.all([this.$store.dispatch(`${i.Model.CheckList}/deleteMany`,p),this.$store.dispatch(`${i.Model.CheckList}/upsertMany`,d),this.$store.dispatch(`${i.Model.Tasks}/update`,{id:e,fields:{containsChecklist:true,checklist:d.map((e=>e.id))}})]);s()}catch(e){a(e)}}))}get $store(){return a.Core.getStore()}}const h=new p;const u={mapModelToSliderData:c};e.CheckListMappers=u;e.checkListService=h})(this.BX.Tasks.V2.Provider.Service=this.BX.Tasks.V2.Provider.Service||{},BX.Tasks.V2.Model,BX.Vue3.Vuex,BX.Tasks.V2.Const,BX.Tasks.V2,BX.Tasks.V2.Lib,BX.Tasks.V2.Model);
//# sourceMappingURL=check-list-service.bundle.map.js