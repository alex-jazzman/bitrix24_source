{"version":3,"file":"busy-slots.bundle.js","sources":["../src/busy-slots.js"],"sourcesContent":["import { Core } from 'booking.core';\nimport { BusySlot, DateFormat, Model } from 'booking.const';\nimport { SlotRanges } from 'booking.lib.slot-ranges';\nimport { resourceDialogService } from 'booking.provider.service.resource-dialog-service';\nimport { resourcesDateCache } from 'booking.lib.resources-date-cache';\nimport type { BookingModel, OverbookingMap } from 'booking.model.bookings';\nimport type { ResourceModel, SlotRange } from 'booking.model.resources';\nimport type { Intersections } from 'booking.model.interface';\n\nimport type { BusySlotDto, Range } from './types';\n\nexport type { BusySlotDto };\n\nconst minBookingViewMs = 15 * 60 * 1000;\n\nclass BusySlots\n{\n\t#busySlots: BusySlotDto[] = [];\n\n\t#getBookings(): BookingModel[]\n\t{\n\t\treturn Core.getStore().getters[`${Model.Bookings}/getByDateAndResources`](\n\t\t\tthis.#selectedDateTs,\n\t\t\tthis.#resourcesIds,\n\t\t);\n\t}\n\n\t#getIntersectingBookings(resourcesIds: number[]): BookingModel[]\n\t{\n\t\treturn Core.getStore().getters[`${Model.Bookings}/getByDateAndResources`](\n\t\t\tthis.#selectedDateTs,\n\t\t\tresourcesIds,\n\t\t);\n\t}\n\n\tget #selectedWeekDay(): string\n\t{\n\t\treturn DateFormat.WeekDays[new Date(this.#selectedDateTs + this.#offset).getDay()];\n\t}\n\n\tget #selectedDateTs(): number\n\t{\n\t\treturn Core.getStore().getters[`${Model.Interface}/selectedDateTs`];\n\t}\n\n\tget #offset(): number\n\t{\n\t\treturn Core.getStore().getters[`${Model.Interface}/offset`];\n\t}\n\n\tget #timezone(): number\n\t{\n\t\treturn Core.getStore().getters[`${Model.Interface}/timezone`];\n\t}\n\n\tget #resourcesIds(): number[]\n\t{\n\t\treturn Core.getStore().getters[`${Model.Interface}/resourcesIds`];\n\t}\n\n\tget #intersections(): Intersections\n\t{\n\t\tif (this.#draggedBooking)\n\t\t{\n\t\t\tconst draggedIds = [...this.#draggedBooking.resourcesIds];\n\t\t\tconst notDraggedIds = draggedIds.filter((id: number) => id !== this.#draggedBookingResourceId);\n\n\t\t\treturn {\n\t\t\t\t...[...this.#resourcesIds].reduce((acc: Intersections, id: number) => ({\n\t\t\t\t\t...acc,\n\t\t\t\t\t[id]: notDraggedIds,\n\t\t\t\t}), {}),\n\t\t\t\t...notDraggedIds.reduce((acc: Intersections, id: number) => ({\n\t\t\t\t\t...acc,\n\t\t\t\t\t[id]: draggedIds,\n\t\t\t\t}), {}),\n\t\t\t};\n\t\t}\n\n\t\treturn Core.getStore().getters[`${Model.Interface}/intersections`];\n\t}\n\n\tget #draggedBooking(): BookingModel | null\n\t{\n\t\treturn Core.getStore().getters[`${Model.Bookings}/getById`](this.#draggedBookingId) ?? null;\n\t}\n\n\tget #draggedBookingId(): number\n\t{\n\t\treturn (\n\t\t\tCore.getStore().getters[`${Model.Interface}/draggedBookingId`]\n\t\t\t|| Core.getStore().getters[`${Model.Interface}/resizedBookingId`]\n\t\t);\n\t}\n\n\tget #draggedBookingResourceId(): number\n\t{\n\t\treturn Core.getStore().getters[`${Model.Interface}/draggedBookingResourceId`];\n\t}\n\n\tasync loadBusySlots(): Promise<void>\n\t{\n\t\tawait this.#loadIntersections();\n\n\t\tvoid Core.getStore().dispatch(`${Model.Interface}/clearDisabledBusySlots`);\n\t\tvoid Core.getStore().dispatch(`${Model.Interface}/clearBusySlots`);\n\n\t\tconst resourcesWithIntersections = Object.keys(this.#intersections)\n\t\t\t.flatMap((key: string) => {\n\t\t\t\tconst resourceId = Number(key);\n\n\t\t\t\tif (resourceId > 0)\n\t\t\t\t{\n\t\t\t\t\treturn resourceId;\n\t\t\t\t}\n\n\t\t\t\treturn this.#resourcesIds;\n\t\t\t})\n\t\t;\n\n\t\tthis.#busySlots = [\n\t\t\t...this.#resourcesIds.flatMap((resourceId) => this.#calculateOffHoursBusySlots(resourceId)),\n\t\t\t...resourcesWithIntersections.flatMap((resourceId) => this.#calculateIntersectionBusySlots(resourceId)),\n\t\t];\n\n\t\treturn Core.getStore().dispatch(`${Model.Interface}/upsertBusySlotMany`, this.#busySlots);\n\t}\n\n\tasync #loadIntersections(): Promise<void>\n\t{\n\t\tconst selectedResourceIds = [...new Set(Object.values(this.#intersections).flat())];\n\n\t\tconst dateTs = this.#selectedDateTs / 1000;\n\t\tconst loadedResourcesIds = new Set(resourcesDateCache.getIdsByDateTs(dateTs));\n\t\tconst idsToLoad = selectedResourceIds.filter((id: number) => !loadedResourcesIds.has(id));\n\n\t\tawait resourceDialogService.loadByIds(idsToLoad, dateTs);\n\t}\n\n\t#calculateOffHoursBusySlots(resourceId: number): BusySlotDto[]\n\t{\n\t\tconst resource: ResourceModel = this.#getResource(resourceId);\n\t\tif (resource.slotRanges.length === 0)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\n\t\tconst bookingRanges = this.#getBookings()\n\t\t\t.filter((booking: BookingModel) => booking.resourcesIds.includes(resourceId))\n\t\t\t.map((booking: BookingModel) => this.#calculateMinutesRange(booking))\n\t\t;\n\n\t\tconst slotRanges = SlotRanges\n\t\t\t.applyTimezone(resource.slotRanges, this.#selectedDateTs, this.#timezone)\n\t\t\t.filter((slotRange: SlotRange) => slotRange.weekDays.includes(this.#selectedWeekDay))\n\t\t;\n\n\t\tconst freeRanges = this.filterSlotRanges([...slotRanges, ...bookingRanges]);\n\n\t\tconst busyRanges = [0, ...freeRanges.flatMap(({ from, to }) => [from, to]), 24 * 60]\n\t\t\t.reduce((acc, minutes, index) => {\n\t\t\t\tconst chunkIndex = Math.floor(index / 2);\n\n\t\t\t\tacc[chunkIndex] ??= [];\n\t\t\t\tacc[chunkIndex].push(minutes);\n\n\t\t\t\treturn acc;\n\t\t\t}, [])\n\t\t;\n\n\t\treturn busyRanges.filter(([from, to]) => to - from > 0).map(([from, to]): BusySlotDto => {\n\t\t\tconst fromTs = new Date(this.#selectedDateTs).setMinutes(from);\n\t\t\tconst toTs = new Date(this.#selectedDateTs).setMinutes(to);\n\t\t\tconst id = `${resourceId}-${fromTs}-${toTs}`;\n\t\t\tconst type = BusySlot.OffHours;\n\n\t\t\treturn { id, fromTs, toTs, resourceId, type };\n\t\t});\n\t}\n\n\t#calculateIntersectionBusySlots(resourceId: number): BusySlotDto[]\n\t{\n\t\tconst resource: ResourceModel = this.#getResource(resourceId);\n\t\tif (resource.slotRanges.length === 0)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\n\t\tconst intersectingResourcesIds = [\n\t\t\t...(this.#intersections[0] ?? []),\n\t\t\t...(this.#intersections[resourceId] ?? []),\n\t\t];\n\n\t\tconst bookingRanges = this.#getBookings()\n\t\t\t.filter((booking: BookingModel) => booking.resourcesIds.includes(resourceId))\n\t\t\t.map((booking: BookingModel) => this.#calculateMinutesRange(booking))\n\t\t;\n\n\t\tconst overbookingMap = this.#getOverbookingMap();\n\t\tconst intersectionOverbookingList: { resourceId: number, bookingId: number }[] = [];\n\t\tbookingRanges.forEach((bookingRange) => {\n\t\t\tconst overbooking = overbookingMap.get(bookingRange.id);\n\t\t\tif (!overbooking)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst items = overbooking.items\n\t\t\t\t.filter((item) => item.resourceId !== resourceId)\n\t\t\t\t.flatMap((item) => item.intersections\n\t\t\t\t\t.map(({ id }) => {\n\t\t\t\t\t\treturn { id, resourceId: item.resourceId };\n\t\t\t\t\t}))\n\t\t\t;\n\n\t\t\tintersectionOverbookingList.push(...items);\n\t\t});\n\n\t\tconst intersectingBookings = this.#getIntersectingBookings(intersectingResourcesIds)\n\t\t\t.filter((booking: BookingModel) => {\n\t\t\t\tconst notCurrentResource = !booking.resourcesIds.includes(resourceId);\n\t\t\t\tconst isNotDragged = booking.id !== this.#draggedBookingId;\n\t\t\t\tconst isOverbooking = overbookingMap.has(booking.id);\n\t\t\t\tconst isIntersectionOverbooking = intersectionOverbookingList.some(({ id }) => {\n\t\t\t\t\treturn id === booking.id;\n\t\t\t\t});\n\n\t\t\t\treturn notCurrentResource && isNotDragged && (isOverbooking || isIntersectionOverbooking);\n\t\t\t})\n\t\t;\n\n\t\tconst intersectingBookingRanges = intersectingBookings\n\t\t\t.map((booking: BookingModel) => this.#calculateMinutesRange(booking))\n\t\t\t.filter((ir) => {\n\t\t\t\treturn bookingRanges\n\t\t\t\t\t.filter((br) => br.from <= ir.from && ir.to <= br.to)\n\t\t\t\t\t.length < 2;\n\t\t\t});\n\n\t\tif (intersectingBookingRanges.length === 0)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\n\t\tconst busyRanges = intersectingBookingRanges.flatMap((intersectingRange) => {\n\t\t\treturn this.#subtractRanges(intersectingRange, bookingRanges);\n\t\t});\n\n\t\treturn busyRanges.map(({ from, to, id }): BusySlotDto => {\n\t\t\tconst fromTs = new Date(this.#selectedDateTs).setMinutes(from);\n\t\t\tconst toTs = new Date(this.#selectedDateTs).setMinutes(to);\n\t\t\tconst type = BusySlot.Intersection;\n\n\t\t\tconst booking = intersectingBookings.find((intersectingBooking) => intersectingBooking.id === id);\n\n\t\t\tconst intersectingResourceId = booking\n\t\t\t\t? booking.resourcesIds.find((it) => intersectingResourcesIds.includes(it))\n\t\t\t\t: 0\n\t\t\t;\n\n\t\t\treturn {\n\t\t\t\tid: `${resourceId}-${fromTs}-${toTs}`,\n\t\t\t\tfromTs,\n\t\t\t\ttoTs,\n\t\t\t\tresourceId,\n\t\t\t\tintersectingResourceId,\n\t\t\t\ttype,\n\t\t\t};\n\t\t});\n\t}\n\n\t#calculateMinutesRange(booking: BookingModel): Range\n\t{\n\t\tconst date = new Date(this.#selectedDateTs);\n\t\tconst dateFromTs = Math.max(date.getTime(), booking.dateFromTs) + this.#offset;\n\t\tconst bookingViewToTs = Math.max(booking.dateToTs, booking.dateFromTs + minBookingViewMs);\n\t\tconst dateToTs = Math.min(date.setDate(date.getDate() + 1), bookingViewToTs) + this.#offset;\n\n\t\tconst dateFrom = new Date(dateFromTs);\n\t\tconst dateTo = new Date(dateToTs);\n\t\tconst to = dateTo.getHours() * 60 + dateTo.getMinutes();\n\n\t\treturn {\n\t\t\tfrom: dateFrom.getHours() * 60 + dateFrom.getMinutes(),\n\t\t\tto: to === 0 ? 60 * 24 : to,\n\t\t\tid: booking.id,\n\t\t};\n\t}\n\n\t#subtractRanges(range, bookingRanges): Range[]\n\t{\n\t\tlet remainingRanges = [{ ...range }];\n\n\t\tbookingRanges.forEach((bookingRange) => {\n\t\t\tconst fullBookingRange = this.#sliceOverbookingFromBookingRange(bookingRange, bookingRanges);\n\n\t\t\tremainingRanges = remainingRanges.flatMap((remainingRange) => {\n\t\t\t\tif (this.#rangesOverlap(remainingRange, fullBookingRange))\n\t\t\t\t{\n\t\t\t\t\tconst parts = [];\n\t\t\t\t\tif (remainingRange.from < fullBookingRange.from)\n\t\t\t\t\t{\n\t\t\t\t\t\tparts.push({\n\t\t\t\t\t\t\tfrom: remainingRange.from,\n\t\t\t\t\t\t\tto: fullBookingRange.from,\n\t\t\t\t\t\t\tid: remainingRange.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (remainingRange.to > fullBookingRange.to)\n\t\t\t\t\t{\n\t\t\t\t\t\tparts.push({\n\t\t\t\t\t\t\tfrom: fullBookingRange.to,\n\t\t\t\t\t\t\tto: remainingRange.to,\n\t\t\t\t\t\t\tid: remainingRange.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (parts.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn parts;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [remainingRange];\n\t\t\t});\n\t\t});\n\n\t\treturn remainingRanges;\n\t}\n\n\t#rangesOverlap(range1, range2): boolean\n\t{\n\t\treturn range1.from < range2.to && range2.from < range1.to;\n\t}\n\n\t#sliceOverbookingFromBookingRange(bookingRange: Range, bookingRanges: Range[]): Range\n\t{\n\t\tconst overbooking = bookingRanges.find(({ from, to, id }) => {\n\t\t\treturn bookingRange.from < to && bookingRange.to > from && bookingRange.id !== id;\n\t\t});\n\t\tif (!overbooking)\n\t\t{\n\t\t\treturn bookingRange;\n\t\t}\n\n\t\treturn {\n\t\t\tfrom: Math.max(bookingRange.from, overbooking.from),\n\t\t\tto: Math.min(bookingRange.to, overbooking.to),\n\t\t\tid: bookingRange.id,\n\t\t};\n\t}\n\n\tfilterSlotRanges(slotRanges: { from: number, to: number }[]): { from: number, to: number }[]\n\t{\n\t\treturn slotRanges\n\t\t\t.map(({ from, to }) => ({ from, to }))\n\t\t\t.sort((a, b) => a.from - b.from)\n\t\t\t.reduce((acc, { from, to }) => {\n\t\t\t\tconst last = acc.length - 1;\n\t\t\t\tif (acc[last] && acc[last].to >= from)\n\t\t\t\t{\n\t\t\t\t\tif (acc[last].to <= to)\n\t\t\t\t\t{\n\t\t\t\t\t\tacc[last].to = to;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tacc.push({ from, to });\n\t\t\t\t}\n\n\t\t\t\treturn acc;\n\t\t\t}, [])\n\t\t\t.filter(({ from, to }) => to - from > 0)\n\t\t;\n\t}\n\n\t#getResource(resourceId: number): ResourceModel\n\t{\n\t\treturn Core.getStore().getters[`${Model.Resources}/getById`](resourceId);\n\t}\n\n\t#getOverbookingMap(): OverbookingMap\n\t{\n\t\treturn Core.getStore().getters[`${Model.Bookings}/overbookingMap`];\n\t}\n}\n\nexport const busySlots = new BusySlots();\n"],"names":["minBookingViewMs","BusySlots","loadBusySlots","Core","getStore","dispatch","Model","Interface","resourcesWithIntersections","Object","keys","flatMap","key","resourceId","Number","filterSlotRanges","slotRanges","map","from","to","sort","a","b","reduce","acc","last","length","push","filter","getters","Bookings","resourcesIds","DateFormat","WeekDays","Date","getDay","draggedIds","notDraggedIds","id","selectedResourceIds","Set","values","flat","dateTs","loadedResourcesIds","resourcesDateCache","getIdsByDateTs","idsToLoad","has","resourceDialogService","loadByIds","resource","bookingRanges","booking","includes","SlotRanges","applyTimezone","slotRange","weekDays","freeRanges","busyRanges","minutes","index","chunkIndex","Math","floor","fromTs","setMinutes","toTs","type","BusySlot","OffHours","intersectingResourcesIds","overbookingMap","intersectionOverbookingList","forEach","bookingRange","overbooking","get","items","item","intersections","intersectingBookings","notCurrentResource","isNotDragged","isOverbooking","isIntersectionOverbooking","some","intersectingBookingRanges","ir","br","intersectingRange","Intersection","find","intersectingBooking","intersectingResourceId","it","date","dateFromTs","max","getTime","bookingViewToTs","dateToTs","min","setDate","getDate","dateFrom","dateTo","getHours","getMinutes","range","remainingRanges","fullBookingRange","remainingRange","parts","range1","range2","Resources","busySlots"],"mappings":"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"}