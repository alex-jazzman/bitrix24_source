{"version":3,"file":"busy-slots.bundle.js","sources":["../src/lib/index.js","../src/busy-slots.js"],"sourcesContent":["import { BusySlot } from 'booking.const';\nimport type { BookingModel, OverbookingMap } from 'booking.model.bookings';\n\nimport type { BusySlotDto, Range } from '../types';\n\ntype GetIntersectionBusySlotsProps = {\n\tbusyRanges: Range[],\n\tresourceId: number,\n\tselectedDateTs: number,\n\tintersectingBookings: BookingModel[],\n\tintersectingResourcesIds: number[],\n\toverbookingMap: OverbookingMap,\n}\n\nexport function getIntersectionBusySlots({\n\tbusyRanges,\n\tresourceId,\n\tselectedDateTs,\n\tintersectingBookings,\n\tintersectingResourcesIds,\n\toverbookingMap,\n}: GetIntersectionBusySlotsProps): BusySlotDto[]\n{\n\tconst intersectionBusySlots = [];\n\n\tfor (const busyRange of busyRanges)\n\t{\n\t\tlet fromTs = new Date(selectedDateTs).setMinutes(busyRange.from);\n\t\tconst toTs = new Date(selectedDateTs).setMinutes(busyRange.to);\n\n\t\tconst booking = intersectingBookings.find((intersectingBooking) => intersectingBooking.id === busyRange.id);\n\n\t\tconst intersectingResourceId = booking\n\t\t\t? booking.resourcesIds.find((it) => intersectingResourcesIds.includes(it))\n\t\t\t: 0;\n\n\t\tconst overbookingIntersections = getOverbookingIntersections(\n\t\t\tresourceId,\n\t\t\tbusyRange.id,\n\t\t\toverbookingMap,\n\t\t);\n\n\t\tconst overbookingIntersectionBusySlots = overbookingIntersections\n\t\t\t.map((overbookingIntersection) => {\n\t\t\t\tconst overbookingFromTs = fromTs >= overbookingIntersection.dateFromTs\n\t\t\t\t\t? fromTs\n\t\t\t\t\t: overbookingIntersection.dateFromTs;\n\t\t\t\tconst overbookingToTs = toTs <= overbookingIntersection.dateToTs\n\t\t\t\t\t? toTs\n\t\t\t\t\t: overbookingIntersection.dateToTs;\n\n\t\t\t\tif (overbookingFromTs === overbookingToTs)\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tid: `${resourceId}-${overbookingFromTs}-${overbookingToTs}`,\n\t\t\t\t\tfromTs: overbookingFromTs,\n\t\t\t\t\ttoTs: overbookingToTs,\n\t\t\t\t\tresourceId,\n\t\t\t\t\tintersectingResourceId,\n\t\t\t\t\ttype: BusySlot.IntersectionOverbooking,\n\t\t\t\t};\n\t\t\t})\n\t\t\t.filter((item) => item !== null);\n\n\t\toverbookingIntersectionBusySlots.forEach((overbookingIntersectionBusySlot) => {\n\t\t\tif (fromTs <= overbookingIntersectionBusySlot.fromTs)\n\t\t\t{\n\t\t\t\tintersectionBusySlots.push({\n\t\t\t\t\tid: `${resourceId}-${fromTs}-${overbookingIntersectionBusySlot.fromTs}`,\n\t\t\t\t\tfromTs,\n\t\t\t\t\ttoTs: overbookingIntersectionBusySlot.fromTs,\n\t\t\t\t\tresourceId,\n\t\t\t\t\tintersectingResourceId,\n\t\t\t\t\ttype: BusySlot.Intersection,\n\t\t\t\t});\n\t\t\t\tfromTs = overbookingIntersectionBusySlot.toTs;\n\t\t\t}\n\t\t});\n\n\t\tintersectionBusySlots.push(...overbookingIntersectionBusySlots);\n\n\t\tif (fromTs !== toTs)\n\t\t{\n\t\t\tintersectionBusySlots.push({\n\t\t\t\tid: `${resourceId}-${fromTs}-${toTs}`,\n\t\t\t\tfromTs,\n\t\t\t\ttoTs,\n\t\t\t\tresourceId,\n\t\t\t\tintersectingResourceId,\n\t\t\t\ttype: BusySlot.Intersection,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn intersectionBusySlots;\n}\n\nfunction getOverbookingIntersections(resourceId, bookingId, overbookingMap): Array<{\n\tdateFromTs: number,\n\tdateToTs: number,\n\tid: number\n}>\n{\n\tconst overbooking = overbookingMap.get(bookingId);\n\tif (!overbooking)\n\t{\n\t\treturn [];\n\t}\n\n\treturn overbooking.items\n\t\t.filter((item) => item.resourceId !== resourceId)\n\t\t.flatMap((item) => item.intersections);\n}\n","import { Core } from 'booking.core';\nimport { BusySlot, DateFormat, Model } from 'booking.const';\nimport { SlotRanges } from 'booking.lib.slot-ranges';\nimport { resourceDialogService } from 'booking.provider.service.resource-dialog-service';\nimport { resourcesDateCache } from 'booking.lib.resources-date-cache';\nimport type { BookingModel, OverbookingMap } from 'booking.model.bookings';\nimport type { ResourceModel, SlotRange } from 'booking.model.resources';\nimport type { Intersections } from 'booking.model.interface';\n\nimport { getIntersectionBusySlots } from './lib';\nimport type { BusySlotDto, Range } from './types';\n\nexport type { BusySlotDto };\n\nconst minBookingViewMs = 15 * 60 * 1000;\n\nclass BusySlots\n{\n\t#busySlots: BusySlotDto[] = [];\n\n\t#getBookings(): BookingModel[]\n\t{\n\t\treturn Core.getStore().getters[`${Model.Bookings}/getByDateAndResources`](\n\t\t\tthis.#selectedDateTs,\n\t\t\tthis.#resourcesIds,\n\t\t);\n\t}\n\n\t#getIntersectingBookings(resourcesIds: number[]): BookingModel[]\n\t{\n\t\treturn Core.getStore().getters[`${Model.Bookings}/getByDateAndResources`](\n\t\t\tthis.#selectedDateTs,\n\t\t\tresourcesIds,\n\t\t);\n\t}\n\n\tget #selectedWeekDay(): string\n\t{\n\t\treturn DateFormat.WeekDays[new Date(this.#selectedDateTs + this.#offset).getDay()];\n\t}\n\n\tget #selectedDateTs(): number\n\t{\n\t\treturn Core.getStore().getters[`${Model.Interface}/selectedDateTs`];\n\t}\n\n\tget #offset(): number\n\t{\n\t\treturn Core.getStore().getters[`${Model.Interface}/offset`];\n\t}\n\n\tget #timezone(): number\n\t{\n\t\treturn Core.getStore().getters[`${Model.Interface}/timezone`];\n\t}\n\n\tget #resourcesIds(): number[]\n\t{\n\t\treturn Core.getStore().getters[`${Model.Interface}/resourcesIds`];\n\t}\n\n\tget #intersections(): Intersections\n\t{\n\t\tif (this.#draggedBooking)\n\t\t{\n\t\t\tconst draggedIds = [...this.#draggedBooking.resourcesIds];\n\t\t\tconst notDraggedIds = draggedIds.filter((id: number) => id !== this.#draggedBookingResourceId);\n\n\t\t\treturn {\n\t\t\t\t...[...this.#resourcesIds].reduce((acc: Intersections, id: number) => ({\n\t\t\t\t\t...acc,\n\t\t\t\t\t[id]: notDraggedIds,\n\t\t\t\t}), {}),\n\t\t\t\t...notDraggedIds.reduce((acc: Intersections, id: number) => ({\n\t\t\t\t\t...acc,\n\t\t\t\t\t[id]: draggedIds,\n\t\t\t\t}), {}),\n\t\t\t};\n\t\t}\n\n\t\treturn Core.getStore().getters[`${Model.Interface}/intersections`];\n\t}\n\n\tget #draggedBooking(): BookingModel | null\n\t{\n\t\treturn Core.getStore().getters[`${Model.Bookings}/getById`](this.#draggedBookingId) ?? null;\n\t}\n\n\tget #draggedBookingId(): number\n\t{\n\t\treturn (\n\t\t\tCore.getStore().getters[`${Model.Interface}/draggedBookingId`]\n\t\t\t|| Core.getStore().getters[`${Model.Interface}/resizedBookingId`]\n\t\t);\n\t}\n\n\tget #draggedBookingResourceId(): number\n\t{\n\t\treturn Core.getStore().getters[`${Model.Interface}/draggedBookingResourceId`];\n\t}\n\n\tasync loadBusySlots(): Promise<void>\n\t{\n\t\tawait this.#loadIntersections();\n\n\t\tvoid Core.getStore().dispatch(`${Model.Interface}/clearDisabledBusySlots`);\n\t\tvoid Core.getStore().dispatch(`${Model.Interface}/clearBusySlots`);\n\n\t\tconst resourcesWithIntersections = Object.keys(this.#intersections)\n\t\t\t.flatMap((key: string) => {\n\t\t\t\tconst resourceId = Number(key);\n\n\t\t\t\tif (resourceId > 0)\n\t\t\t\t{\n\t\t\t\t\treturn resourceId;\n\t\t\t\t}\n\n\t\t\t\treturn this.#resourcesIds;\n\t\t\t})\n\t\t;\n\n\t\tthis.#busySlots = [\n\t\t\t...this.#resourcesIds.flatMap((resourceId) => this.#calculateOffHoursBusySlots(resourceId)),\n\t\t\t...resourcesWithIntersections.flatMap((resourceId) => this.#calculateIntersectionBusySlots(resourceId)),\n\t\t];\n\n\t\treturn Core.getStore().dispatch(`${Model.Interface}/upsertBusySlotMany`, this.#busySlots);\n\t}\n\n\tasync #loadIntersections(): Promise<void>\n\t{\n\t\tconst selectedResourceIds = [...new Set(Object.values(this.#intersections).flat())];\n\n\t\tconst dateTs = this.#selectedDateTs / 1000;\n\t\tconst loadedResourcesIds = new Set(resourcesDateCache.getIdsByDateTs(dateTs));\n\t\tconst idsToLoad = selectedResourceIds.filter((id: number) => !loadedResourcesIds.has(id));\n\n\t\tawait resourceDialogService.loadByIds(idsToLoad, dateTs);\n\t}\n\n\t#calculateOffHoursBusySlots(resourceId: number): BusySlotDto[]\n\t{\n\t\tconst resource: ResourceModel = this.#getResource(resourceId);\n\t\tif (resource.slotRanges.length === 0)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\n\t\tconst bookingRanges = this.#getBookings()\n\t\t\t.filter((booking: BookingModel) => booking.resourcesIds.includes(resourceId))\n\t\t\t.map((booking: BookingModel) => this.#calculateMinutesRange(booking))\n\t\t;\n\n\t\tconst slotRanges = SlotRanges\n\t\t\t.applyTimezone(resource.slotRanges, this.#selectedDateTs, this.#timezone)\n\t\t\t.filter((slotRange: SlotRange) => slotRange.weekDays.includes(this.#selectedWeekDay))\n\t\t;\n\n\t\tconst freeRanges = this.filterSlotRanges([...slotRanges, ...bookingRanges]);\n\n\t\tconst busyRanges = [0, ...freeRanges.flatMap(({ from, to }) => [from, to]), 24 * 60]\n\t\t\t.reduce((acc, minutes, index) => {\n\t\t\t\tconst chunkIndex = Math.floor(index / 2);\n\n\t\t\t\tacc[chunkIndex] ??= [];\n\t\t\t\tacc[chunkIndex].push(minutes);\n\n\t\t\t\treturn acc;\n\t\t\t}, [])\n\t\t;\n\n\t\treturn busyRanges.filter(([from, to]) => to - from > 0).map(([from, to]): BusySlotDto => {\n\t\t\tconst fromTs = new Date(this.#selectedDateTs).setMinutes(from);\n\t\t\tconst toTs = new Date(this.#selectedDateTs).setMinutes(to);\n\t\t\tconst id = `${resourceId}-${fromTs}-${toTs}`;\n\t\t\tconst type = BusySlot.OffHours;\n\n\t\t\treturn { id, fromTs, toTs, resourceId, type };\n\t\t});\n\t}\n\n\t#calculateIntersectionBusySlots(resourceId: number): BusySlotDto[]\n\t{\n\t\tconst resource: ResourceModel = this.#getResource(resourceId);\n\t\tif (resource.slotRanges.length === 0)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\n\t\tconst intersectingResourcesIds = [\n\t\t\t...(this.#intersections[0] ?? []),\n\t\t\t...(this.#intersections[resourceId] ?? []),\n\t\t];\n\n\t\tconst bookingRanges = this.#getBookings()\n\t\t\t.filter((booking: BookingModel) => booking.resourcesIds.includes(resourceId))\n\t\t\t.map((booking: BookingModel) => this.#calculateMinutesRange(booking));\n\n\t\tconst intersectingBookings = this.#getIntersectingBookings(intersectingResourcesIds)\n\t\t\t.filter((booking: BookingModel) => {\n\t\t\t\tconst notCurrentResource = !booking.resourcesIds.includes(resourceId);\n\t\t\t\tconst isNotDragged = booking.id !== this.#draggedBookingId;\n\n\t\t\t\treturn notCurrentResource && isNotDragged;\n\t\t\t});\n\n\t\tconst intersectingBookingRanges = intersectingBookings\n\t\t\t.map((booking: BookingModel) => this.#calculateMinutesRange(booking))\n\t\t\t.filter((ir) => {\n\t\t\t\treturn bookingRanges\n\t\t\t\t\t.filter((br) => br.from <= ir.from && ir.to <= br.to)\n\t\t\t\t\t.length < 2;\n\t\t\t});\n\n\t\tif (intersectingBookingRanges.length === 0)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\n\t\tconst busyRanges = intersectingBookingRanges.flatMap((intersectingRange) => {\n\t\t\treturn this.#subtractRanges(intersectingRange, bookingRanges);\n\t\t});\n\n\t\treturn getIntersectionBusySlots({\n\t\t\tresourceId,\n\t\t\tbusyRanges,\n\t\t\toverbookingMap: this.#getOverbookingMap(),\n\t\t\tselectedDateTs: this.#selectedDateTs,\n\t\t\tintersectingBookings,\n\t\t\tintersectingResourcesIds,\n\t\t});\n\t}\n\n\t#calculateMinutesRange(booking: BookingModel): Range\n\t{\n\t\tconst date = new Date(this.#selectedDateTs);\n\t\tconst dateFromTs = Math.max(date.getTime(), booking.dateFromTs) + this.#offset;\n\t\tconst bookingViewToTs = Math.max(booking.dateToTs, booking.dateFromTs + minBookingViewMs);\n\t\tconst dateToTs = Math.min(date.setDate(date.getDate() + 1), bookingViewToTs) + this.#offset;\n\n\t\tconst dateFrom = new Date(dateFromTs);\n\t\tconst dateTo = new Date(dateToTs);\n\t\tconst to = dateTo.getHours() * 60 + dateTo.getMinutes();\n\n\t\treturn {\n\t\t\tfrom: dateFrom.getHours() * 60 + dateFrom.getMinutes(),\n\t\t\tto: to === 0 ? 60 * 24 : to,\n\t\t\tid: booking.id,\n\t\t};\n\t}\n\n\t#subtractRanges(range, bookingRanges): Range[]\n\t{\n\t\tlet remainingRanges = [{ ...range }];\n\n\t\tbookingRanges.forEach((bookingRange) => {\n\t\t\tremainingRanges = remainingRanges.flatMap((remainingRange) => {\n\t\t\t\tif (this.#rangesOverlap(remainingRange, bookingRange))\n\t\t\t\t{\n\t\t\t\t\tconst parts = [];\n\t\t\t\t\tif (remainingRange.from < bookingRange.from)\n\t\t\t\t\t{\n\t\t\t\t\t\tparts.push({\n\t\t\t\t\t\t\tfrom: remainingRange.from,\n\t\t\t\t\t\t\tto: bookingRange.from,\n\t\t\t\t\t\t\tid: remainingRange.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (remainingRange.to > bookingRange.to)\n\t\t\t\t\t{\n\t\t\t\t\t\tparts.push({\n\t\t\t\t\t\t\tfrom: bookingRange.to,\n\t\t\t\t\t\t\tto: remainingRange.to,\n\t\t\t\t\t\t\tid: remainingRange.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (parts.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn parts;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [remainingRange];\n\t\t\t});\n\t\t});\n\n\t\treturn remainingRanges;\n\t}\n\n\t#rangesOverlap(range1, range2): boolean\n\t{\n\t\treturn range1.from < range2.to && range2.from < range1.to;\n\t}\n\n\tfilterSlotRanges(slotRanges: { from: number, to: number }[]): { from: number, to: number }[]\n\t{\n\t\treturn slotRanges\n\t\t\t.map(({ from, to }) => ({ from, to }))\n\t\t\t.sort((a, b) => a.from - b.from)\n\t\t\t.reduce((acc, { from, to }) => {\n\t\t\t\tconst last = acc.length - 1;\n\t\t\t\tif (acc[last] && acc[last].to >= from)\n\t\t\t\t{\n\t\t\t\t\tif (acc[last].to <= to)\n\t\t\t\t\t{\n\t\t\t\t\t\tacc[last].to = to;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tacc.push({ from, to });\n\t\t\t\t}\n\n\t\t\t\treturn acc;\n\t\t\t}, [])\n\t\t\t.filter(({ from, to }) => to - from > 0);\n\t}\n\n\t#getResource(resourceId: number): ResourceModel\n\t{\n\t\treturn Core.getStore().getters[`${Model.Resources}/getById`](resourceId);\n\t}\n\n\t#getOverbookingMap(): OverbookingMap\n\t{\n\t\treturn Core.getStore().getters[`${Model.Bookings}/overbookingMap`];\n\t}\n}\n\nexport const busySlots = new BusySlots();\n"],"names":["getIntersectionBusySlots","busyRanges","resourceId","selectedDateTs","intersectingBookings","intersectingResourcesIds","overbookingMap","intersectionBusySlots","busyRange","fromTs","Date","setMinutes","from","toTs","to","booking","find","intersectingBooking","id","intersectingResourceId","resourcesIds","it","includes","overbookingIntersections","getOverbookingIntersections","overbookingIntersectionBusySlots","map","overbookingIntersection","overbookingFromTs","dateFromTs","overbookingToTs","dateToTs","type","BusySlot","IntersectionOverbooking","filter","item","forEach","overbookingIntersectionBusySlot","push","Intersection","bookingId","overbooking","get","items","flatMap","intersections","minBookingViewMs","BusySlots","loadBusySlots","Core","getStore","dispatch","Model","Interface","resourcesWithIntersections","Object","keys","key","Number","filterSlotRanges","slotRanges","sort","a","b","reduce","acc","last","length","getters","Bookings","DateFormat","WeekDays","getDay","draggedIds","notDraggedIds","selectedResourceIds","Set","values","flat","dateTs","loadedResourcesIds","resourcesDateCache","getIdsByDateTs","idsToLoad","has","resourceDialogService","loadByIds","resource","bookingRanges","SlotRanges","applyTimezone","slotRange","weekDays","freeRanges","minutes","index","chunkIndex","Math","floor","OffHours","notCurrentResource","isNotDragged","intersectingBookingRanges","ir","br","intersectingRange","date","max","getTime","bookingViewToTs","min","setDate","getDate","dateFrom","dateTo","getHours","getMinutes","range","remainingRanges","bookingRange","remainingRange","parts","range1","range2","Resources","busySlots"],"mappings":"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"}