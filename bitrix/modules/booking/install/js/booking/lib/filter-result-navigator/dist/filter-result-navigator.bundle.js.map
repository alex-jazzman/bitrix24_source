{"version":3,"file":"filter-result-navigator.bundle.js","sources":["../src/filter-result-navigator.js","../src/deleting-resource-filter-result-count-actualizer.js"],"sourcesContent":["import { Core } from 'booking.core';\nimport { Model } from 'booking.const';\nimport { calendarService } from 'booking.provider.service.calendar-service';\n\nconst DAY_MS = 1000 * 60 * 60 * 24;\n\nclass FilterResultNavigator\n{\n\tgetOptimalFilterDateTs(inFuture = false): Promise<number>\n\t{\n\t\tconst $store = Core.getStore();\n\n\t\tconst count = $store.getters[`${Model.Filter}/datesCount`]?.count ?? 0;\n\t\tconst maxDate = $store.getters[`${Model.Filter}/datesCount`]?.maxDate;\n\t\tconst minDate = $store.getters[`${Model.Filter}/datesCount`]?.minDate;\n\t\tconst selectedDateTs: number = $store.getters[`${Model.Interface}/selectedDateTs`];\n\n\t\tif (count === 0)\n\t\t{\n\t\t\treturn selectedDateTs;\n\t\t}\n\n\t\tif (maxDate !== null && (this.#getDateTs(maxDate) > selectedDateTs || inFuture))\n\t\t{\n\t\t\treturn this.getNextFilterDateTs((inFuture ? this.#getTodayTs() : selectedDateTs) - DAY_MS, inFuture);\n\t\t}\n\n\t\tif (minDate !== null && this.#getDateTs(minDate) < selectedDateTs)\n\t\t{\n\t\t\treturn this.getPreviousFilterDateTs(selectedDateTs + DAY_MS);\n\t\t}\n\n\t\treturn selectedDateTs;\n\t}\n\n\tasync getPreviousFilterDateTs(startingDateTs: ?number): Promise<number | null>\n\t{\n\t\tconst $store = Core.getStore();\n\n\t\tconst minDate = $store.getters[`${Model.Filter}/datesCount`]?.minDate;\n\t\tif (minDate === null)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\tconst minDateTs = this.#getDateTs(minDate);\n\t\tconst selectedDateTs = startingDateTs || $store.getters[`${Model.Interface}/selectedDateTs`];\n\n\t\tif (selectedDateTs <= minDateTs)\n\t\t{\n\t\t\treturn minDateTs;\n\t\t}\n\n\t\tconst maxDateTs = this.#getDateTs($store.getters[`${Model.Filter}/datesCount`]?.maxDate);\n\t\tif (selectedDateTs > maxDateTs)\n\t\t{\n\t\t\treturn maxDateTs;\n\t\t}\n\n\t\tconst previousFilterDate = this.#findPreviousDate(selectedDateTs);\n\t\tif (previousFilterDate)\n\t\t{\n\t\t\treturn previousFilterDate;\n\t\t}\n\n\t\tconst previousDate = new Date(selectedDateTs - DAY_MS);\n\n\t\tawait this.#loadNextFilterDates(previousDate.getTime(), minDateTs);\n\n\t\treturn this.#findPreviousDate(selectedDateTs);\n\t}\n\n\tasync getNextFilterDateTs(startingDateTs: ?number, inFuture = false): Promise<number | null>\n\t{\n\t\tconst $store = Core.getStore();\n\n\t\tconst maxDate = $store.getters[`${Model.Filter}/datesCount`]?.maxDate;\n\t\tif (maxDate === null)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\tconst selectedDateTs: number = startingDateTs || $store.getters[`${Model.Interface}/selectedDateTs`];\n\n\t\tconst maxDateTs = this.#getDateTs(maxDate);\n\t\tif (selectedDateTs >= maxDateTs)\n\t\t{\n\t\t\treturn maxDateTs;\n\t\t}\n\n\t\tconst minDateTs = this.#getDateTs($store.getters[`${Model.Filter}/datesCount`]?.minDate);\n\t\tif (selectedDateTs < minDateTs)\n\t\t{\n\t\t\treturn minDateTs;\n\t\t}\n\n\t\tconst nextFilterDate = this.#findNextDate(selectedDateTs, inFuture);\n\t\tif (nextFilterDate)\n\t\t{\n\t\t\treturn nextFilterDate;\n\t\t}\n\n\t\tconst nextDate = new Date(selectedDateTs + DAY_MS); // + (inFuture ? 0 : DAY_MS));\n\n\t\tawait this.#loadNextFilterDates(nextDate.getTime(), maxDateTs);\n\n\t\treturn this.#findNextDate(selectedDateTs);\n\t}\n\n\t#getTodayTs(): number\n\t{\n\t\tconst today = new Date();\n\n\t\treturn Math.trunc(today.getTime() / 1000) * 1000;\n\t}\n\n\t#getDateTs(date: Date | string | number): number\n\t{\n\t\tconst d = new Date(date);\n\t\td.setHours(0, 0, 0, 0);\n\n\t\treturn d.getTime();\n\t}\n\n\tasync #loadNextFilterDates(selectedDateTs: number, limitDateTs: number): Promise<void>\n\t{\n\t\tconst filterFields = Core.getStore().getters[`${Model.Filter}/fields`];\n\n\t\tawait calendarService.loadNextFilterMarks(filterFields, selectedDateTs, limitDateTs);\n\t}\n\n\t#findPreviousDate(selectedDateTs: number): number | undefined\n\t{\n\t\treturn Core.getStore().state[Model.Filter].filterDates.findLast((dateTs) => dateTs < selectedDateTs);\n\t}\n\n\t#findNextDate(viewDateTs: number, inFuture = false): number | undefined\n\t{\n\t\tconst filterDates = [...Core.getStore().state[Model.Filter].filterDates].sort();\n\n\t\tif (inFuture)\n\t\t{\n\t\t\treturn filterDates.find((dateTs) => dateTs >= viewDateTs);\n\t\t}\n\n\t\treturn filterDates.find((dateTs) => dateTs > viewDateTs);\n\t}\n}\n\nexport const filterResultNavigator = new FilterResultNavigator();\n","import { Event, Type } from 'main.core';\n\nimport { Core } from 'booking.core';\nimport { EventName, Model } from 'booking.const';\nimport { RemoveResource } from 'booking.lib.remove-resource';\nimport { calendarService } from 'booking.provider.service.calendar-service';\nimport type { BookingModel } from 'booking.model.bookings';\n\nclass DeletingResourceFilterResultCountActualizer\n{\n\tsubscribe(): void\n\t{\n\t\tEvent.EventEmitter.subscribe(EventName.CreateBookings, this.afterCreateBooking);\n\t\tEvent.EventEmitter.subscribe(EventName.DeleteBooking, this.afterDeleteBooking);\n\t\tEvent.EventEmitter.subscribe(EventName.UpdateBooking, this.afterUpdateBooking);\n\t}\n\n\tunsubscribe(): void\n\t{\n\t\tEvent.EventEmitter.unsubscribe(EventName.CreateBookings, this.afterCreateBooking);\n\t\tEvent.EventEmitter.unsubscribe(EventName.DeleteBooking, this.afterDeleteBooking);\n\t\tEvent.EventEmitter.unsubscribe(EventName.UpdateBooking, this.afterUpdateBooking);\n\t}\n\n\tafterCreateBooking({ data }): void\n\t{\n\t\tconst id = Core.getStore().getters[`${Model.Filter}/deletingResource`]?.id;\n\t\tconst bookings = data.bookings || [];\n\n\t\tif (!Type.isArray(bookings) || bookings.every(({ resourcesIds }) => !resourcesIds.includes(id)))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvoid updateFilterResultCounter();\n\n\t\tconst selectedDateTs = Core.getStore().getters[`${Model.Interface}/selectedDateTs`];\n\t\tconst resourceBookings = Core.getStore().getters[`${Model.Bookings}/getByDateAndResources`](\n\t\t\tselectedDateTs,\n\t\t\t[id],\n\t\t);\n\t\tif (resourceBookings.length === 1)\n\t\t{\n\t\t\tvoid updateFilterMarks();\n\t\t}\n\t}\n\n\tasync afterDeleteBooking({ data }): void\n\t{\n\t\tconst id = Core.getStore().getters[`${Model.Filter}/deletingResource`]?.id;\n\t\tconst resourcesIds: number[] = data.booking.resourcesIds || [];\n\n\t\tif (!resourcesIds.includes(id))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tawait updateFilterResultCounter();\n\n\t\tif (getResourceBookings(new Date(data.booking.dateFromTs)).length === 0)\n\t\t{\n\t\t\tvoid updateFilterMarks();\n\t\t}\n\n\t\tvoid tryRemoveResourceAgain(id);\n\t}\n\n\tasync afterUpdateBooking({ data }): void\n\t{\n\t\tconst oldResourcesIds = data.oldBooking.resourcesIds;\n\t\tconst newResourcesIds = data.newBooking.resourcesIds;\n\t\tconst id = Core.getStore().getters[`${Model.Filter}/deletingResource`]?.id;\n\n\t\tif (\n\t\t\t(oldResourcesIds.includes(id) && newResourcesIds.includes(id))\n\t\t\t|| (!oldResourcesIds.includes(id) && !newResourcesIds.includes(id))\n\t\t)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tawait updateFilterResultCounter();\n\n\t\tif (getResourceBookings().length < 2)\n\t\t{\n\t\t\tvoid updateFilterMarks();\n\t\t}\n\n\t\tvoid tryRemoveResourceAgain(id);\n\t}\n}\n\nfunction getResourceBookings(dateTs: ?number): BookingModel[]\n{\n\tconst selectedDateTs = dateTs || Core.getStore().getters[`${Model.Interface}/selectedDateTs`];\n\tconst resourceId = Core.getStore().getters[`${Model.Filter}/deletingResource`]?.id;\n\n\treturn Core.getStore().getters[`${Model.Bookings}/getByDateAndResources`](selectedDateTs, [resourceId]);\n}\n\nasync function updateFilterResultCounter(): Promise<void>\n{\n\tconst $store = Core.getStore();\n\tconst fields = $store.getters[`${Model.Filter}/fields`];\n\n\tcalendarService.clearDataCountCache();\n\tawait calendarService.loadBookingsDateCount(fields, true);\n}\n\nasync function updateFilterMarks(): void\n{\n\tconst $store = Core.getStore();\n\tconst fields = $store.getters[`${Model.Filter}/fields`];\n\n\tawait $store.dispatch(`${Model.Filter}/setFilteredMarks`, []);\n\n\tcalendarService.clearFilterCache();\n\tawait calendarService.loadFilterMarks(fields);\n}\n\nasync function tryRemoveResourceAgain(resourceId: number): Promise<void>\n{\n\tif (Core.getStore().getters[`${Model.Filter}/datesCount`]?.count > 0)\n\t{\n\t\treturn;\n\t}\n\n\tawait (new RemoveResource(resourceId)).runAfterMoveBookings();\n}\n\nexport const deletingResourceFilterResultCountActualizer = new DeletingResourceFilterResultCountActualizer();\n"],"names":["today","Date","Math","trunc","getTime","date","d","setHours","async","selectedDateTs","limitDateTs","filterFields","Core","getStore","getters","Model","Filter","calendarService","loadNextFilterMarks","state","filterDates","findLast","dateTs","viewDateTs","inFuture","sort","find","filterResultNavigator","[object Object]","Object","value","getOptimalFilterDateTs","$store","count","_$store$getters","maxDate","_$store$getters2","minDate","_$store$getters3","Interface","babelHelpers","this","getNextFilterDateTs","getPreviousFilterDateTs","startingDateTs","_$store$getters4","minDateTs","maxDateTs","_$store$getters5","previousFilterDate","previousDate","_$store$getters6","_$store$getters7","nextFilterDate","nextDate","getResourceBookings","resourceId","_Core$getStore$getter4","id","Bookings","updateFilterResultCounter","fields","clearDataCountCache","loadBookingsDateCount","updateFilterMarks","dispatch","clearFilterCache","loadFilterMarks","tryRemoveResourceAgain","_Core$getStore$getter5","RemoveResource","runAfterMoveBookings","deletingResourceFilterResultCountActualizer","subscribe","Event","EventEmitter","EventName","CreateBookings","afterCreateBooking","DeleteBooking","afterDeleteBooking","UpdateBooking","afterUpdateBooking","unsubscribe","data","_Core$getStore$getter","bookings","Type","isArray","every","resourcesIds","includes","length","_Core$getStore$getter2","booking","dateFromTs","oldResourcesIds","oldBooking","newResourcesIds","newBooking","_Core$getStore$getter3"],"mappings":"2FAImC,uSA+IlC,aApCC,MAAMA,EAAQ,IAAIC,KAElB,OAA4C,IAArCC,KAAKC,MAAMH,EAAMI,UAAY,KACpC,WAEUC,GAEV,MAAMC,EAAI,IAAIL,KAAKI,GAGnB,OAFAC,EAAEC,SAAS,EAAG,EAAG,EAAG,GAEbD,EAAEF,UACTI,iBAE0BC,EAAwBC,GAElD,MAAMC,EAAeC,OAAKC,WAAWC,QAAWC,QAAMC,OAAR,iBAExCC,kBAAgBC,oBAAoBP,EAAcF,EAAgBC,GACxE,WAEiBD,GAEjB,OAAOG,OAAKC,WAAWM,MAAMJ,QAAMC,QAAQI,YAAYC,SAAUC,GAAWA,EAASb,GACrF,WAEac,EAAoBC,GAAW,GAE5C,MAAMJ,EAAc,IAAIR,OAAKC,WAAWM,MAAMJ,QAAMC,QAAQI,aAAaK,OAEzE,OAAID,EAEIJ,EAAYM,KAAMJ,GAAWA,GAAUC,GAGxCH,EAAYM,KAAMJ,GAAWA,EAASC,SAIlCI,EAAwB,IA/IrC,MACAC,cAAAC,8BAAAC,UAAAD,8BAAAC,UAAAD,8BAAAC,UAAAD,8BAAAC,UAAAD,8BAAAC,UACCC,uBAAuBP,GAAW,GAClC,YACC,MAAMQ,EAASpB,OAAKC,WAEdoB,oBAAQD,EAAOlB,QAAWC,QAAMC,OAAR,uBAAhBkB,EAA8CD,SAAS,EAC/DE,WAAUH,EAAOlB,QAAWC,QAAMC,OAAR,uBAAhBoB,EAA8CD,QACxDE,WAAUL,EAAOlB,QAAWC,QAAMC,OAAR,uBAAhBsB,EAA8CD,QACxD5B,EAAyBuB,EAAOlB,QAAWC,QAAMwB,UAAR,mBAE/C,OAAc,IAAVN,EAEIxB,EAGQ,OAAZ0B,IAAqBK,mDAAgBL,GAAW1B,GAAkBe,GAE9DiB,KAAKC,qBAAqBlB,0CAAWiB,aAAqBhC,GApBrD,MAoB+Ee,GAG5E,OAAZa,GAAoBG,mDAAgBH,GAAW5B,EAE3CgC,KAAKE,wBAAwBlC,EAzBxB,OA4BNA,EAGRmB,8BAA8BgB,GAC9B,QACC,MAAMZ,EAASpB,OAAKC,WAEdwB,WAAUL,EAAOlB,QAAWC,QAAMC,OAAR,uBAAhB6B,EAA8CR,QAC9D,GAAgB,OAAZA,EAEH,OAAO,KAGR,MAAMS,0CAAYL,WAAgBJ,GAC5B5B,EAAiBmC,GAAkBZ,EAAOlB,QAAWC,QAAMwB,UAAR,mBAEzD,GAAI9B,GAAkBqC,EAErB,OAAOA,EAGR,MAAMC,0CAAYN,oBAAgBT,EAAOlB,QAAWC,QAAMC,OAAR,uBAAhBgC,EAA8Cb,SAChF,GAAI1B,EAAiBsC,EAEpB,OAAOA,EAGR,MAAME,0CAAqBR,WAAuBhC,GAClD,GAAIwC,EAEH,OAAOA,EAGR,MAAMC,EAAe,IAAIjD,KAAKQ,EA7DjB,OAiEb,qDAFMgC,WAA0BS,EAAa9C,UAAW0C,2CAEjDL,WAAuBhC,GAG/BmB,0BAA0BgB,EAAyBpB,GAAW,GAC9D,QACC,MAAMQ,EAASpB,OAAKC,WAEdsB,WAAUH,EAAOlB,QAAWC,QAAMC,OAAR,uBAAhBmC,EAA8ChB,QAC9D,GAAgB,OAAZA,EAEH,OAAO,KAGR,MAAM1B,EAAyBmC,GAAkBZ,EAAOlB,QAAWC,QAAMwB,UAAR,mBAE3DQ,0CAAYN,WAAgBN,GAClC,GAAI1B,GAAkBsC,EAErB,OAAOA,EAGR,MAAMD,0CAAYL,oBAAgBT,EAAOlB,QAAWC,QAAMC,OAAR,uBAAhBoC,EAA8Cf,SAChF,GAAI5B,EAAiBqC,EAEpB,OAAOA,EAGR,MAAMO,0CAAiBZ,WAAmBhC,EAAgBe,GAC1D,GAAI6B,EAEH,OAAOA,EAGR,MAAMC,EAAW,IAAIrD,KAAKQ,EAlGb,OAsGb,qDAFMgC,WAA0Ba,EAASlD,UAAW2C,2CAE7CN,WAAmBhC,KCd5B,SAAS8C,EAAoBjC,GAC7B,MACC,MAAMb,EAAiBa,GAAUV,OAAKC,WAAWC,QAAWC,QAAMwB,UAAR,mBACpDiB,WAAa5C,OAAKC,WAAWC,QAAWC,QAAMC,OAAR,6BAAzByC,EAA6DC,GAEhF,OAAO9C,OAAKC,WAAWC,QAAWC,QAAM4C,SAAR,0BAA0ClD,EAAgB,CAAC+C,IAG5FhD,eAAeoD,IAEd,MACMC,EADSjD,OAAKC,WACEC,QAAWC,QAAMC,OAAR,WAE/BC,kBAAgB6C,4BACV7C,kBAAgB8C,sBAAsBF,GAAQ,GAGrDrD,eAAewD,IAEd,MAAMhC,EAASpB,OAAKC,WACdgD,EAAS7B,EAAOlB,QAAWC,QAAMC,OAAR,iBAEzBgB,EAAOiC,SAAYlD,QAAMC,OAAR,oBAAmC,IAE1DC,kBAAgBiD,yBACVjD,kBAAgBkD,gBAAgBN,GAGvCrD,eAAe4D,EAAuBZ,GACtC,gBACK5C,OAAKC,WAAWC,QAAWC,QAAMC,OAAR,uBAAzBqD,EAAuDpC,OAAQ,SAK5D,IAAIqC,iBAAed,GAAae,6BAG3BC,EAA8C,IA1H3D,MAECC,YAECC,QAAMC,aAAaF,UAAUG,YAAUC,eAAgBpC,KAAKqC,oBAC5DJ,QAAMC,aAAaF,UAAUG,YAAUG,cAAetC,KAAKuC,oBAC3DN,QAAMC,aAAaF,UAAUG,YAAUK,cAAexC,KAAKyC,oBAG5DC,cAECT,QAAMC,aAAaQ,YAAYP,YAAUC,eAAgBpC,KAAKqC,oBAC9DJ,QAAMC,aAAaQ,YAAYP,YAAUG,cAAetC,KAAKuC,oBAC7DN,QAAMC,aAAaQ,YAAYP,YAAUK,cAAexC,KAAKyC,oBAG9DJ,oBAAmBM,KAAEA,IACrB,MACC,MAAM1B,WAAK9C,OAAKC,WAAWC,QAAWC,QAAMC,OAAR,6BAAzBqE,EAA6D3B,GAClE4B,EAAWF,EAAKE,UAAY,GAElC,IAAKC,OAAKC,QAAQF,IAAaA,EAASG,MAAM,EAAGC,aAAAA,MAAoBA,EAAaC,SAASjC,IAE1F,OAGIE,IAEL,MAAMnD,EAAiBG,OAAKC,WAAWC,QAAWC,QAAMwB,UAAR,mBAKhB,IAJP3B,OAAKC,WAAWC,QAAWC,QAAM4C,SAAR,0BACjDlD,EACA,CAACiD,IAEmBkC,QAEf5B,IAIPpC,0BAAyBwD,KAAEA,IAC3B,MACC,MAAM1B,WAAK9C,OAAKC,WAAWC,QAAWC,QAAMC,OAAR,6BAAzB6E,EAA6DnC,IACzC0B,EAAKU,QAAQJ,cAAgB,IAE1CC,SAASjC,WAKrBE,IAEgE,IAAlEL,EAAoB,IAAItD,KAAKmF,EAAKU,QAAQC,aAAaH,QAErD5B,IAGDI,EAAuBV,IAG7B9B,0BAAyBwD,KAAEA,IAC3B,MACC,MAAMY,EAAkBZ,EAAKa,WAAWP,aAClCQ,EAAkBd,EAAKe,WAAWT,aAClChC,WAAK9C,OAAKC,WAAWC,QAAWC,QAAMC,OAAR,6BAAzBoF,EAA6D1C,GAGtEsC,EAAgBL,SAASjC,IAAOwC,EAAgBP,SAASjC,KACrDsC,EAAgBL,SAASjC,KAAQwC,EAAgBP,SAASjC,WAM1DE,IAEFL,IAAsBqC,OAAS,GAE7B5B,IAGDI,EAAuBV"}