this.BX=this.BX||{};this.BX.Booking=this.BX.Booking||{};this.BX.Booking.Provider=this.BX.Booking.Provider||{};(function(o,s,e,t){"use strict";class i{async getDocData(o){return Promise.resolve()}async getMessageData(o){const e=await t.apiClient.post("MessageStatus.get",{bookingId:o});await Promise.all([this.$store.dispatch(`${s.Model.MessageStatus}/upsert`,{bookingId:o,status:e})])}async sendMessage(o,e){var i;const n=await t.apiClient.post("Message.send",{bookingId:o,notificationType:e});const a=this.$store.getters[`${s.Model.Bookings}/getById`](o);void this.$store.dispatch(`${s.Model.Bookings}/update`,{id:a.id,booking:{...a,messages:[...(i=a.messages)!=null?i:[],n]}})}get $store(){return e.Core.getStore()}}const n=new i;o.bookingActionsService=n})(this.BX.Booking.Provider.Service=this.BX.Booking.Provider.Service||{},BX.Booking.Const,BX.Booking,BX.Booking.Lib);
//# sourceMappingURL=booking-actions-service.bundle.map.js