{"version":3,"file":"client-service.bundle.js","sources":["../src/mappers.js","../src/client-service.js","../src/index.js"],"sourcesContent":["import { Type } from 'main.core';\nimport type { ClientModel } from 'booking.model.clients';\nimport type { ClientDto } from './types';\n\nexport function mapDtoToModel(clientDto: ClientDto): ClientModel | null\n{\n\tif (!Type.isArrayFilled(Object.values(clientDto.data)))\n\t{\n\t\treturn null;\n\t}\n\n\treturn {\n\t\tid: clientDto.id,\n\t\tname: clientDto.data.name,\n\t\timage: clientDto.data.image,\n\t\ttype: clientDto.type,\n\t\tphones: clientDto.data.phones,\n\t\temails: clientDto.data.emails,\n\t\tisReturning: clientDto.isReturning,\n\t};\n}\n","import { Tag, Type } from 'main.core';\nimport { CrmEntity, Module } from 'booking.const';\nimport { Core } from 'booking.core';\nimport type { ClientData, ClientModel } from 'booking.model.clients';\n\ntype RestMethods = {\n\t[methodName: string]: { method: string, params: any } | [string, any],\n};\n\nconst VALUE_TYPE = 'WORK';\n\nconst MethodName = Object.freeze({\n\tAddFormattedName: 'crm.controller.integration.booking.contact.addFormattedName',\n\tParseFormattedName: 'crm.controller.integration.booking.contact.parseFormattedName',\n\tCompanyAdd: 'crm.company.add',\n\tContactAdd: 'crm.contact.add',\n\tCompanyGet: 'crm.company.get',\n\tContactGet: 'crm.contact.get',\n\tGetCompanyContacts: 'crm.company.contact.items.get',\n\tCompanyUpdate: 'crm.company.update',\n\tContactUpdate: 'crm.contact.update',\n\tDealContactGet: 'crm.deal.contact.items.get',\n});\n\nconst RequestKey = Object.freeze({\n\tAddFormattedName: 'add_formatted_name',\n\tParseName: 'parse_name_#id#',\n\tCompanyAdd: 'company_add_#id#',\n\tContactAdd: 'contact_add_#id#',\n\tCompanyGet: 'company_get_#id#',\n\tContactGet: 'contact_get_#id#',\n\tGetCompanyContacts: 'get_company_contacts',\n\tCompanyUpdate: 'company_update_#id#',\n\tContactUpdate: 'contact_update_#id#',\n\tDealContactGet: 'deal_contact_get_#id#',\n});\n\nclass ClientService\n{\n\tasync saveMany(clients: ClientModel[]): Promise<{clients: ClientData[], error: Error}>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst data = await this.#requestSaveMany(clients);\n\n\t\t\tawait Core.getStore().dispatch('clients/upsertMany', data);\n\n\t\t\treturn {\n\t\t\t\tclients: data.map(({ id, type }: ClientModel): ClientData => ({ id, type })),\n\t\t\t};\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('ClientService: saveMany error', error);\n\n\t\t\treturn { error };\n\t\t}\n\t}\n\n\tasync getLinkedContactByCompany(companyData: ClientData): Promise<ClientModel | undefined>\n\t{\n\t\tconst company = Core.getStore().getters['clients/getByClientData'](companyData);\n\n\t\tcompany.contactId ??= await this.#requestLinkedContactId(companyData);\n\n\t\tawait Core.getStore().dispatch('clients/update', { id: company.id, client: company });\n\n\t\treturn this.getContactById(company.contactId);\n\t}\n\n\tasync getContactById(id: number): Promise<ClientModel | undefined>\n\t{\n\t\tconst contact = Core.getStore().getters['clients/getByClientData']({\n\t\t\tid,\n\t\t\ttype: {\n\t\t\t\tmodule: Module.Crm,\n\t\t\t\tcode: CrmEntity.Contact,\n\t\t\t},\n\t\t});\n\n\t\treturn contact || this.#getEntityById({\n\t\t\tid,\n\t\t\tmethodName: MethodName.ContactGet,\n\t\t\trequestKey: RequestKey.ContactGet,\n\t\t\tentityCode: CrmEntity.Contact,\n\t\t});\n\t}\n\n\tasync getCompanyById(id: number): Promise<ClientModel | undefined>\n\t{\n\t\treturn this.#getEntityById({\n\t\t\tid,\n\t\t\tmethodName: MethodName.CompanyGet,\n\t\t\trequestKey: RequestKey.CompanyGet,\n\t\t\tentityCode: CrmEntity.Company,\n\t\t});\n\t}\n\n\tasync getLinkedContactByDeal(id: number): Promise<ClientModel | undefined>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst primaryContactId = await this.#getPrimaryContactIdByDeal(id);\n\n\t\t\treturn primaryContactId ? this.getContactById(primaryContactId) : undefined;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('ClientService: getLinkedContactByDeal error', error);\n\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tasync #requestSaveMany(clients: ClientModel[]): Promise<ClientModel[]>\n\t{\n\t\tconst {\n\t\t\tcompanies,\n\t\t\tcompaniesToAdd,\n\t\t\tcompaniesToUpdate,\n\t\t\tcontactsToAdd,\n\t\t\tcontactsToUpdate,\n\t\t} = this.#categorizeClients(clients);\n\n\t\tconst clientsToRequest = [...companiesToAdd, ...companiesToUpdate, ...contactsToAdd, ...contactsToUpdate];\n\n\t\tclientsToRequest.forEach((client, index) => {\n\t\t\tclient.index = index;\n\t\t});\n\n\t\tconst restMethods = {\n\t\t\t...this.#getParseNameMethods([...contactsToAdd, ...contactsToUpdate]),\n\t\t\t...this.#getCompanyAddMethods(companiesToAdd),\n\t\t\t...this.#getContactAddMethods(contactsToAdd, companies),\n\t\t\t...this.#getCompanyGetMethods(companiesToUpdate),\n\t\t\t...this.#getCompanyUpdateMethods(companiesToUpdate),\n\t\t\t...this.#getContactGetMethods(contactsToUpdate),\n\t\t\t...this.#getContactUpdateMethods(contactsToUpdate),\n\t\t};\n\n\t\tconst result = await this.#executeBatchRequest(restMethods);\n\t\tthis.#handleErrors(result);\n\t\tthis.#updateClientIds(companiesToAdd, contactsToAdd, result);\n\n\t\treturn clients;\n\t}\n\n\t#categorizeClients(clients: ClientModel[])\n\t{\n\t\tconst companies = clients.filter((client: ClientModel) => client.type.code === CrmEntity.Company);\n\t\tconst contacts = clients.filter((client: ClientModel) => client.type.code === CrmEntity.Contact);\n\n\t\treturn {\n\t\t\tcompanies,\n\t\t\tcontacts,\n\t\t\tcompaniesToAdd: companies.filter((client: ClientModel) => !client.id),\n\t\t\tcompaniesToUpdate: companies.filter(this.#isClientToUpdate.bind(this)),\n\t\t\tcontactsToAdd: contacts.filter((client: ClientModel) => !client.id),\n\t\t\tcontactsToUpdate: contacts.filter(this.#isClientToUpdate.bind(this)),\n\t\t};\n\t}\n\n\tasync #executeBatchRequest(restMethods: RestMethods): Promise<any>\n\t{\n\t\treturn new Promise((resolve) => {\n\t\t\tif (Object.keys(restMethods).length === 0)\n\t\t\t{\n\t\t\t\tresolve([]);\n\t\t\t}\n\n\t\t\tBX.rest.callBatch(restMethods, (batchResult) => resolve(batchResult));\n\t\t});\n\t}\n\n\t#handleErrors(result: any)\n\t{\n\t\tconst errors = Object.values(result)\n\t\t\t.map((ajaxResult) => ajaxResult.answer.error?.error_description)\n\t\t\t.filter((error) => error)\n\t\t;\n\n\t\tif (Type.isArrayFilled(errors))\n\t\t{\n\t\t\tthrow new Error(Tag.render`<span>${errors[0]}</span>`.textContent);\n\t\t}\n\t}\n\n\t#updateClientIds(companiesToAdd: ClientModel[], contactsToAdd: ClientModel[], result: any)\n\t{\n\t\tcompaniesToAdd.forEach((client: ClientModel) => {\n\t\t\tclient.id = result[this.#getRequestKey(RequestKey.CompanyAdd, client.index)].data();\n\t\t});\n\n\t\tcontactsToAdd.forEach((client: ClientModel) => {\n\t\t\tclient.id = result[this.#getRequestKey(RequestKey.ContactAdd, client.index)].data();\n\t\t});\n\t}\n\n\t#isClientToUpdate(client: ClientModel): boolean\n\t{\n\t\tif (!client.id)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tconst currentClient = Core.getStore().getters['clients/getByClientData'](client);\n\n\t\treturn client.name !== currentClient.name\n\t\t\t|| client.phones[0] !== currentClient.phones[0]\n\t\t\t|| client.emails[0] !== currentClient.emails[0]\n\t\t;\n\t}\n\n\t#getParseNameMethods(contacts: ClientModel[]): RestMethods\n\t{\n\t\treturn contacts.reduce((methods, client) => {\n\t\t\treturn {\n\t\t\t\t...methods,\n\t\t\t\t[this.#getRequestKey(RequestKey.ParseName, client.index)]: {\n\t\t\t\t\tmethod: MethodName.ParseFormattedName,\n\t\t\t\t\tparams: { fields: { FORMATTED_NAME: client.name } },\n\t\t\t\t},\n\t\t\t};\n\t\t}, {});\n\t}\n\n\t#getCompanyAddMethods(companiesToAdd: ClientModel[]): RestMethods\n\t{\n\t\treturn companiesToAdd.reduce((methods: {}, client: ClientModel) => {\n\t\t\treturn {\n\t\t\t\t...methods,\n\t\t\t\t[this.#getRequestKey(RequestKey.CompanyAdd, client.index)]: {\n\t\t\t\t\tmethod: MethodName.CompanyAdd,\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tTITLE: client.name,\n\t\t\t\t\t\t\tPHONE: client.phones.map((VALUE) => ({ VALUE, VALUE_TYPE })),\n\t\t\t\t\t\t\tEMAIL: client.emails.map((VALUE) => ({ VALUE, VALUE_TYPE })),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tparams: { REGISTER_SONET_EVENT: 'Y' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t}, {});\n\t}\n\n\t#getContactAddMethods(contactsToAdd: ClientModel[], companies: ClientModel[]): RestMethods\n\t{\n\t\treturn contactsToAdd.reduce((methods, client) => {\n\t\t\tconst COMPANY_ID = companies[0]?.id ?? `$result[${this.#getRequestKey(RequestKey.CompanyAdd)}]`;\n\n\t\t\treturn {\n\t\t\t\t...methods,\n\t\t\t\t[this.#getRequestKey(RequestKey.ContactAdd, client.index)]: {\n\t\t\t\t\tmethod: MethodName.ContactAdd,\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tCOMPANY_ID: companies.length > 0 ? COMPANY_ID : undefined,\n\t\t\t\t\t\t\t...this.#prepareContactNameFields(client.index),\n\t\t\t\t\t\t\tPHONE: client.phones.map((VALUE: string) => ({ VALUE, VALUE_TYPE })),\n\t\t\t\t\t\t\tEMAIL: client.emails.map((VALUE: string) => ({ VALUE, VALUE_TYPE })),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tparams: { REGISTER_SONET_EVENT: 'Y' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t}, {});\n\t}\n\n\t#getCompanyGetMethods(companies: ClientModel[]): RestMethods\n\t{\n\t\treturn companies.reduce((methods, { id }) => ({\n\t\t\t...methods,\n\t\t\t[this.#getRequestKey(RequestKey.CompanyGet, id)]: [MethodName.CompanyGet, { id }],\n\t\t}), {});\n\t}\n\n\t#getContactGetMethods(contacts: ClientModel[]): RestMethods\n\t{\n\t\treturn contacts.reduce((methods, { id }) => ({\n\t\t\t...methods,\n\t\t\t[this.#getRequestKey(RequestKey.ContactGet, id)]: [MethodName.ContactGet, { id }],\n\t\t}), {});\n\t}\n\n\t#getCompanyUpdateMethods(companiesToUpdate: ClientModel[]): RestMethods\n\t{\n\t\treturn companiesToUpdate.reduce((methods, client) => ({\n\t\t\t...methods,\n\t\t\t[this.#getRequestKey(RequestKey.CompanyUpdate, client.id)]: {\n\t\t\t\tmethod: MethodName.CompanyUpdate,\n\t\t\t\tparams: {\n\t\t\t\t\tid: client.id,\n\t\t\t\t\tfields: {\n\t\t\t\t\t\tTITLE: client.name,\n\t\t\t\t\t\t...this.#prepareCommunicationsForUpdate(client),\n\t\t\t\t\t},\n\t\t\t\t\tparams: { REGISTER_SONET_EVENT: 'Y' },\n\t\t\t\t},\n\t\t\t},\n\t\t}), {});\n\t}\n\n\t#getContactUpdateMethods(contactsToUpdate: ClientModel[]): RestMethods\n\t{\n\t\treturn contactsToUpdate.reduce((methods, client) => ({\n\t\t\t...methods,\n\t\t\t[this.#getRequestKey(RequestKey.ContactUpdate, client.id)]: {\n\t\t\t\tmethod: MethodName.ContactUpdate,\n\t\t\t\tparams: {\n\t\t\t\t\tid: client.id,\n\t\t\t\t\tfields: {\n\t\t\t\t\t\t...this.#prepareContactNameFields(client.index),\n\t\t\t\t\t\t...this.#prepareCommunicationsForUpdate(client),\n\t\t\t\t\t},\n\t\t\t\t\tparams: { REGISTER_SONET_EVENT: 'Y' },\n\t\t\t\t},\n\t\t\t},\n\t\t}), {});\n\t}\n\n\t#prepareContactNameFields(index: number): Object\n\t{\n\t\treturn {\n\t\t\tNAME: `$result[${this.#getRequestKey(RequestKey.ParseName, index)}][NAME]`,\n\t\t\tSECOND_NAME: `$result[${this.#getRequestKey(RequestKey.ParseName, index)}][SECOND_NAME]`,\n\t\t\tLAST_NAME: `$result[${this.#getRequestKey(RequestKey.ParseName, index)}][LAST_NAME]`,\n\t\t};\n\t}\n\n\t#prepareCommunicationsForUpdate(client: ClientModel): Object\n\t{\n\t\tconst currentClient = Core.getStore().getters['clients/getByClientData'](client);\n\t\tconst requestKey = client.type.code === CrmEntity.Company\n\t\t\t? this.#getRequestKey(RequestKey.CompanyGet, client.id)\n\t\t\t: this.#getRequestKey(RequestKey.ContactGet, client.id)\n\t\t;\n\n\t\tconst PHONE = [{\n\t\t\tID: currentClient.phones[0] ? `$result[${requestKey}][PHONE][0][ID]` : undefined,\n\t\t\tVALUE: client.phones[0],\n\t\t\tVALUE_TYPE,\n\t\t}];\n\n\t\tconst EMAIL = [{\n\t\t\tID: currentClient.emails[0] ? `$result[${requestKey}][EMAIL][0][ID]` : undefined,\n\t\t\tVALUE: client.emails[0],\n\t\t\tVALUE_TYPE,\n\t\t}];\n\n\t\treturn {\n\t\t\tPHONE: client.phones.length > 0 ? PHONE : undefined,\n\t\t\tEMAIL: client.emails.length > 0 ? EMAIL : undefined,\n\t\t};\n\t}\n\n\tasync #requestLinkedContactId(company: ClientData): Promise<number>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst id = company.id;\n\t\t\tconst client = await new Promise((resolve) => {\n\t\t\t\tBX.rest.callBatch({\n\t\t\t\t\t[this.#getRequestKey(RequestKey.GetCompanyContacts)]: [MethodName.GetCompanyContacts, { id }],\n\t\t\t\t\t[this.#getRequestKey(RequestKey.ContactGet)]: {\n\t\t\t\t\t\tmethod: MethodName.ContactGet,\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tid: `$result[${this.#getRequestKey(RequestKey.GetCompanyContacts)}][0][CONTACT_ID]`,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t[this.#getRequestKey(RequestKey.AddFormattedName)]: {\n\t\t\t\t\t\tmethod: MethodName.AddFormattedName,\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tfields: `$result[${this.#getRequestKey(RequestKey.ContactGet)}]`,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}, (result) => {\n\t\t\t\t\tconst data = result[this.#getRequestKey(RequestKey.AddFormattedName)].data();\n\t\t\t\t\tif (!data?.ID)\n\t\t\t\t\t{\n\t\t\t\t\t\tresolve(null);\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tid: Number(data.ID),\n\t\t\t\t\t\tname: data.FORMATTED_NAME,\n\t\t\t\t\t\timage: data.PHOTO?.showUrl,\n\t\t\t\t\t\ttype: {\n\t\t\t\t\t\t\tmodule: Module.Crm,\n\t\t\t\t\t\t\tcode: CrmEntity.Contact,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tphones: data.PHONE?.map(({ VALUE }) => VALUE) ?? [],\n\t\t\t\t\t\temails: data.EMAIL?.map(({ VALUE }) => VALUE) ?? [],\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (client === null)\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tawait Core.getStore().dispatch('clients/upsert', client);\n\n\t\t\treturn client.id;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('ClientService: loadLinkedContactByCompany error', error);\n\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tasync #getEntityById(params = {}): Promise<ClientModel | undefined>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst { id, methodName, requestKey, entityCode } = params;\n\n\t\t\tconst entity = await new Promise((resolve) => {\n\t\t\t\tBX.rest.callBatch({\n\t\t\t\t\t[this.#getRequestKey(requestKey, id)]: {\n\t\t\t\t\t\tmethod: methodName,\n\t\t\t\t\t\tparams: { id },\n\t\t\t\t\t},\n\t\t\t\t\t[this.#getRequestKey(RequestKey.AddFormattedName)]: {\n\t\t\t\t\t\tmethod: MethodName.AddFormattedName,\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tfields: `$result[${this.#getRequestKey(requestKey, id)}]`,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}, (result) => {\n\t\t\t\t\tconst data = result[this.#getRequestKey(RequestKey.AddFormattedName)].data();\n\t\t\t\t\tif (!data?.ID)\n\t\t\t\t\t{\n\t\t\t\t\t\tresolve(null);\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tid: Number(data.ID),\n\t\t\t\t\t\tname: entityCode === CrmEntity.Company ? data.TITLE : data.FORMATTED_NAME,\n\t\t\t\t\t\timage: entityCode === CrmEntity.Company ? data.LOGO?.showUrl : data.PHOTO?.showUrl,\n\t\t\t\t\t\ttype: {\n\t\t\t\t\t\t\tmodule: Module.Crm,\n\t\t\t\t\t\t\tcode: entityCode,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tphones: data.PHONE?.map(({ VALUE }) => VALUE) ?? [],\n\t\t\t\t\t\temails: data.EMAIL?.map(({ VALUE }) => VALUE) ?? [],\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (entity === null)\n\t\t\t{\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tawait Core.getStore().dispatch('clients/upsert', entity);\n\n\t\t\treturn entity;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error(`ClientService: getEntityById error for ${entityCode}`, error);\n\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tasync #getPrimaryContactIdByDeal(dealId: number): Promise<number | null>\n\t{\n\t\treturn new Promise((resolve) => {\n\t\t\tBX.rest.callBatch({\n\t\t\t\t[this.#getRequestKey(RequestKey.DealContactGet, dealId)]: {\n\t\t\t\t\tmethod: MethodName.DealContactGet,\n\t\t\t\t\tparams: { id: dealId },\n\t\t\t\t},\n\t\t\t}, (result) => {\n\t\t\t\tconst data = result[this.#getRequestKey(RequestKey.DealContactGet, dealId)].data();\n\t\t\t\tif (!data)\n\t\t\t\t{\n\t\t\t\t\tresolve(null);\n\t\t\t\t}\n\n\t\t\t\tconst primaryContact = data.find((item) => item.IS_PRIMARY === 'Y');\n\t\t\t\tresolve(primaryContact ? primaryContact.CONTACT_ID : null);\n\t\t\t});\n\t\t});\n\t}\n\n\t#getRequestKey(template: string, id: number = 0): string\n\t{\n\t\treturn template.replace('#id#', id);\n\t}\n}\n\nexport const clientService = new ClientService();\n","import { mapDtoToModel } from './mappers';\n\nexport { clientService } from './client-service';\nexport const ClientMappers = { mapDtoToModel };\nexport type { ClientDto } from './types';\n"],"names":["mapDtoToModel","clientDto","Type","isArrayFilled","Object","values","data","id","name","image","type","phones","emails","isReturning","VALUE_TYPE","MethodName","freeze","AddFormattedName","ParseFormattedName","CompanyAdd","ContactAdd","CompanyGet","ContactGet","GetCompanyContacts","CompanyUpdate","ContactUpdate","DealContactGet","RequestKey","ParseName","ClientService","saveMany","clients","Core","getStore","dispatch","map","error","console","getLinkedContactByCompany","companyData","company","getters","contactId","client","getContactById","contact","module","Module","Crm","code","CrmEntity","Contact","methodName","requestKey","entityCode","getCompanyById","Company","getLinkedContactByDeal","primaryContactId","undefined","companies","companiesToAdd","companiesToUpdate","contactsToAdd","contactsToUpdate","clientsToRequest","forEach","index","restMethods","result","filter","contacts","bind","Promise","resolve","keys","length","BX","rest","callBatch","batchResult","errors","ajaxResult","answer","error_description","Error","Tag","render","textContent","currentClient","reduce","methods","method","params","fields","FORMATTED_NAME","TITLE","PHONE","VALUE","EMAIL","REGISTER_SONET_EVENT","COMPANY_ID","NAME","SECOND_NAME","LAST_NAME","ID","Number","PHOTO","showUrl","entity","LOGO","dealId","primaryContact","find","item","IS_PRIMARY","CONTACT_ID","template","replace","clientService","ClientMappers"],"mappings":"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"}