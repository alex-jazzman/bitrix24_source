this.BX=this.BX||{};this.BX.Booking=this.BX.Booking||{};this.BX.Booking.Provider=this.BX.Booking.Provider||{};(function(e,t,o,i,s,r,a,n,d){"use strict";function l(e){const t={id:()=>Number(e.id)||0,resources:()=>e.resourcesIds.map((e=>({id:e}))),primaryClient:()=>{var t;return(t=e.clients)==null?void 0:t[0]},clients:()=>e.clients,name:()=>e.name,datePeriod:()=>({from:{timestamp:e.dateFromTs/1e3,timezone:e.timezoneFrom},to:{timestamp:e.dateToTs/1e3,timezone:e.timezoneTo}}),isConfirmed:()=>e.isConfirmed,rrule:()=>e.rrule,note:()=>e.note,visitStatus:()=>e.visitStatus,externalData:()=>e.externalData};const o=new Map([["resources",["resourcesIds"]],["datePeriod",["dateFromTs","dateToTs"]]]);return Object.keys(t).reduce(((i,s)=>{const r=o.get(s);const a=r?r.every((t=>t in e)):true;if(a&&(s in e||r)){const e=t[s]();if(e!==undefined){i[s]=e}}return i}),{})}function c(e){var o;const i=e.clients.filter((e=>t.Type.isArrayFilled(Object.values(e.data))));const s={id:e.id,updatedAt:e.updatedAt,resourcesIds:e.resources.map((({id:e})=>e)),primaryClient:i==null?void 0:i[0],clients:i,counter:e.counter,counters:e.counters,createdAt:e.createdAt,name:e.name,dateFromTs:e.datePeriod.from.timestamp*1e3,timezoneFrom:e.datePeriod.from.timezone,dateToTs:e.datePeriod.to.timestamp*1e3,timezoneTo:e.datePeriod.to.timezone,isConfirmed:e.isConfirmed,rrule:e.rrule,note:e.note,visitStatus:e.visitStatus,externalData:e.externalData,messages:(o=e.messages)!=null&&o.length?e.messages:undefined};return Object.fromEntries(Object.entries(s).filter((([,e])=>!t.Type.isUndefined(e))))}function g(e,t){return{waitListItemId:e,resources:t.resourcesIds.map((e=>({id:e}))),datePeriod:{from:{timestamp:t.dateFromTs/1e3,timezone:t.timezoneFrom},to:{timestamp:t.dateToTs/1e3,timezone:t.timezoneTo}}}}var p=babelHelpers.classPrivateFieldLooseKey("response");class u{constructor(e){Object.defineProperty(this,p,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,p)[p]=e}getBookings(){return babelHelpers.classPrivateFieldLooseBase(this,p)[p].map((e=>c(e)))}getBookingsIds(){return babelHelpers.classPrivateFieldLooseBase(this,p)[p].map((({id:e})=>e))}getClients(){return babelHelpers.classPrivateFieldLooseBase(this,p)[p].flatMap((({clients:e})=>e)).map((e=>n.ClientMappers.mapDtoToModel(e)))}getResources(){return babelHelpers.classPrivateFieldLooseBase(this,p)[p].flatMap((({resources:e})=>e)).map((e=>d.ResourceMappers.mapDtoToModel(e)))}}var m=babelHelpers.classPrivateFieldLooseKey("filterRequests");var B=babelHelpers.classPrivateFieldLooseKey("lastFilterRequest");var v=babelHelpers.classPrivateFieldLooseKey("onAfterDelete");var h=babelHelpers.classPrivateFieldLooseKey("extractFilterData");var k=babelHelpers.classPrivateFieldLooseKey("requestFilter");class b{constructor(){Object.defineProperty(this,k,{value:M});Object.defineProperty(this,h,{value:C});Object.defineProperty(this,v,{value:f});Object.defineProperty(this,m,{writable:true,value:{}});Object.defineProperty(this,B,{writable:true,value:void 0})}async add(e){const t=e.id;const r=o.Core.getStore();try{await r.dispatch(`${i.Model.Interface}/addCreatedFromEmbedBooking`,t);await r.dispatch(`${i.Model.Interface}/addQuickFilterIgnoredBookingId`,t);await r.dispatch(`${i.Model.Bookings}/add`,e);const o=l(e);const n=await(new s.ApiClient).post("Booking.add",{booking:o});const d=c(n);const g=new u([n]).getClients();void r.dispatch(`${i.Model.Clients}/upsertMany`,g);await r.dispatch(`${i.Model.Interface}/setAnimationPause`,true);await r.dispatch(`${i.Model.Interface}/addCreatedFromEmbedBooking`,d.id);await r.dispatch(`${i.Model.Interface}/addQuickFilterIgnoredBookingId`,d.id);await r.dispatch(`${i.Model.Bookings}/update`,{id:t,booking:d});void a.mainPageService.fetchCounters();return{success:true,booking:d}}catch(e){void r.dispatch(`${i.Model.Bookings}/delete`,t);console.error("BookingService: add error",e);return{success:false}}finally{await r.dispatch(`${i.Model.Interface}/setAnimationPause`,false)}}async addList(e){const t=o.Core.getStore();try{await t.dispatch(`${i.Model.Interface}/addCreatedFromEmbedBooking`,e.map((({id:e})=>e)));const o=e.map((e=>l(e)));const r=new s.ApiClient;const n=await r.post("Booking.addList",{bookingList:o});const d=n.map((e=>c(e)));await Promise.all([t.dispatch(`${i.Model.Interface}/addCreatedFromEmbedBooking`,d.map((({id:e})=>e))),t.dispatch(`${i.Model.Bookings}/upsertMany`,d)]);void a.mainPageService.fetchCounters();return d}catch(e){console.error("BookingService: add list error",e);return[]}}async update(e){const t=e.id;const r={...o.Core.getStore().getters[`${i.Model.Bookings}/getById`](t)};try{if(e.clients){var n;(n=e.primaryClient)!=null?n:e.primaryClient=e.clients[0]}await o.Core.getStore().dispatch(`${i.Model.Bookings}/update`,{id:t,booking:e});const r=l(e);const d=await(new s.ApiClient).post("Booking.update",{booking:r});const g=c(d);void o.Core.getStore().dispatch(`${i.Model.Bookings}/update`,{id:t,booking:g});const p=new u([d]).getClients();void o.Core.getStore().dispatch(`${i.Model.Clients}/upsertMany`,p);void a.mainPageService.fetchCounters()}catch(e){void o.Core.getStore().dispatch(`${i.Model.Bookings}/update`,{id:t,booking:r});console.error("BookingService: update error",e)}}async delete(e){const t={...o.Core.getStore().getters[`${i.Model.Bookings}/getById`](e)};try{void o.Core.getStore().dispatch(`${i.Model.Bookings}/delete`,e);await(new s.ApiClient).post("Booking.delete",{id:e});await babelHelpers.classPrivateFieldLooseBase(this,v)[v](e)}catch(e){void o.Core.getStore().dispatch(`${i.Model.Bookings}/upsert`,t);console.error("BookingService: delete error",e)}}async deleteList(e){try{void o.Core.getStore().dispatch(`${i.Model.Bookings}/deleteMany`,e);await(new s.ApiClient).post("Booking.deleteList",{ids:e});await Promise.all(e.map((e=>babelHelpers.classPrivateFieldLooseBase(this,v)[v](e))))}catch(e){console.error("BookingService: delete list error",e)}}async createFromWaitListItem(e,t){const r=o.Core.getStore();const n=t.id;const d={...r.getters[`${i.Model.WaitList}/getById`](e)};try{if(r.getters[`${i.Model.Interface}/isWaitListItemCreatedFromEmbed`](e)){await r.dispatch(`${i.Model.Interface}/addCreatedFromEmbedBooking`,n)}await r.dispatch(`${i.Model.WaitList}/delete`,e);await r.dispatch(`${i.Model.Bookings}/add`,t);const o=g(e,t);const d=await(new s.ApiClient).post("Booking.createFromWaitListItem",o);const l=c(d);await r.dispatch(`${i.Model.Interface}/setAnimationPause`,true);const p=new u([d]).getClients();await Promise.all([r.dispatch(`${i.Model.Clients}/upsertMany`,p),r.dispatch(`${i.Model.Interface}/addQuickFilterIgnoredBookingId`,l.id),r.dispatch(`${i.Model.Bookings}/update`,{id:n,booking:l}),r.dispatch(`${i.Model.Interface}/addCreatedFromEmbedBooking`,l.id)]);void a.mainPageService.fetchCounters();return{success:true,booking:l}}catch(e){await r.dispatch(`${i.Model.Bookings}/delete`,n);await r.dispatch(`${i.Model.WaitList}/upsert`,d);console.error("BookingService: add from wait list item error",e);return{success:false}}finally{await r.dispatch(`${i.Model.Interface}/setAnimationPause`,false)}}clearFilterCache(){babelHelpers.classPrivateFieldLooseBase(this,m)[m]={}}async filter(e){try{var t,o;const i=r.bookingFilter.prepareFilter(e);const s=JSON.stringify(i);(o=(t=babelHelpers.classPrivateFieldLooseBase(this,m)[m])[s])!=null?o:t[s]=babelHelpers.classPrivateFieldLooseBase(this,k)[k](i);babelHelpers.classPrivateFieldLooseBase(this,B)[B]=babelHelpers.classPrivateFieldLooseBase(this,m)[m][s];const a=await babelHelpers.classPrivateFieldLooseBase(this,m)[m][s];void babelHelpers.classPrivateFieldLooseBase(this,h)[h]({data:a,key:s})}catch(e){console.error("BookingService: filter error",e)}}async getById(e){try{const t=await babelHelpers.classPrivateFieldLooseBase(this,k)[k]({ID:[e]});const s=new u(t);await Promise.all([o.Core.getStore().dispatch(`${i.Model.Resources}/upsertMany`,s.getResources()),o.Core.getStore().dispatch(`${i.Model.Bookings}/upsertMany`,s.getBookings()),o.Core.getStore().dispatch(`${i.Model.Clients}/upsertMany`,s.getClients())])}catch(e){console.error("BookingService: getById error",e)}}}async function f(e){const t=o.Core.getStore().getters[`${i.Model.Interface}/editingBookingId`];if(e===t){await o.Core.getStore().dispatch(`${i.Model.Interface}/setEditingBookingId`,0);const e=o.Core.getStore().getters[`${i.Model.Interface}/selectedDateTs`];await a.mainPageService.loadData(e/1e3);const t=o.Core.getStore().getters[`${i.Model.Interface}/resourcesIds`];a.mainPageService.clearCache(t)}void o.Core.getStore().dispatch(`${i.Model.Interface}/addDeletingBooking`,e)}async function C({data:e,key:t}){const s=new u(e);await Promise.all([o.Core.getStore().dispatch(`${i.Model.Resources}/insertMany`,s.getResources()),o.Core.getStore().dispatch(`${i.Model.Bookings}/insertMany`,s.getBookings()),o.Core.getStore().dispatch(`${i.Model.Clients}/insertMany`,s.getClients())]);if(babelHelpers.classPrivateFieldLooseBase(this,m)[m][t]!==babelHelpers.classPrivateFieldLooseBase(this,B)[B]){return}void o.Core.getStore().dispatch(`${i.Model.Interface}/setFilteredBookingsIds`,s.getBookingsIds())}async function M(e){return(new s.ApiClient).post("Booking.list",{filter:e,select:["RESOURCES","CLIENTS","EXTERNAL_DATA","NOTE"],withCounters:true,withClientData:true,withExternalData:true})}const y=new b;const P={mapModelToDto:l,mapDtoToModel:c};e.BookingMappers=P;e.bookingService=y})(this.BX.Booking.Provider.Service=this.BX.Booking.Provider.Service||{},BX,BX.Booking,BX.Booking.Const,BX.Booking.Lib,BX.Booking.Lib,BX.Booking.Provider.Service,BX.Booking.Provider.Service,BX.Booking.Provider.Service);
//# sourceMappingURL=booking-service.bundle.map.js