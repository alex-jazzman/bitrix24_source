this.BX=this.BX||{};this.BX.Booking=this.BX.Booking||{};this.BX.Booking.Provider=this.BX.Booking.Provider||{};(function(e,t,o,i,s,r,a,n,d,l){"use strict";function c(e){const t={id:()=>Number(e.id)||0,resources:()=>e.resourcesIds.map((e=>({id:e}))),primaryClient:()=>{var t;return(t=e.clients)==null?void 0:t[0]},clients:()=>e.clients,name:()=>e.name,datePeriod:()=>({from:{timestamp:e.dateFromTs/1e3,timezone:e.timezoneFrom},to:{timestamp:e.dateToTs/1e3,timezone:e.timezoneTo}}),isConfirmed:()=>e.isConfirmed,rrule:()=>e.rrule,note:()=>e.note,visitStatus:()=>e.visitStatus,externalData:()=>e.externalData};const o=new Map([["resources",["resourcesIds"]],["datePeriod",["dateFromTs","dateToTs"]]]);return Object.keys(t).reduce(((i,s)=>{const r=o.get(s);const a=r?r.every((t=>t in e)):true;if(a&&(s in e||r)){const e=t[s]();if(e!==undefined){i[s]=e}}return i}),{})}function g(e){var o;const i=e.clients.filter((e=>t.Type.isArrayFilled(Object.values(e.data))));const s={id:e.id,updatedAt:e.updatedAt,resourcesIds:p(e),primaryClient:i==null?void 0:i[0],clients:i,counter:e.counter,counters:e.counters,createdAt:e.createdAt,name:e.name,dateFromTs:e.datePeriod.from.timestamp*1e3,timezoneFrom:e.datePeriod.from.timezone,dateToTs:e.datePeriod.to.timestamp*1e3,timezoneTo:e.datePeriod.to.timezone,isConfirmed:e.isConfirmed,rrule:e.rrule,note:e.note,visitStatus:e.visitStatus,externalData:e.externalData,messages:(o=e.messages)!=null&&o.length?e.messages:undefined};return Object.fromEntries(Object.entries(s).filter((([,e])=>!t.Type.isUndefined(e))))}function p({resources:e}){return[e.find((e=>e.isPrimary)),...e.filter((e=>!e.isPrimary))].map((({id:e})=>e))}function m(e,t){return{waitListItemId:e,resources:t.resourcesIds.map((e=>({id:e}))),datePeriod:{from:{timestamp:t.dateFromTs/1e3,timezone:t.timezoneFrom},to:{timestamp:t.dateToTs/1e3,timezone:t.timezoneTo}}}}var u=babelHelpers.classPrivateFieldLooseKey("response");class B{constructor(e){Object.defineProperty(this,u,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,u)[u]=e}getBookings(){return babelHelpers.classPrivateFieldLooseBase(this,u)[u].map((e=>g(e)))}getBookingsIds(){return babelHelpers.classPrivateFieldLooseBase(this,u)[u].map((({id:e})=>e))}getClients(){return babelHelpers.classPrivateFieldLooseBase(this,u)[u].flatMap((({clients:e})=>e)).map((e=>d.ClientMappers.mapDtoToModel(e)))}getResources(){return babelHelpers.classPrivateFieldLooseBase(this,u)[u].flatMap((({resources:e})=>e)).map((e=>l.ResourceMappers.mapDtoToModel(e)))}}var v=babelHelpers.classPrivateFieldLooseKey("filterRequests");var k=babelHelpers.classPrivateFieldLooseKey("lastFilterRequest");var h=babelHelpers.classPrivateFieldLooseKey("onAfterDelete");var b=babelHelpers.classPrivateFieldLooseKey("extractFilterData");var C=babelHelpers.classPrivateFieldLooseKey("requestFilter");class f{constructor(){Object.defineProperty(this,C,{value:P});Object.defineProperty(this,b,{value:y});Object.defineProperty(this,h,{value:M});Object.defineProperty(this,v,{writable:true,value:{}});Object.defineProperty(this,k,{writable:true,value:void 0})}async add(e){const r=e.id;const a=o.Core.getStore();try{await a.dispatch(`${i.Model.Interface}/addCreatedFromEmbedBooking`,r);await a.dispatch(`${i.Model.Filter}/addQuickFilterIgnoredBookingId`,r);await a.dispatch(`${i.Model.Bookings}/add`,e);const o=c(e);const d=await(new s.ApiClient).post("Booking.add",{booking:o});const l=g(d);const p=new B([d]).getClients();void a.dispatch(`${i.Model.Clients}/upsertMany`,p);await a.dispatch(`${i.Model.Interface}/setAnimationPause`,true);await a.dispatch(`${i.Model.Interface}/addCreatedFromEmbedBooking`,l.id);await a.dispatch(`${i.Model.Filter}/addQuickFilterIgnoredBookingId`,l.id);await a.dispatch(`${i.Model.Bookings}/update`,{id:r,booking:l});t.Event.EventEmitter.emit(i.EventName.CreateBookings,{bookings:[l]});void n.mainPageService.fetchCounters();return{success:true,booking:l}}catch(e){void a.dispatch(`${i.Model.Bookings}/delete`,r);console.error("BookingService: add error",e);return{success:false}}finally{await a.dispatch(`${i.Model.Interface}/setAnimationPause`,false)}}async addList(e){const r=o.Core.getStore();try{await r.dispatch(`${i.Model.Interface}/addCreatedFromEmbedBooking`,e.map((({id:e})=>e)));const o=e.map((e=>c(e)));const a=new s.ApiClient;const d=await a.post("Booking.addList",{bookingList:o});const l=d.map((e=>g(e)));await Promise.all([r.dispatch(`${i.Model.Interface}/addCreatedFromEmbedBooking`,l.map((({id:e})=>e))),r.dispatch(`${i.Model.Bookings}/upsertMany`,l)]);t.Event.EventEmitter.emit(i.EventName.CreateBookings,{bookings:l});void n.mainPageService.fetchCounters();return l}catch(e){console.error("BookingService: add list error",e);return[]}}async update(e){const r=e.id;const d={...o.Core.getStore().getters[`${i.Model.Bookings}/getById`](r)};try{if(e.clients){var l;(l=e.primaryClient)!=null?l:e.primaryClient=e.clients[0]}await o.Core.getStore().dispatch(`${i.Model.Bookings}/update`,{id:r,booking:e});const p=c(e);const m=await(new s.ApiClient).post("Booking.update",{booking:p});const u=g(m);void o.Core.getStore().dispatch(`${i.Model.Bookings}/update`,{id:r,booking:u});const v=new B([m]).getClients();void o.Core.getStore().dispatch(`${i.Model.Clients}/upsertMany`,v);t.Event.EventEmitter.emit(i.EventName.UpdateBooking,{oldBooking:a.deepToRaw(d),newBooking:a.deepToRaw(u)});void n.mainPageService.fetchCounters()}catch(e){void o.Core.getStore().dispatch(`${i.Model.Bookings}/update`,{id:r,booking:d});console.error("BookingService: update error",e)}}async delete(e){const r={...o.Core.getStore().getters[`${i.Model.Bookings}/getById`](e)};try{void o.Core.getStore().dispatch(`${i.Model.Bookings}/delete`,e);await(new s.ApiClient).post("Booking.delete",{id:e});t.Event.EventEmitter.emit(i.EventName.DeleteBooking,{booking:a.deepToRaw(r)});await babelHelpers.classPrivateFieldLooseBase(this,h)[h](e)}catch(e){void o.Core.getStore().dispatch(`${i.Model.Bookings}/upsert`,r);console.error("BookingService: delete error",e)}}async deleteList(e){try{void o.Core.getStore().dispatch(`${i.Model.Bookings}/deleteMany`,e);await(new s.ApiClient).post("Booking.deleteList",{ids:e});await Promise.all(e.map((e=>babelHelpers.classPrivateFieldLooseBase(this,h)[h](e))))}catch(e){console.error("BookingService: delete list error",e)}}async createFromWaitListItem(e,r){const a=o.Core.getStore();const d=r.id;const l={...a.getters[`${i.Model.WaitList}/getById`](e)};try{if(a.getters[`${i.Model.Interface}/isWaitListItemCreatedFromEmbed`](e)){await a.dispatch(`${i.Model.Interface}/addCreatedFromEmbedBooking`,d)}await a.dispatch(`${i.Model.WaitList}/delete`,e);await a.dispatch(`${i.Model.Bookings}/add`,r);const o=m(e,r);const l=await(new s.ApiClient).post("Booking.createFromWaitListItem",o);const c=g(l);await a.dispatch(`${i.Model.Interface}/setAnimationPause`,true);const p=new B([l]).getClients();await Promise.all([a.dispatch(`${i.Model.Clients}/upsertMany`,p),a.dispatch(`${i.Model.Filter}/addQuickFilterIgnoredBookingId`,c.id),a.dispatch(`${i.Model.Bookings}/update`,{id:d,booking:c}),a.dispatch(`${i.Model.Interface}/addCreatedFromEmbedBooking`,c.id)]);t.Event.EventEmitter.emit(i.EventName.CreateBookings,{bookings:[c]});void n.mainPageService.fetchCounters();return{success:true,booking:c}}catch(e){await a.dispatch(`${i.Model.Bookings}/delete`,d);await a.dispatch(`${i.Model.WaitList}/upsert`,l);console.error("BookingService: add from wait list item error",e);return{success:false}}finally{await a.dispatch(`${i.Model.Interface}/setAnimationPause`,false)}}clearFilterCache(){babelHelpers.classPrivateFieldLooseBase(this,v)[v]={}}async filter(e){try{var t,o;const i=r.bookingFilter.prepareFilter(e);const s=JSON.stringify(i);(o=(t=babelHelpers.classPrivateFieldLooseBase(this,v)[v])[s])!=null?o:t[s]=babelHelpers.classPrivateFieldLooseBase(this,C)[C](i);babelHelpers.classPrivateFieldLooseBase(this,k)[k]=babelHelpers.classPrivateFieldLooseBase(this,v)[v][s];const a=await babelHelpers.classPrivateFieldLooseBase(this,v)[v][s];void babelHelpers.classPrivateFieldLooseBase(this,b)[b]({data:a,key:s})}catch(e){console.error("BookingService: filter error",e)}}async getById(e){try{const t=await babelHelpers.classPrivateFieldLooseBase(this,C)[C]({ID:[e]});const s=new B(t);await Promise.all([o.Core.getStore().dispatch(`${i.Model.Resources}/upsertMany`,s.getResources()),o.Core.getStore().dispatch(`${i.Model.Bookings}/upsertMany`,s.getBookings()),o.Core.getStore().dispatch(`${i.Model.Clients}/upsertMany`,s.getClients())])}catch(e){console.error("BookingService: getById error",e)}}}async function M(e){const t=o.Core.getStore().getters[`${i.Model.Interface}/editingBookingId`];if(e===t){await o.Core.getStore().dispatch(`${i.Model.Interface}/setEditingBookingId`,0);const e=o.Core.getStore().getters[`${i.Model.Interface}/selectedDateTs`];await n.mainPageService.loadData(e/1e3);const t=o.Core.getStore().getters[`${i.Model.Interface}/resourcesIds`];n.mainPageService.clearCache(t)}void o.Core.getStore().dispatch(`${i.Model.Interface}/addDeletingBooking`,e)}async function y({data:e,key:t}){const s=new B(e);await Promise.all([o.Core.getStore().dispatch(`${i.Model.Resources}/insertMany`,s.getResources()),o.Core.getStore().dispatch(`${i.Model.Bookings}/insertMany`,s.getBookings()),o.Core.getStore().dispatch(`${i.Model.Clients}/insertMany`,s.getClients())]);if(babelHelpers.classPrivateFieldLooseBase(this,v)[v][t]!==babelHelpers.classPrivateFieldLooseBase(this,k)[k]){return}void o.Core.getStore().dispatch(`${i.Model.Filter}/setFilteredBookingsIds`,s.getBookingsIds())}async function P(e){return(new s.ApiClient).post("Booking.list",{filter:e,select:["RESOURCES","CLIENTS","EXTERNAL_DATA","NOTE"],withCounters:true,withClientData:true,withExternalData:true})}const w=new f;const F={mapModelToDto:c,mapDtoToModel:g};e.BookingMappers=F;e.bookingService=w})(this.BX.Booking.Provider.Service=this.BX.Booking.Provider.Service||{},BX,BX.Booking,BX.Booking.Const,BX.Booking.Lib,BX.Booking.Lib,BX.Booking.Lib,BX.Booking.Provider.Service,BX.Booking.Provider.Service,BX.Booking.Provider.Service);
//# sourceMappingURL=booking-service.bundle.map.js