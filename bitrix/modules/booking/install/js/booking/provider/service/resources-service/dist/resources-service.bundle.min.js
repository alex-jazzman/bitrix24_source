this.BX=this.BX||{};this.BX.Booking=this.BX.Booking||{};this.BX.Booking.Provider=this.BX.Booking.Provider||{};(function(e,t,i,o){"use strict";function n(e){return{id:e.id,typeId:e.type.id,name:e.name,description:e.description,slotRanges:e.slotRanges.map((e=>({...e,weekDays:Object.values(e.weekDays)}))),counter:e.counter,isMain:e.isMain,createdBy:e.createdBy,createdAt:e.createdAt,updatedAt:e.updatedAt,isInfoNotificationOn:e.isInfoNotificationOn,templateTypeInfo:e.templateTypeInfo,infoNotificationDelay:e.infoNotificationDelay,isConfirmationNotificationOn:e.isConfirmationNotificationOn,templateTypeConfirmation:e.templateTypeConfirmation,confirmationNotificationDelay:e.confirmationNotificationDelay,confirmationNotificationRepetitions:e.confirmationNotificationRepetitions,confirmationNotificationRepetitionsInterval:e.confirmationNotificationRepetitionsInterval,confirmationCounterDelay:e.confirmationCounterDelay,isReminderNotificationOn:e.isReminderNotificationOn,templateTypeReminder:e.templateTypeReminder,reminderNotificationDelay:e.reminderNotificationDelay,isDelayedNotificationOn:e.isDelayedNotificationOn,templateTypeDelayed:e.templateTypeDelayed,delayedNotificationDelay:e.delayedNotificationDelay,delayedCounterDelay:e.delayedCounterDelay,isFeedbackNotificationOn:e.isFeedbackNotificationOn,templateTypeFeedback:e.templateTypeFeedback}}function a(e){return{id:e.id,type:{id:e.typeId},name:e.name,description:e.description,slotRanges:e.slotRanges,counter:null,isMain:e.isMain,createdBy:null,createdAt:null,updatedAt:null,isInfoNotificationOn:e.isInfoNotificationOn,templateTypeInfo:e.templateTypeInfo,infoNotificationDelay:e.infoNotificationDelay,isConfirmationNotificationOn:e.isConfirmationNotificationOn,templateTypeConfirmation:e.templateTypeConfirmation,confirmationNotificationDelay:e.confirmationNotificationDelay,confirmationNotificationRepetitions:e.confirmationNotificationRepetitions,confirmationNotificationRepetitionsInterval:e.confirmationNotificationRepetitionsInterval,confirmationCounterDelay:e.confirmationCounterDelay,isReminderNotificationOn:e.isReminderNotificationOn,templateTypeReminder:e.templateTypeReminder,reminderNotificationDelay:e.reminderNotificationDelay,isDelayedNotificationOn:e.isDelayedNotificationOn,templateTypeDelayed:e.templateTypeDelayed,delayedNotificationDelay:e.delayedNotificationDelay,delayedCounterDelay:e.delayedCounterDelay,isFeedbackNotificationOn:e.isFeedbackNotificationOn,templateTypeFeedback:e.templateTypeFeedback}}var r=babelHelpers.classPrivateFieldLooseKey("updateResourcesFromFavorites");var s=babelHelpers.classPrivateFieldLooseKey("turnOnTrial");class c{constructor(){Object.defineProperty(this,s,{value:d});Object.defineProperty(this,r,{value:l})}async add(e){try{const c=a(e);const l=await(new i.ApiClient).post("Resource.add",{resource:c});const d=n(l);t.Core.getStore().commit("resources/upsert",d);if(d.isMain){await t.Core.getStore().dispatch(`${o.Model.Favorites}/add`,d.id)}if(t.Core.getStore().getters[`${o.Model.Interface}/canTurnOnTrial`]){void babelHelpers.classPrivateFieldLooseBase(this,s)[s]()}babelHelpers.classPrivateFieldLooseBase(this,r)[r]();return l}catch(e){console.error("ResourceService: add error",e);return e}}async update(e){const s=e.id;const c={...t.Core.getStore().getters["resources/getById"](s)};try{const l=a(e);const d=await(new i.ApiClient).post("Resource.update",{resource:l});const f=n(d);t.Core.getStore().commit("resources/upsert",f);if(c.isMain&&!f.isMain){await t.Core.getStore().dispatch(`${o.Model.Favorites}/delete`,s)}babelHelpers.classPrivateFieldLooseBase(this,r)[r]();return d}catch(e){console.error("ResourceService: update error",e);return e}}async delete(e){try{await(new i.ApiClient).post("Resource.delete",{id:e});await Promise.all([t.Core.getStore().dispatch(`${o.Model.Resources}/delete`,e),t.Core.getStore().dispatch(`${o.Model.Favorites}/delete`,e),t.Core.getStore().dispatch(`${o.Model.Interface}/deleteResourceId`,e)])}catch(e){console.error("ResourceService: delete error",e)}}async hasBookings(e){try{return(new i.ApiClient).post("Resource.hasBookings",{resourceId:e})}catch(e){console.error("ResourceService: hasBookings error",e)}return Promise.resolve()}}function l(){const e=t.Core.getStore().getters[`${o.Model.Interface}/isFilterMode`];if(e){return}const i=t.Core.getStore().getters[`${o.Model.Favorites}/get`];void t.Core.getStore().dispatch(`${o.Model.Interface}/setResourcesIds`,i)}async function d(){await Promise.all([t.Core.getStore().dispatch(`${o.Model.Interface}/setCanTurnOnTrial`,false),t.Core.getStore().dispatch(`${o.Model.Interface}/setIsFeatureEnabled`,true)]);await new Promise((e=>setTimeout(e,2e3)));await t.Core.getStore().dispatch(`${o.Model.Interface}/setIsShownTrialPopup`,true)}const f=new c;const p={mapModelToDto:a,mapDtoToModel:n};e.ResourceMappers=p;e.resourceService=f})(this.BX.Booking.Provider.Service=this.BX.Booking.Provider.Service||{},BX.Booking,BX.Booking.Lib,BX.Booking.Const);
//# sourceMappingURL=resources-service.bundle.map.js