this.BX=this.BX||{};this.BX.Booking=this.BX.Booking||{};this.BX.Booking.Provider=this.BX.Booking.Provider||{};(function(e,t,s,i){"use strict";var o=babelHelpers.classPrivateFieldLooseKey("response");class r{constructor(e){Object.defineProperty(this,o,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,o)[o]=e}getCounters(){return babelHelpers.classPrivateFieldLooseBase(this,o)[o].counters}getNotifications(){return babelHelpers.classPrivateFieldLooseBase(this,o)[o].notifications}getNotificationTemplates(){return babelHelpers.classPrivateFieldLooseBase(this,o)[o].notificationTemplateTypes}getPushCommands(){return babelHelpers.classPrivateFieldLooseBase(this,o)[o].pushCommands}getBookings(){return babelHelpers.classPrivateFieldLooseBase(this,o)[o].bookings}}class a{async fetchData(){try{const e=t.Extension.getSettings("booking.provider.service.dictionary-service");const s=new r(e);await Promise.all([this.$store.dispatch(`${i.Model.Dictionary}/setCounters`,s.getCounters()),this.$store.dispatch(`${i.Model.Dictionary}/setNotifications`,s.getNotifications()),this.$store.dispatch(`${i.Model.Dictionary}/setNotificationTemplates`,s.getNotificationTemplates()),this.$store.dispatch(`${i.Model.Dictionary}/setPushCommands`,s.getPushCommands()),this.$store.dispatch(`${i.Model.Dictionary}/setBookings`,s.getBookings())])}catch(e){console.error("BookingDictionaryGetRequest: error",e)}}get $store(){return s.Core.getStore()}}const n=new a;e.dictionaryService=n})(this.BX.Booking.Provider.Service=this.BX.Booking.Provider.Service||{},BX,BX.Booking,BX.Booking.Const);
//# sourceMappingURL=dictionary-service.bundle.map.js